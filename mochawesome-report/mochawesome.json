{
  "stats": {
    "suites": 32,
    "tests": 83,
    "passes": 56,
    "pending": 1,
    "failures": 26,
    "start": "2025-08-30T08:40:22.303Z",
    "end": "2025-08-30T08:41:36.676Z",
    "duration": 74373,
    "testsRegistered": 83,
    "passPercent": 68.29268292682927,
    "pendingPercent": 1.2048192771084338,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bb672270-a770-4ccc-9bc8-0a4c71e70951",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7b6da004-7739-4e06-a4f0-c2c6c58c1b73",
          "title": "POST Request with Variables Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\basic\\post-with-variables.ts",
          "file": "\\examples\\basic\\post-with-variables.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST Request with Variables Example\"",
              "fullTitle": "POST Request with Variables Example \"before each\" hook in \"POST Request with Variables Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up test-specific data (global auth data already available from setup)\nsrc_1.restified.setLocalVariable('postTitle', 'My Test Post');\nsrc_1.restified.setLocalVariable('postBody', 'Created using global auth by {{globalUserEmail}}');",
              "err": {},
              "uuid": "7c3d7b99-9309-418d-85d8-5d1f223c64c1",
              "parentUUID": "7b6da004-7739-4e06-a4f0-c2c6c58c1b73",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a post using global client and variables",
              "fullTitle": "POST Request with Variables Example should create a post using global client and variables",
              "timedOut": false,
              "duration": 42,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Create Post');\n// Use pre-configured API client from global setup\n// Common headers are already included in the client configuration\nconst createResponse = await src_1.restified\n    .given()\n    .useClient('api') // Global client with pre-configured headers\n    .header('X-Author', '{{globalUserEmail}}')\n    .when()\n    .post('/posts', {\n    title: '{{postTitle}}',\n    body: '{{postBody}}',\n    userId: '{{globalUserId}}' // Using global user ID from auth\n})\n    .execute();\n// Verify creation and extract the ID\nawait createResponse\n    .statusCode(201)\n    .jsonPath('$.title', 'My Test Post')\n    .jsonPath('$.userId', '1') // JSONPlaceholder returns userId as string\n    .extract('$.id', 'createdPostId')\n    .execute();\nconsole.log('üìù Post created with ID:', src_1.restified.getVariable('createdPostId'));",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:231:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:35:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:231:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:25:28)",
                "diff": null
              },
              "uuid": "ec1a2d50-9abe-433e-bfdb-65ca9d411886",
              "parentUUID": "7b6da004-7739-4e06-a4f0-c2c6c58c1b73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve post using global client and extracted variables",
              "fullTitle": "POST Request with Variables Example should retrieve post using global client and extracted variables",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Retrieve Post');\n// Use the globalUserId that was set during global authentication\n// Common headers are already included in the client configuration\nconst getResponse = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured API client\n    .header('X-Requested-By', '{{globalUserEmail}}')\n    .when()\n    .get('/posts/{{globalUserId}}') // Using global user ID\n    .execute();\nawait getResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.userId', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.title')\n    .custom((response) => {\n    // Verify we can access global variables in custom assertions\n    return src_1.restified.getVariable('testEnvironment') === 'development';\n}, 'Should have access to global test environment')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:59:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:53:25)",
                "diff": null
              },
              "uuid": "3f5e3b10-4ed9-45f2-b6a6-7304c3945659",
              "parentUUID": "7b6da004-7739-4e06-a4f0-c2c6c58c1b73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate cross-client variable usage",
              "fullTitle": "POST Request with Variables Example should demonstrate cross-client variable usage",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Cross-Client');\n// First, create data using API client\n// Common headers are already included in the client configuration\nconst apiResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait apiResponse\n    .statusCode(200)\n    .extract('$.company.catchPhrase', 'companyCatchPhrase')\n    .execute();\n// Then use testUtils client to validate the extracted data\n// Common headers are already included in the client configuration\nconst testResponse = await src_1.restified\n    .given()\n    .useClient('testUtils') // Different client from global setup\n    .when()\n    .post('/post', {\n    extractedData: '{{companyCatchPhrase}}',\n    globalUser: '{{globalUserEmail}}',\n    testSuite: '{{testSuite}}'\n})\n    .execute();\nawait testResponse\n    .statusCode(200)\n    .jsonPath('$.json.globalUser', src_1.restified.getVariable('globalUserEmail'))\n    .jsonPath('$.json.testSuite', src_1.restified.getVariable('testSuite'))\n    .execute();\nconsole.log('üåê Cross-client variable sharing successful');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:83:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:78:25)",
                "diff": null
              },
              "uuid": "ea09492a-0365-4219-93ea-2f32eb8319e4",
              "parentUUID": "7b6da004-7739-4e06-a4f0-c2c6c58c1b73",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ec1a2d50-9abe-433e-bfdb-65ca9d411886",
            "3f5e3b10-4ed9-45f2-b6a6-7304c3945659",
            "ea09492a-0365-4219-93ea-2f32eb8319e4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 50,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "94c35865-a9d3-4e5a-a839-58995dde0843",
          "title": "Data-Driven Testing Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\data-driven-testing.ts",
          "file": "\\examples\\advanced\\data-driven-testing.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Data-Driven Testing Example\"",
              "fullTitle": "Data-Driven Testing Example \"after all\" hook in \"Data-Driven Testing Example\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "1889365a-cd85-4478-af6c-05097cc97ce2",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should validate user 1 has correct name: Leanne Graham",
              "fullTitle": "Data-Driven Testing Example should validate user 1 has correct name: Leanne Graham",
              "timedOut": false,
              "duration": 1483,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "79950362-78ec-444e-b081-fe97a2df352b",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 2 has correct name: Ervin Howell",
              "fullTitle": "Data-Driven Testing Example should validate user 2 has correct name: Ervin Howell",
              "timedOut": false,
              "duration": 1097,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "31981afa-c6c0-47c0-abb9-39dbd1c86691",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 3 has correct name: Clementine Bauch",
              "fullTitle": "Data-Driven Testing Example should validate user 3 has correct name: Clementine Bauch",
              "timedOut": false,
              "duration": 366,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "8f321495-fa14-40e9-93d7-04c8ef31c3f5",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 1 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 1 has posts within expected range",
              "timedOut": false,
              "duration": 361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "fc140d08-08d7-4706-b7f2-d16707df431d",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 2 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 2 has posts within expected range",
              "timedOut": false,
              "duration": 1282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "18674b74-6859-446c-b1fb-3ab0857cd91e",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 3 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 3 has posts within expected range",
              "timedOut": false,
              "duration": 1233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "9feacd73-2e16-4bd9-9a4c-e8ca1b2f665f",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for /posts/1",
              "fullTitle": "Data-Driven Testing Example should return 200 for /posts/1",
              "timedOut": false,
              "duration": 640,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "83f6a31d-0356-4fd3-85c4-e29a6ca4fbd0",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for /posts/999",
              "fullTitle": "Data-Driven Testing Example should return 404 for /posts/999",
              "timedOut": false,
              "duration": 1404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "5d9aaea1-dbef-4733-b0e1-6723e5bbefcb",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for /users/1",
              "fullTitle": "Data-Driven Testing Example should return 200 for /users/1",
              "timedOut": false,
              "duration": 1492,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "e6e614f9-f0e5-4022-a9a4-f87ae7b9948e",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for /users/999",
              "fullTitle": "Data-Driven Testing Example should return 404 for /users/999",
              "timedOut": false,
              "duration": 3546,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "1989602b-a7c9-4f76-86ab-803f1ae52a8c",
              "parentUUID": "94c35865-a9d3-4e5a-a839-58995dde0843",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "79950362-78ec-444e-b081-fe97a2df352b",
            "31981afa-c6c0-47c0-abb9-39dbd1c86691",
            "8f321495-fa14-40e9-93d7-04c8ef31c3f5",
            "fc140d08-08d7-4706-b7f2-d16707df431d",
            "18674b74-6859-446c-b1fb-3ab0857cd91e",
            "9feacd73-2e16-4bd9-9a4c-e8ca1b2f665f",
            "83f6a31d-0356-4fd3-85c4-e29a6ca4fbd0",
            "5d9aaea1-dbef-4733-b0e1-6723e5bbefcb",
            "e6e614f9-f0e5-4022-a9a4-f87ae7b9948e",
            "1989602b-a7c9-4f76-86ab-803f1ae52a8c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12904,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0caeaa92-7384-4e23-8fdb-7763a5b25450",
          "title": "Database Integration Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
          "file": "\\examples\\advanced\\database-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Database Integration Testing\"",
              "fullTitle": "Database Integration Testing \"before all\" hook in \"Database Integration Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup database connections (using mock/test databases)\n// PostgreSQL connection (if available)\nif (process.env.POSTGRES_CONNECTION_STRING || process.env.POSTGRES_HOST) {\n    await index_1.restified.createDatabaseClient('postgres', {\n        type: 'postgresql',\n        host: process.env.POSTGRES_HOST || 'localhost',\n        port: parseInt(process.env.POSTGRES_PORT || '5432'),\n        username: process.env.POSTGRES_USER || 'test',\n        password: process.env.POSTGRES_PASSWORD || 'test',\n        database: process.env.POSTGRES_DB || 'testdb',\n        connectionString: process.env.POSTGRES_CONNECTION_STRING,\n        timeout: 10000\n    });\n}\n// MongoDB connection (if available)\nif (process.env.MONGODB_CONNECTION_STRING || process.env.MONGODB_HOST) {\n    await index_1.restified.createDatabaseClient('mongodb', {\n        type: 'mongodb',\n        host: process.env.MONGODB_HOST || 'localhost',\n        port: parseInt(process.env.MONGODB_PORT || '27017'),\n        database: process.env.MONGODB_DB || 'testdb',\n        connectionString: process.env.MONGODB_CONNECTION_STRING,\n        timeout: 10000\n    });\n}",
              "err": {},
              "uuid": "84a8c90a-ef4c-41e1-a8ce-e6e24cbd6c0d",
              "parentUUID": "0caeaa92-7384-4e23-8fdb-7763a5b25450",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Database Integration Testing\"",
              "fullTitle": "Database Integration Testing \"after all\" hook in \"Database Integration Testing\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "3d661016-9b50-4c87-a252-df1f7a00e7e0",
              "parentUUID": "0caeaa92-7384-4e23-8fdb-7763a5b25450",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "820a02a5-3227-4877-90e7-56951c1c3185",
              "title": "PostgreSQL Integration",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"PostgreSQL Integration\"",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration \"before each\" hook in \"PostgreSQL Integration\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!index_1.restified.getDatabaseClient) {\n    this.skip();\n}\ntry {\n    index_1.restified.getDatabaseClient('postgres');\n}\ncatch {\n    this.skip();\n}",
                  "err": {},
                  "uuid": "c41a9eeb-25e8-4bd5-a5f1-98389309b88f",
                  "parentUUID": "820a02a5-3227-4877-90e7-56951c1c3185",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate user creation via API and database",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should validate user creation via API and database",
                  "timedOut": false,
                  "duration": 1141,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\n// Create snapshot before test\nawait dbClient.createSnapshot('before-user-test', ['users']);\n// Create user via API\nconst response = await index_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .post('/users', {\n    name: 'Database Test User',\n    email: 'dbtest@example.com',\n    username: 'dbtestuser'\n})\n    .execute();\nawait response\n    .statusCode(201)\n    .extract('$.id', 'createdUserId')\n    .execute();\n// Simulate database state validation\n// In real scenario, this would check if user was actually created in database\nconst userId = index_1.restified.getVariable('createdUserId');\n// Mock database query result\nconst queryResult = await dbClient.executeQuery('SELECT * FROM users WHERE external_id = $1', [userId]);\n// In a real test, you would validate the user exists in database\nconsole.log(`Created user with ID: ${userId}`);\n(0, chai_1.expect)(queryResult.executionTime).to.be.a('number');",
                  "err": {
                    "message": "AssertionError: expected undefined to be a number",
                    "estack": "AssertionError: expected undefined to be a number\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:95:47)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "098b6edf-9c00-4c4f-91f7-6f823664a2c2",
                  "parentUUID": "820a02a5-3227-4877-90e7-56951c1c3185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate data consistency across API and database",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should validate data consistency across API and database",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\n// Test data consistency validation\nconst validationResult = await index_1.restified.validateDatabaseState([\n    {\n        client: 'postgres',\n        table: 'users',\n        conditions: { active: true },\n        expectedCount: 5\n    },\n    {\n        client: 'postgres',\n        table: 'orders',\n        conditions: { status: 'pending' },\n        expectedCount: { min: 1 }\n    }\n]);\n// In real scenario, this would validate actual database state\n(0, chai_1.expect)(validationResult).to.have.property('success');\n(0, chai_1.expect)(validationResult).to.have.property('results');",
                  "err": {},
                  "uuid": "451b6ee6-7339-4e14-8a5a-0ea7ef03b1d8",
                  "parentUUID": "820a02a5-3227-4877-90e7-56951c1c3185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database transactions",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should handle database transactions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\ntry {\n    // Begin transaction\n    await dbClient.beginTransaction();\n    // Execute test operations\n    await dbClient.executeQuery('INSERT INTO test_table (name, value) VALUES ($1, $2)', ['transaction-test', 42]);\n    // Validate data exists in transaction\n    const result = await dbClient.executeQuery('SELECT * FROM test_table WHERE name = $1', ['transaction-test']);\n    // Rollback transaction (cleanup)\n    await dbClient.rollback();\n    console.log('Transaction test completed successfully');\n}\ncatch (error) {\n    await dbClient.rollback();\n    throw error;\n}",
                  "err": {},
                  "uuid": "dca82734-6d8e-418b-b30f-f032ffe4980d",
                  "parentUUID": "820a02a5-3227-4877-90e7-56951c1c3185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should measure database query performance",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should measure database query performance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\nconst startTime = Date.now();\nconst result = await dbClient.executeQuery('SELECT COUNT(*) as total FROM information_schema.tables');\n(0, chai_1.expect)(result.executionTime).to.be.a('number');\n(0, chai_1.expect)(result.executionTime).to.be.lessThan(5000); // Less than 5 seconds\nconsole.log(`Database query executed in ${result.executionTime}ms`);",
                  "err": {
                    "message": "AssertionError: expected undefined to be a number",
                    "estack": "AssertionError: expected undefined to be a number\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:160:42)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "d658e54c-8eff-409d-8c24-f590d461221e",
                  "parentUUID": "820a02a5-3227-4877-90e7-56951c1c3185",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "451b6ee6-7339-4e14-8a5a-0ea7ef03b1d8",
                "dca82734-6d8e-418b-b30f-f032ffe4980d"
              ],
              "failures": [
                "098b6edf-9c00-4c4f-91f7-6f823664a2c2",
                "d658e54c-8eff-409d-8c24-f590d461221e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1142,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "43a03d31-8e76-40c2-827f-851ce3e10db1",
              "title": "MongoDB Integration",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"MongoDB Integration\"",
                  "fullTitle": "Database Integration Testing MongoDB Integration \"before each\" hook in \"MongoDB Integration\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    index_1.restified.getDatabaseClient('mongodb');\n}\ncatch {\n    this.skip();\n}",
                  "err": {},
                  "uuid": "871fa006-eb7a-48c2-9b5b-41c184e8badf",
                  "parentUUID": "43a03d31-8e76-40c2-827f-851ce3e10db1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate document creation and retrieval",
                  "fullTitle": "Database Integration Testing MongoDB Integration should validate document creation and retrieval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\n// Insert document\nconst insertOperation = JSON.stringify({\n    collection: 'users',\n    method: 'insertOne',\n    document: {\n        name: 'MongoDB Test User',\n        email: 'mongotest@example.com',\n        createdAt: new Date(),\n        metadata: {\n            source: 'restifiedts-test',\n            version: '1.0.0'\n        }\n    }\n});\nconst insertResult = await dbClient.executeQuery(insertOperation);\n(0, chai_1.expect)(insertResult.insertId).to.exist;\nconst documentId = insertResult.insertId;\nindex_1.restified.setGlobalVariable('mongoDocumentId', documentId.toString());\n// Retrieve document\nconst findOperation = JSON.stringify({\n    collection: 'users',\n    method: 'findOne',\n    query: { _id: documentId }\n});\nconst findResult = await dbClient.executeQuery(findOperation);\n(0, chai_1.expect)(findResult.rows).to.have.length(1);\n(0, chai_1.expect)(findResult.rows[0].name).to.equal('MongoDB Test User');\n(0, chai_1.expect)(findResult.rows[0].metadata.source).to.equal('restifiedts-test');",
                  "err": {
                    "message": "AssertionError: expected undefined to exist",
                    "estack": "AssertionError: expected undefined to exist\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:195:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "ae9cb32c-4c0e-4ca2-a688-d7842604b31d",
                  "parentUUID": "43a03d31-8e76-40c2-827f-851ce3e10db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate document updates",
                  "fullTitle": "Database Integration Testing MongoDB Integration should validate document updates",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\nconst documentId = index_1.restified.getVariable('mongoDocumentId');\nif (!documentId) {\n    this.skip();\n}\n// Update document\nconst updateOperation = JSON.stringify({\n    collection: 'users',\n    method: 'updateOne',\n    query: { _id: { $oid: documentId } },\n    document: {\n        $set: {\n            name: 'Updated MongoDB User',\n            updatedAt: new Date()\n        }\n    }\n});\nconst updateResult = await dbClient.executeQuery(updateOperation);\n(0, chai_1.expect)(updateResult.affectedRows).to.equal(1);\n// Verify update\nconst findOperation = JSON.stringify({\n    collection: 'users',\n    method: 'findOne',\n    query: { _id: { $oid: documentId } }\n});\nconst findResult = await dbClient.executeQuery(findOperation);\n(0, chai_1.expect)(findResult.rows[0].name).to.equal('Updated MongoDB User');\n(0, chai_1.expect)(findResult.rows[0].updatedAt).to.exist;",
                  "err": {},
                  "uuid": "b542969e-926a-4901-b848-c7a2566418b9",
                  "parentUUID": "43a03d31-8e76-40c2-827f-851ce3e10db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle aggregation queries",
                  "fullTitle": "Database Integration Testing MongoDB Integration should handle aggregation queries",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\nconst aggregationOperation = JSON.stringify({\n    collection: 'users',\n    method: 'aggregate',\n    query: [\n        { $match: { name: { $regex: 'MongoDB', $options: 'i' } } },\n        { $group: { _id: '$metadata.source', count: { $sum: 1 } } },\n        { $sort: { count: -1 } }\n    ]\n});\nconst result = await dbClient.executeQuery(aggregationOperation);\n(0, chai_1.expect)(result.rows).to.be.an('array');\n(0, chai_1.expect)(result.executionTime).to.be.a('number');\nconsole.log(`Aggregation completed in ${result.executionTime}ms`);",
                  "err": {
                    "message": "AssertionError: expected undefined to be an array",
                    "estack": "AssertionError: expected undefined to be an array\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:263:33)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "706f312f-56d9-4b1a-a514-a7d29fbc8fb0",
                  "parentUUID": "43a03d31-8e76-40c2-827f-851ce3e10db1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ae9cb32c-4c0e-4ca2-a688-d7842604b31d",
                "706f312f-56d9-4b1a-a514-a7d29fbc8fb0"
              ],
              "pending": [
                "b542969e-926a-4901-b848-c7a2566418b9"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "fcce426e-56ea-4cb9-81af-2f5dfb7ebc4a",
              "title": "Cross-Database Validation",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate data consistency across multiple databases",
                  "fullTitle": "Database Integration Testing Cross-Database Validation should validate data consistency across multiple databases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This would test scenarios where data must be consistent across different databases\n// For example, user data in PostgreSQL and session data in MongoDB\nconst validations = [\n    {\n        client: 'postgres',\n        table: 'users',\n        conditions: { active: true },\n        expectedCount: 3\n    }\n];\n// Add MongoDB validation if available\ntry {\n    index_1.restified.getDatabaseClient('mongodb');\n    validations.push({\n        client: 'mongodb',\n        table: 'sessions', // collection\n        conditions: { active: true },\n        expectedCount: 3\n    });\n}\ncatch {\n    // MongoDB not available, skip\n}\nif (validations.length > 1) {\n    const result = await index_1.restified.validateDatabaseState(validations);\n    (0, chai_1.expect)(result.success).to.be.a('boolean');\n    (0, chai_1.expect)(result.results).to.have.length(validations.length);\n}",
                  "err": {},
                  "uuid": "f25ae034-72e8-4d55-843e-36422e76122c",
                  "parentUUID": "fcce426e-56ea-4cb9-81af-2f5dfb7ebc4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f25ae034-72e8-4d55-843e-36422e76122c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "26900b95-2f9a-4272-84c1-8c286605adb8",
              "title": "Database Health Checks",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should perform health checks on all database connections",
                  "fullTitle": "Database Integration Testing Database Health Checks should perform health checks on all database connections",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const connections = ['postgres', 'mongodb'];\nfor (const connectionName of connections) {\n    try {\n        const dbClient = index_1.restified.getDatabaseClient(connectionName);\n        const health = await dbClient.healthCheck();\n        (0, chai_1.expect)(health.healthy).to.be.a('boolean');\n        (0, chai_1.expect)(health.latency).to.be.a('number');\n        if (health.healthy) {\n            (0, chai_1.expect)(health.latency).to.be.greaterThan(0);\n            console.log(`${connectionName} health check: ${health.latency}ms`);\n        }\n        else {\n            console.log(`${connectionName} health check failed: ${health.error}`);\n        }\n    }\n    catch (error) {\n        console.log(`${connectionName} connection not available`);\n    }\n}",
                  "err": {},
                  "uuid": "a767ec21-7e5d-4402-9bf9-0be14ecc9a32",
                  "parentUUID": "26900b95-2f9a-4272-84c1-8c286605adb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a767ec21-7e5d-4402-9bf9-0be14ecc9a32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "35cb7e1e-d613-4af5-b159-4085096c3e98",
              "title": "Test Data Management",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should seed and cleanup test data",
                  "fullTitle": "Database Integration Testing Test Data Management should seed and cleanup test data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    const dbClient = index_1.restified.getDatabaseClient('postgres');\n    // Seed test data\n    const testData = [\n        { name: 'Test User 1', email: 'test1@example.com', active: true },\n        { name: 'Test User 2', email: 'test2@example.com', active: true },\n        { name: 'Test User 3', email: 'test3@example.com', active: false }\n    ];\n    await dbClient.seedTestData('test_users', testData);\n    // Validate data was seeded\n    const count = await dbClient.validateCount('test_users', 3, { active: true });\n    (0, chai_1.expect)(count).to.be.true;\n    // Cleanup test data\n    await dbClient.cleanupTestData('test_users', { email: { $like: '%@example.com' } });\n    console.log('Test data seeding and cleanup completed');\n}\ncatch (error) {\n    console.log('Test data management skipped - table not available');\n}",
                  "err": {},
                  "uuid": "6aaed472-0042-4d7d-8e91-1554fb046c3c",
                  "parentUUID": "35cb7e1e-d613-4af5-b159-4085096c3e98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6aaed472-0042-4d7d-8e91-1554fb046c3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
          "title": "Error Handling and Resilience Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\error-handling.ts",
          "file": "\\examples\\advanced\\error-handling.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Error Handling and Resilience Example\"",
              "fullTitle": "Error Handling and Resilience Example \"after all\" hook in \"Error Handling and Resilience Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "600b163a-8b8c-4945-a28f-a03ff13ace9e",
              "parentUUID": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should handle 404 errors gracefully",
              "fullTitle": "Error Handling and Resilience Example should handle 404 errors gracefully",
              "timedOut": false,
              "duration": 1179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/posts/9999')\n    .execute();\nawait response\n    .statusCode(404)\n    .execute();",
              "err": {},
              "uuid": "6f45d91e-7806-480f-a181-eb51a3c6ff31",
              "parentUUID": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle network timeouts with retry",
              "fullTitle": "Error Handling and Resilience Example should handle network timeouts with retry",
              "timedOut": false,
              "duration": 5163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Configure client with short timeout for demonstration\nsrc_1.restified.createClient('timeout-test', {\n    baseURL: 'https://httpbin.org',\n    timeout: 1000 // Very short timeout\n});\ntry {\n    const response = await src_1.restified\n        .given()\n        .useClient('timeout-test')\n        .when()\n        .get('/delay/2') // This will likely timeout and retry\n        .execute();\n    await response\n        .statusCode(200)\n        .execute();\n}\ncatch (error) {\n    // Expected to fail due to timeout, but should show retry attempts\n    console.log('Request failed after retries as expected');\n}",
              "err": {},
              "uuid": "8ac4addd-ae8c-45e6-9f99-31e393557d6c",
              "parentUUID": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate error response structure",
              "fullTitle": "Error Handling and Resilience Example should validate error response structure",
              "timedOut": false,
              "duration": 2974,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .when()\n    .get('/status/500')\n    .execute();\nawait response\n    .statusCode(500)\n    .execute();",
              "err": {},
              "uuid": "d0c26bec-ad3a-46e6-91df-2a0f33347fc6",
              "parentUUID": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle malformed JSON responses",
              "fullTitle": "Error Handling and Resilience Example should handle malformed JSON responses",
              "timedOut": false,
              "duration": 1843,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test against an endpoint that returns plain text instead of JSON\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .when()\n    .get('/html')\n    .execute();\nawait response\n    .statusCode(200)\n    .header('content-type')\n    .custom((response) => {\n    return response.headers['content-type'].includes('text/html');\n}, 'Response should be HTML')\n    .execute();",
              "err": {},
              "uuid": "70873b68-a03e-4fbe-9639-a837a1f28795",
              "parentUUID": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test API rate limiting behavior",
              "fullTitle": "Error Handling and Resilience Example should test API rate limiting behavior",
              "timedOut": false,
              "duration": 637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Make multiple rapid requests to test rate limiting\n// Note: This is just for demonstration - real rate limiting would need appropriate endpoint\nconst requests = [];\nfor (let i = 0; i < 3; i++) {\n    const request = src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/posts/1')\n        .execute();\n    requests.push(request);\n}\nconst responses = await Promise.all(requests);\n// Verify all requests succeeded (JSONPlaceholder doesn't have rate limiting)\nfor (const response of responses) {\n    await response\n        .statusCode(200)\n        .execute();\n}",
              "err": {},
              "uuid": "6232f0c6-6b1e-4e87-a35d-77bf94e44e5e",
              "parentUUID": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle authentication errors",
              "fullTitle": "Error Handling and Resilience Example should handle authentication errors",
              "timedOut": false,
              "duration": 2176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .bearerToken('invalid-token')\n    .when()\n    .get('/bearer')\n    .execute();\n// httpbin.org /bearer endpoint doesn't actually validate tokens\n// So this will pass, but in real scenarios you'd test for 401\nawait response\n    .statusCode(200)\n    .execute();",
              "err": {},
              "uuid": "136f37d6-59e9-42f9-800c-c8731e730097",
              "parentUUID": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test request payload validation errors",
              "fullTitle": "Error Handling and Resilience Example should test request payload validation errors",
              "timedOut": false,
              "duration": 716,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .contentType('application/json')\n    .when()\n    .post('/posts', {\n    // Missing required fields to simulate validation error\n    invalidField: 'test'\n})\n    .execute();\n// JSONPlaceholder is lenient, but real APIs would return validation errors\nawait response\n    .statusCode(201) // JSONPlaceholder always returns 201 for POST\n    .execute();",
              "err": {},
              "uuid": "0b7fe29a-e3e2-4b46-add9-2e774a2a7095",
              "parentUUID": "1c023e6e-59cf-43fd-b93b-94fd416632c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f45d91e-7806-480f-a181-eb51a3c6ff31",
            "8ac4addd-ae8c-45e6-9f99-31e393557d6c",
            "d0c26bec-ad3a-46e6-91df-2a0f33347fc6",
            "70873b68-a03e-4fbe-9639-a837a1f28795",
            "6232f0c6-6b1e-4e87-a35d-77bf94e44e5e",
            "136f37d6-59e9-42f9-800c-c8731e730097",
            "0b7fe29a-e3e2-4b46-add9-2e774a2a7095"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14688,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "13199c61-74a2-48f5-869f-abb757699593",
          "title": "GraphQL API Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
          "file": "\\examples\\advanced\\graphql-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL API Testing\"",
              "fullTitle": "GraphQL API Testing \"before all\" hook in \"GraphQL API Testing\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create GraphQL client\nindex_1.restified.createGraphQLClient('github', {\n    endpoint: 'https://api.github.com/graphql',\n    headers: {\n        'Authorization': 'Bearer {{$env.GITHUB_TOKEN}}',\n        'User-Agent': 'RestifiedTS-GraphQL-Test'\n    },\n    timeout: 15000\n});\n// Set test variables\nindex_1.restified.setGlobalVariable('owner', 'facebook');\nindex_1.restified.setGlobalVariable('repo', 'react');",
              "err": {},
              "uuid": "ea5fe1aa-b8c5-4319-89e3-f465e656f829",
              "parentUUID": "13199c61-74a2-48f5-869f-abb757699593",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GraphQL API Testing\"",
              "fullTitle": "GraphQL API Testing \"after all\" hook in \"GraphQL API Testing\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "a0b2d78a-7ab9-4feb-ac70-10830044f11a",
              "parentUUID": "13199c61-74a2-48f5-869f-abb757699593",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1fe6588a-3e7c-4ed2-a5d1-3b57788ecb60",
              "title": "GraphQL Queries",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should execute basic repository query",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should execute basic repository query",
                  "timedOut": false,
                  "duration": 3032,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst query = `\n        query GetRepository($owner: String!, $name: String!) {\n          repository(owner: $owner, name: $name) {\nname\ndescription\nstargazerCount\nforkCount\nlanguage {\n  name\n}\nowner {\n  login\n}\n          }\n        }\n      `;\nconst response = await client.query(query, {\n    owner: '{{owner}}',\n    name: '{{repo}}'\n});\n// Validate GraphQL response structure\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data).to.exist;\n(0, chai_1.expect)(response.data.errors).to.not.exist;\nconst repository = response.data.data.repository;\n(0, chai_1.expect)(repository.name).to.equal('react');\n(0, chai_1.expect)(repository.owner.login).to.equal('facebook');\n(0, chai_1.expect)(repository.stargazerCount).to.be.a('number');\n(0, chai_1.expect)(repository.stargazerCount).to.be.greaterThan(100000);\n// Extract repository data\nindex_1.restified.setGlobalVariable('repoStars', repository.stargazerCount);\nindex_1.restified.setGlobalVariable('repoDescription', repository.description);",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:54:24)",
                    "diff": null
                  },
                  "uuid": "bd8bf28b-1dbd-45a3-b292-2963960f949a",
                  "parentUUID": "1fe6588a-3e7c-4ed2-a5d1-3b57788ecb60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle GraphQL variables and fragments",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should handle GraphQL variables and fragments",
                  "timedOut": false,
                  "duration": 2844,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst query = `\n        fragment RepositoryInfo on Repository {\n          name\n          description\n          stargazerCount\n          issues(states: OPEN) {\ntotalCount\n          }\n          pullRequests(states: OPEN) {\ntotalCount\n          }\n        }\n\n        query GetRepositoryDetails($owner: String!, $name: String!) {\n          repository(owner: $owner, name: $name) {\n...RepositoryInfo\nlanguages(first: 5) {\n  edges {\n    node {\n      name\n    }\n    size\n  }\n}\n          }\n        }\n      `;\nconst response = await client.query(query, {\n    owner: '{{owner}}',\n    name: '{{repo}}'\n});\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data.repository.languages.edges).to.be.an('array');\n(0, chai_1.expect)(response.data.data.repository.issues.totalCount).to.be.a('number');\n(0, chai_1.expect)(response.data.data.repository.pullRequests.totalCount).to.be.a('number');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:106:24)",
                    "diff": null
                  },
                  "uuid": "7ef36980-8d21-4c6f-8c4f-6ae604a6a0a5",
                  "parentUUID": "1fe6588a-3e7c-4ed2-a5d1-3b57788ecb60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate GraphQL errors",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should validate GraphQL errors",
                  "timedOut": false,
                  "duration": 2850,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\n// Invalid query - missing required field\nconst invalidQuery = `\n        query InvalidQuery {\n          repository {\nname\n          }\n        }\n      `;\nconst response = await client.query(invalidQuery);\n(0, chai_1.expect)(response.status).to.equal(200); // GraphQL returns 200 even for errors\n(0, chai_1.expect)(response.data.errors).to.exist;\n(0, chai_1.expect)(response.data.errors).to.be.an('array');\n(0, chai_1.expect)(response.data.errors[0].message).to.include('Field \\'repository\\' of type \\'Repository\\' must have a selection of subfields');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:129:24)",
                    "diff": null
                  },
                  "uuid": "acab4cc4-e225-4e35-a8c9-82a3c2044a9c",
                  "parentUUID": "1fe6588a-3e7c-4ed2-a5d1-3b57788ecb60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bd8bf28b-1dbd-45a3-b292-2963960f949a",
                "7ef36980-8d21-4c6f-8c4f-6ae604a6a0a5",
                "acab4cc4-e225-4e35-a8c9-82a3c2044a9c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8726,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "95f3fc11-886a-4869-aa17-80304e5dd7fc",
              "title": "GraphQL Introspection",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should introspect GraphQL schema",
                  "fullTitle": "GraphQL API Testing GraphQL Introspection should introspect GraphQL schema",
                  "timedOut": false,
                  "duration": 2855,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst response = await client.introspect();\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data.__schema).to.exist;\n(0, chai_1.expect)(response.data.data.__schema.types).to.be.an('array');\n(0, chai_1.expect)(response.data.data.__schema.queryType.name).to.equal('Query');\n// Find Repository type\nconst repositoryType = response.data.data.__schema.types.find((type) => type.name === 'Repository');\n(0, chai_1.expect)(repositoryType).to.exist;\n(0, chai_1.expect)(repositoryType.fields).to.be.an('array');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:142:24)",
                    "diff": null
                  },
                  "uuid": "e185995e-d07e-4724-a166-70fd3093bb97",
                  "parentUUID": "95f3fc11-886a-4869-aa17-80304e5dd7fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e185995e-d07e-4724-a166-70fd3093bb97"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2855,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "53dc26da-f018-4fd5-8167-639dc2bcb48b",
              "title": "GraphQL Query Validation",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate query syntax",
                  "fullTitle": "GraphQL API Testing GraphQL Query Validation should validate query syntax",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst validQuery = `\n        query ValidQuery($owner: String!) {\n          repository(owner: $owner, name: \"react\") {\nname\n          }\n        }\n      `;\nconst validation = client.validateQuery(validQuery);\n(0, chai_1.expect)(validation.valid).to.be.true;\n(0, chai_1.expect)(validation.errors).to.be.empty;",
                  "err": {},
                  "uuid": "630820ac-ff64-4002-91ff-027a5baf1ccd",
                  "parentUUID": "53dc26da-f018-4fd5-8167-639dc2bcb48b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invalid query syntax",
                  "fullTitle": "GraphQL API Testing GraphQL Query Validation should detect invalid query syntax",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst invalidQuery = `\n        query InvalidQuery {\n          repository(owner: $owner, name: \"react\" {\nname\n          }\n        }\n      `;\nconst validation = client.validateQuery(invalidQuery);\n(0, chai_1.expect)(validation.valid).to.be.false;\n(0, chai_1.expect)(validation.errors).to.not.be.empty;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (examples\\advanced\\graphql-testing.ts:187:37)\n    at processImmediate (node:internal/timers:485:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "ecc37796-94c0-46d1-887b-9ded39a1b255",
                  "parentUUID": "53dc26da-f018-4fd5-8167-639dc2bcb48b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "630820ac-ff64-4002-91ff-027a5baf1ccd"
              ],
              "failures": [
                "ecc37796-94c0-46d1-887b-9ded39a1b255"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "30c3424f-f726-4292-a3c5-00fcd664fab9",
              "title": "Performance Testing",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure GraphQL query performance",
                  "fullTitle": "GraphQL API Testing Performance Testing should measure GraphQL query performance",
                  "timedOut": false,
                  "duration": 2856,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst startTime = Date.now();\nconst query = `\n        query QuickQuery {\n          viewer {\nlogin\n          }\n        }\n      `;\nconst response = await client.query(query);\nconst endTime = Date.now();\nconst duration = endTime - startTime;\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(duration).to.be.lessThan(5000); // Should complete within 5 seconds\nconsole.log(`GraphQL query completed in ${duration}ms`);",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:206:24)",
                    "diff": null
                  },
                  "uuid": "d38b3869-42fc-4dcf-8237-14ab7faf5237",
                  "parentUUID": "30c3424f-f726-4292-a3c5-00fcd664fab9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d38b3869-42fc-4dcf-8237-14ab7faf5237"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2856,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d1f32183-8653-4db4-acf5-c508f1e09fda",
          "title": "JSON Fixture Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
          "file": "\\examples\\advanced\\json-fixture-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"JSON Fixture Testing\"",
              "fullTitle": "JSON Fixture Testing \"before all\" hook in \"JSON Fixture Testing\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup test fixtures directory\nconst fixturesDir = path.join(__dirname, 'fixtures');\nif (!fs.existsSync(fixturesDir)) {\n    fs.mkdirSync(fixturesDir, { recursive: true });\n}\n// Create sample fixture files\nconst userFixture = {\n    id: \"{{userId}}\",\n    name: \"{{$faker.person.fullName}}\",\n    email: \"{{$faker.internet.email}}\",\n    age: \"{{$random.number(18,65)}}\",\n    address: {\n        street: \"{{$faker.address.streetAddress}}\",\n        city: \"{{$faker.address.city}}\",\n        country: \"{{country}}\",\n        coordinates: {\n            lat: \"{{$faker.address.latitude}}\",\n            lng: \"{{$faker.address.longitude}}\"\n        }\n    },\n    preferences: {\n        theme: \"{{userTheme}}\",\n        notifications: true,\n        language: \"{{$env.DEFAULT_LANGUAGE}}\",\n        metadata: {\n            createdAt: \"{{$date.now}}\",\n            version: \"{{$util.guid}}\",\n            source: \"restifiedts-test\"\n        }\n    },\n    tags: [\"{{tag1}}\", \"{{tag2}}\", \"premium\"]\n};\nconst orderFixture = {\n    orderId: \"{{$random.uuid}}\",\n    customerId: \"{{userId}}\",\n    items: [\n        {\n            productId: \"{{productId1}}\",\n            name: \"{{$faker.commerce.product}}\",\n            price: \"{{$random.number(10,1000)}}\",\n            quantity: \"{{quantity1}}\"\n        },\n        {\n            productId: \"{{productId2}}\",\n            name: \"{{$faker.commerce.product}}\",\n            price: \"{{$random.number(10,1000)}}\",\n            quantity: \"{{quantity2}}\"\n        }\n    ],\n    shipping: {\n        address: \"{{shippingAddress}}\",\n        method: \"{{shippingMethod}}\",\n        trackingId: \"{{$util.base64encode(track-{{$random.uuid}})}}\"\n    },\n    payment: {\n        method: \"credit_card\",\n        cardLast4: \"{{$random.number(1000,9999)}}\",\n        amount: \"{{totalAmount}}\",\n        currency: \"{{$env.DEFAULT_CURRENCY}}\",\n        transactionId: \"{{$util.guid}}\"\n    },\n    timestamps: {\n        created: \"{{$date.now}}\",\n        updated: \"{{$date.now}}\",\n        estimatedDelivery: \"{{deliveryDate}}\"\n    }\n};\n// Write fixtures to files\nfs.writeFileSync(path.join(fixturesDir, 'user.json'), JSON.stringify(userFixture, null, 2));\nfs.writeFileSync(path.join(fixturesDir, 'order.json'), JSON.stringify(orderFixture, null, 2));\n// Set up global variables\nindex_1.restified.setGlobalVariables({\n    userId: 'user-12345',\n    country: 'United States',\n    userTheme: 'dark',\n    tag1: 'vip',\n    tag2: 'beta-tester'\n});\n// Set up environment variables for testing\nprocess.env.DEFAULT_LANGUAGE = 'en-US';\nprocess.env.DEFAULT_CURRENCY = 'USD';",
              "err": {},
              "uuid": "0a1a096f-adf1-4e50-b4c0-84892cf4d9ea",
              "parentUUID": "d1f32183-8653-4db4-acf5-c508f1e09fda",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"JSON Fixture Testing\"",
              "fullTitle": "JSON Fixture Testing \"after all\" hook in \"JSON Fixture Testing\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();\n// Cleanup fixtures\nconst fixturesDir = path.join(__dirname, 'fixtures');\nif (fs.existsSync(fixturesDir)) {\n    fs.rmSync(fixturesDir, { recursive: true, force: true });\n}",
              "err": {},
              "uuid": "d46ecf9f-c15a-4ed2-bb98-4fe31ee33a91",
              "parentUUID": "d1f32183-8653-4db4-acf5-c508f1e09fda",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "4eaa96bf-3dbc-47f1-9206-6d47ff4856e1",
              "title": "Basic JSON Variable Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve simple variables in JSON objects",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve simple variables in JSON objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    userId: '{{userId}}',\n    name: '{{userName}}',\n    active: true,\n    count: 42\n};\nindex_1.restified.setLocalVariable('userName', 'John Doe');\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.userId).to.equal('user-12345');\n(0, chai_1.expect)(resolved.name).to.equal('John Doe');\n(0, chai_1.expect)(resolved.active).to.be.true;\n(0, chai_1.expect)(resolved.count).to.equal(42);",
                  "err": {},
                  "uuid": "d54cd600-48fd-49ce-b79d-616eb92c1507",
                  "parentUUID": "4eaa96bf-3dbc-47f1-9206-6d47ff4856e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve nested variables in complex objects",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve nested variables in complex objects",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    user: {\n        profile: {\n            id: '{{userId}}',\n            settings: {\n                theme: '{{userTheme}}',\n                lang: '{{$env.DEFAULT_LANGUAGE}}'\n            }\n        }\n    },\n    metadata: {\n        timestamp: '{{$date.timestamp}}',\n        uuid: '{{$random.uuid}}'\n    }\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.user.profile.id).to.equal('user-12345');\n(0, chai_1.expect)(resolved.user.profile.settings.theme).to.equal('dark');\n(0, chai_1.expect)(resolved.user.profile.settings.lang).to.equal('en-US');\n(0, chai_1.expect)(resolved.metadata.timestamp).to.be.a('string');\n(0, chai_1.expect)(resolved.metadata.uuid).to.match(/^[0-9a-f-]+$/);",
                  "err": {},
                  "uuid": "e9244104-a367-4211-9baf-05e2740c6150",
                  "parentUUID": "4eaa96bf-3dbc-47f1-9206-6d47ff4856e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve variables in arrays",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve variables in arrays",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    users: ['{{userId}}', '{{$random.uuid}}'],\n    tags: ['{{tag1}}', '{{tag2}}', 'static-tag'],\n    coordinates: ['{{$faker.address.latitude}}', '{{$faker.address.longitude}}']\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.users[0]).to.equal('user-12345');\n(0, chai_1.expect)(resolved.users[1]).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(resolved.tags).to.deep.equal(['vip', 'beta-tester', 'static-tag']);\n(0, chai_1.expect)(resolved.coordinates).to.have.length(2);",
                  "err": {},
                  "uuid": "67014ce0-6964-4aa4-b089-1c2b4d4b94e4",
                  "parentUUID": "4eaa96bf-3dbc-47f1-9206-6d47ff4856e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d54cd600-48fd-49ce-b79d-616eb92c1507",
                "e9244104-a367-4211-9baf-05e2740c6150",
                "67014ce0-6964-4aa4-b089-1c2b4d4b94e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1057,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "0e7eb8d7-8374-49b1-9c83-7bcf6bf587f8",
              "title": "Built-in Function Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve faker functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve faker functions",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    name: '{{$faker.person.fullName}}',\n    email: '{{$faker.internet.email}}',\n    product: '{{$faker.commerce.product}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.name).to.be.a('string');\n(0, chai_1.expect)(resolved.email).to.include('@');\n(0, chai_1.expect)(resolved.product).to.be.a('string');",
                  "err": {},
                  "uuid": "044a9c1f-01fc-4161-a487-2370f9001938",
                  "parentUUID": "0e7eb8d7-8374-49b1-9c83-7bcf6bf587f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve random utility functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve random utility functions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    uuid: '{{$random.uuid}}',\n    number: '{{$random.number}}',\n    rangeNumber: '{{$random.number(1,10)}}',\n    string: '{{$random.string}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.uuid).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(parseInt(resolved.number)).to.be.a('number');\n(0, chai_1.expect)(parseInt(resolved.rangeNumber)).to.be.within(1, 10);\n(0, chai_1.expect)(resolved.string).to.be.a('string');",
                  "err": {},
                  "uuid": "7241977f-7f85-450e-841c-d331a41fb7b2",
                  "parentUUID": "0e7eb8d7-8374-49b1-9c83-7bcf6bf587f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve date and utility functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve date and utility functions",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    now: '{{$date.now}}',\n    timestamp: '{{$date.timestamp}}',\n    today: '{{$date.today}}',\n    guid: '{{$util.guid}}',\n    encoded: '{{$util.base64encode(test-data)}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(new Date(resolved.now)).to.be.a('date');\n(0, chai_1.expect)(parseInt(resolved.timestamp)).to.be.a('number');\n(0, chai_1.expect)(resolved.today).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\n(0, chai_1.expect)(resolved.guid).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(resolved.encoded).to.be.a('string');",
                  "err": {},
                  "uuid": "1093e970-f2a1-415e-a08e-25cadbbfeace",
                  "parentUUID": "0e7eb8d7-8374-49b1-9c83-7bcf6bf587f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "044a9c1f-01fc-4161-a487-2370f9001938",
                "7241977f-7f85-450e-841c-d331a41fb7b2",
                "1093e970-f2a1-415e-a08e-25cadbbfeace"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b011a84a-5d3f-41cf-8a6a-0ee388733da7",
              "title": "JSON Fixture Loading",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load and resolve user fixture",
                  "fullTitle": "JSON Fixture Testing JSON Fixture Loading should load and resolve user fixture",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fixturePath = path.join(__dirname, 'fixtures', 'user.json');\nconst userData = index_1.restified.loadJsonFixture(fixturePath);\n(0, chai_1.expect)(userData.id).to.equal('user-12345');\n(0, chai_1.expect)(userData.name).to.be.a('string');\n(0, chai_1.expect)(userData.email).to.include('@');\n(0, chai_1.expect)(parseInt(userData.age)).to.be.within(18, 65);\n(0, chai_1.expect)(userData.address.country).to.equal('United States');\n(0, chai_1.expect)(userData.preferences.theme).to.equal('dark');\n(0, chai_1.expect)(userData.preferences.language).to.equal('en-US');\n(0, chai_1.expect)(userData.tags).to.deep.equal(['vip', 'beta-tester', 'premium']);",
                  "err": {},
                  "uuid": "a407d3d5-2266-490b-847b-88e4904f98b7",
                  "parentUUID": "b011a84a-5d3f-41cf-8a6a-0ee388733da7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load and resolve order fixture with cross-references",
                  "fullTitle": "JSON Fixture Testing JSON Fixture Loading should load and resolve order fixture with cross-references",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Set local variables for order\nindex_1.restified.setLocalVariables({\n    productId1: 'prod-001',\n    productId2: 'prod-002',\n    quantity1: '2',\n    quantity2: '1',\n    shippingAddress: '123 Main St, City, State',\n    shippingMethod: 'express',\n    totalAmount: '149.99',\n    deliveryDate: '2024-01-15'\n});\nconst fixturePath = path.join(__dirname, 'fixtures', 'order.json');\nconst orderData = index_1.restified.loadJsonFixture(fixturePath);\n(0, chai_1.expect)(orderData.customerId).to.equal('user-12345'); // From global variable\n(0, chai_1.expect)(orderData.orderId).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(orderData.items).to.have.length(2);\n(0, chai_1.expect)(orderData.items[0].productId).to.equal('prod-001');\n(0, chai_1.expect)(orderData.items[0].quantity).to.equal('2');\n(0, chai_1.expect)(orderData.shipping.address).to.equal('123 Main St, City, State');\n(0, chai_1.expect)(orderData.payment.currency).to.equal('USD');\n(0, chai_1.expect)(orderData.payment.amount).to.equal('149.99');",
                  "err": {},
                  "uuid": "72c388b8-f07a-4d64-a4ac-eb92e5729865",
                  "parentUUID": "b011a84a-5d3f-41cf-8a6a-0ee388733da7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a407d3d5-2266-490b-847b-88e4904f98b7",
                "72c388b8-f07a-4d64-a4ac-eb92e5729865"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "e41fc1c9-fb3e-4e7d-accf-dd2e5bd89613",
              "title": "JSON String Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve variables in JSON strings",
                  "fullTitle": "JSON Fixture Testing JSON String Resolution should resolve variables in JSON strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonString = `{\n        \"userId\": \"{{userId}}\",\n        \"profile\": {\n          \"name\": \"{{$faker.person.fullName}}\",\n          \"settings\": {\n\"theme\": \"{{userTheme}}\",\n\"notifications\": true\n          }\n        },\n        \"timestamp\": \"{{$date.now}}\"\n      }`;\nconst resolved = index_1.restified.resolveJsonString(jsonString);\n(0, chai_1.expect)(resolved.userId).to.equal('user-12345');\n(0, chai_1.expect)(resolved.profile.name).to.be.a('string');\n(0, chai_1.expect)(resolved.profile.settings.theme).to.equal('dark');\n(0, chai_1.expect)(resolved.profile.settings.notifications).to.be.true;\n(0, chai_1.expect)(new Date(resolved.timestamp)).to.be.a('date');",
                  "err": {},
                  "uuid": "cac32826-d0a1-4ba6-a5d1-fe41bc38bb0f",
                  "parentUUID": "e41fc1c9-fb3e-4e7d-accf-dd2e5bd89613",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cac32826-d0a1-4ba6-a5d1-fe41bc38bb0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b83e0c31-0ffd-4223-9eda-97bd893bff16",
              "title": "API Testing with Dynamic Fixtures",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should use resolved fixtures in API requests",
                  "fullTitle": "JSON Fixture Testing API Testing with Dynamic Fixtures should use resolved fixtures in API requests",
                  "timedOut": false,
                  "duration": 839,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create dynamic user data\nconst userTemplate = {\n    name: '{{$faker.person.fullName}}',\n    email: '{{$faker.internet.email}}',\n    age: '{{$random.number(18,65)}}',\n    preferences: {\n        theme: '{{userTheme}}',\n        language: '{{$env.DEFAULT_LANGUAGE}}'\n    }\n};\nconst userData = index_1.restified.resolveVariables(userTemplate);\n// Use in API request\nconst response = await index_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .post('/users', userData)\n    .execute();\nawait response\n    .statusCode(201)\n    .execute();\n// Extract and validate\n(0, chai_1.expect)(userData.name).to.be.a('string');\n(0, chai_1.expect)(userData.email).to.include('@');\n(0, chai_1.expect)(userData.preferences.theme).to.equal('dark');\n(0, chai_1.expect)(userData.preferences.language).to.equal('en-US');",
                  "err": {},
                  "uuid": "a32bda90-c974-4bc2-89db-d5126f020474",
                  "parentUUID": "b83e0c31-0ffd-4223-9eda-97bd893bff16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle complex nested fixture scenarios",
                  "fullTitle": "JSON Fixture Testing API Testing with Dynamic Fixtures should handle complex nested fixture scenarios",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Multi-level variable resolution\nindex_1.restified.setLocalVariable('baseUrl', 'https://api.example.com');\nindex_1.restified.setLocalVariable('version', 'v2');\nconst apiConfig = {\n    endpoints: {\n        users: '{{baseUrl}}/{{version}}/users',\n        orders: '{{baseUrl}}/{{version}}/orders/{{userId}}'\n    },\n    headers: {\n        'Authorization': 'Bearer {{authToken}}',\n        'User-Agent': 'RestifiedTS/{{$util.guid}}',\n        'X-Request-ID': '{{$random.uuid}}'\n    },\n    timeout: '{{requestTimeout}}'\n};\nindex_1.restified.setLocalVariables({\n    authToken: 'jwt-token-12345',\n    requestTimeout: '30000'\n});\nconst resolved = index_1.restified.resolveVariables(apiConfig);\n(0, chai_1.expect)(resolved.endpoints.users).to.equal('https://api.example.com/v2/users');\n(0, chai_1.expect)(resolved.endpoints.orders).to.equal('https://api.example.com/v2/orders/user-12345');\n(0, chai_1.expect)(resolved.headers.Authorization).to.equal('Bearer jwt-token-12345');\n(0, chai_1.expect)(resolved.headers['User-Agent']).to.include('RestifiedTS/');\n(0, chai_1.expect)(resolved.timeout).to.equal('30000');",
                  "err": {},
                  "uuid": "f2bddfb8-fefa-49f9-8c22-51122cb4b0c3",
                  "parentUUID": "b83e0c31-0ffd-4223-9eda-97bd893bff16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a32bda90-c974-4bc2-89db-d5126f020474",
                "f2bddfb8-fefa-49f9-8c22-51122cb4b0c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 839,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c9856854-d858-486d-ab17-a1bbd8212666",
          "title": "Multi-Client Integration Tests",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\multi-client.ts",
          "file": "\\examples\\advanced\\multi-client.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should use pre-configured API client with global authentication",
              "fullTitle": "Multi-Client Integration Tests should use pre-configured API client with global authentication",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'API Client Test');\n// Use the pre-configured API client (no setup needed!)\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .header('Authorization', `Bearer {{globalAuthToken}}`)\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.email', src_1.restified.getVariable('globalUserEmail'))\n    .extract('$.company.name', 'userCompany')\n    .execute();\nconsole.log('üè¢ User company:', src_1.restified.getVariable('userCompany'));",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:26:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:20:26)",
                "diff": null
              },
              "uuid": "42e03608-0a40-4309-9bd2-018c5b75e4af",
              "parentUUID": "c9856854-d858-486d-ab17-a1bbd8212666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use testing utilities client with global config",
              "fullTitle": "Multi-Client Integration Tests should use testing utilities client with global config",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Test Utils Client');\n// Use the pre-configured test utilities client\n// Common headers are already included in the client configuration\nconst validationResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .header('X-Global-Auth-Token', '{{globalAuthToken}}')\n    .when()\n    .get('/headers')\n    .execute();\nawait validationResponse\n    .statusCode(200)\n    .jsonPath('$.headers.X-Test-Suite', src_1.restified.getVariable('testSuite'))\n    .jsonPath('$.headers.X-Environment', src_1.restified.getVariable('testEnvironment'))\n    .custom((response) => {\n    return response.data.headers['X-Global-Auth-Token'] === src_1.restified.getVariable('globalAuthToken');\n}, 'Should have correct global auth token in headers')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:49:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:43:32)",
                "diff": null
              },
              "uuid": "a12f303c-2d1a-4bb3-9483-916521cde1c2",
              "parentUUID": "c9856854-d858-486d-ab17-a1bbd8212666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate cross-service workflow using global data",
              "fullTitle": "Multi-Client Integration Tests should demonstrate cross-service workflow using global data",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!test_utils_1.GlobalTestUtils.shouldRunIntegrationTests()) {\n    console.log('‚è≠Ô∏è  Skipping integration test');\n    return;\n}\ntest_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Cross-Service Workflow');\n// Step 1: Use API service to get additional user data\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/2')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.name', 'workflowUserName')\n    .extract('$.website', 'workflowWebsite')\n    .execute();\n// Step 2: Use extracted data with test utilities service\n// Common headers are already included in the client configuration\nconst workflowResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .when()\n    .post('/post', {\n    message: `User {{workflowUserName}} from {{workflowWebsite}}`,\n    globalUser: '{{globalUserEmail}}',\n    environment: '{{testEnvironment}}',\n    timestamp: new Date().toISOString()\n})\n    .execute();\nawait workflowResponse\n    .statusCode(200)\n    .jsonPath('$.json.globalUser', src_1.restified.getVariable('globalUserEmail'))\n    .jsonPath('$.json.environment', src_1.restified.getVariable('testEnvironment'))\n    .execute();\nconsole.log('‚úÖ Cross-service workflow completed successfully');",
              "err": {},
              "uuid": "24dd1725-5b6e-4935-8000-db1013b7b36a",
              "parentUUID": "c9856854-d858-486d-ab17-a1bbd8212666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle service errors with global error patterns",
              "fullTitle": "Multi-Client Integration Tests should handle service errors with global error patterns",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Error Handling');\n// Test API service 404 error\n// Common headers are already included in the client configuration\nconst apiErrorResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/99999')\n    .execute();\nawait apiErrorResponse\n    .statusCode(404)\n    .execute();\n// Test utilities service 500 error\n// Common headers are already included in the client configuration\nconst utilsErrorResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .when()\n    .get('/status/500')\n    .execute();\nawait utilsErrorResponse\n    .statusCode(500)\n    .execute();\nconsole.log('‚úÖ Error handling validated across all services');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:117:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:112:30)",
                "diff": null
              },
              "uuid": "8fb3ff44-80ea-4858-a525-cc626e88f876",
              "parentUUID": "c9856854-d858-486d-ab17-a1bbd8212666",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment-aware testing",
              "fullTitle": "Multi-Client Integration Tests should demonstrate environment-aware testing",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Environment Testing');\nconst environment = src_1.restified.getVariable('testEnvironment');\nconst apiVersion = src_1.restified.getVariable('apiVersion');\n// Test shows how same test adapts to different environments\nconst environmentResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .header('X-Environment', environment)\n    .header('X-API-Version', apiVersion)\n    .header('X-Global-User', '{{globalUserEmail}}')\n    .when()\n    .get('/posts/1')\n    .execute();\nawait environmentResponse\n    .statusCode(200)\n    .jsonPath('$.id', 1)\n    .custom((response) => {\n    const hasTitle = response.data.hasOwnProperty('title');\n    const hasBody = response.data.hasOwnProperty('body');\n    return hasTitle && hasBody;\n}, 'Response should have expected structure for all environments')\n    .execute();\nconsole.log(`‚úÖ Environment-specific test completed for: ${environment}`);",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:154:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:146:33)",
                "diff": null
              },
              "uuid": "b834d7c5-5d98-47a3-a511-39f9fc5035eb",
              "parentUUID": "c9856854-d858-486d-ab17-a1bbd8212666",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24dd1725-5b6e-4935-8000-db1013b7b36a"
          ],
          "failures": [
            "42e03608-0a40-4309-9bd2-018c5b75e4af",
            "a12f303c-2d1a-4bb3-9483-916521cde1c2",
            "8fb3ff44-80ea-4858-a525-cc626e88f876",
            "b834d7c5-5d98-47a3-a511-39f9fc5035eb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a1bebd10-4be6-4f6c-bc3c-c7d15f7d0790",
          "title": "Response Store Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\response-store.ts",
          "file": "\\examples\\advanced\\response-store.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should store and retrieve responses using global client",
              "fullTitle": "Response Store Example should store and retrieve responses using global client",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Response Store', 'Store and Retrieve');\n// Use pre-configured API client from global setup\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api') // Global client\n    .when()\n    .get('/users/{{globalUserId}}') // Global user ID\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .execute();\n// Store the response with a custom key\nsrc_1.restified.storeResponse('user1-data');\n// Later, retrieve the stored response\nconst storedResponse = src_1.restified.getStoredResponse('user1-data');\n// Verify the stored response exists and has expected data\nif (storedResponse) {\n    console.log('Retrieved stored response for user:', storedResponse.data.name);\n    // You can perform additional assertions on stored responses\n    await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/users/1')\n        .execute()\n        .then(response => response\n        .statusCode(200)\n        .custom((response) => {\n        return response.data.id === storedResponse.data.id;\n    }, 'Current response should match stored response ID')\n        .execute());\n}",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\advanced\\response-store.ts:23:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\advanced\\response-store.ts:18:26)",
                "diff": null
              },
              "uuid": "d699bdfb-cd9d-4974-b90a-2b79ffd7b3d7",
              "parentUUID": "a1bebd10-4be6-4f6c-bc3c-c7d15f7d0790",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle multiple stored responses",
              "fullTitle": "Response Store Example should handle multiple stored responses",
              "timedOut": false,
              "duration": 1912,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Store responses for multiple users\nconst users = [1, 2, 3];\nfor (const userId of users) {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get(`/users/${userId}`)\n        .execute();\n    await response.statusCode(200).execute();\n    // Store each response with a unique key\n    src_1.restified.storeResponse(`user-${userId}`);\n}\n// Retrieve and validate all stored responses\nfor (const userId of users) {\n    const storedResponse = src_1.restified.getStoredResponse(`user-${userId}`);\n    if (storedResponse) {\n        console.log(`User ${userId} stored data:`, {\n            id: storedResponse.data.id,\n            name: storedResponse.data.name,\n            email: storedResponse.data.email\n        });\n        // Validate stored response data\n        if (storedResponse.data.id !== userId) {\n            throw new Error(`Stored response ID mismatch for user ${userId}`);\n        }\n    }\n    else {\n        throw new Error(`No stored response found for user ${userId}`);\n    }\n}",
              "err": {},
              "uuid": "c0c90950-fd27-4d3d-b69e-0bf343c41599",
              "parentUUID": "a1bebd10-4be6-4f6c-bc3c-c7d15f7d0790",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should compare current response with stored response",
              "fullTitle": "Response Store Example should compare current response with stored response",
              "timedOut": false,
              "duration": 1188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First, get and store user data\nconst initialResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait initialResponse.statusCode(200).execute();\nsrc_1.restified.storeResponse('initial-user-data');\n// Later, get the same data again\nconst currentResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait currentResponse.statusCode(200).execute();\n// Compare with stored response\nconst storedResponse = src_1.restified.getStoredResponse('initial-user-data');\nif (storedResponse) {\n    await currentResponse\n        .custom((response) => {\n        return JSON.stringify(response.data) === JSON.stringify(storedResponse.data);\n    }, 'Current response should match stored response')\n        .execute();\n    console.log('‚úÖ Response comparison successful - data is consistent');\n}",
              "err": {},
              "uuid": "784cf161-c6fd-4e38-8872-6db5a2a65eeb",
              "parentUUID": "a1bebd10-4be6-4f6c-bc3c-c7d15f7d0790",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate response store with POST operations",
              "fullTitle": "Response Store Example should demonstrate response store with POST operations",
              "timedOut": false,
              "duration": 831,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create a new post\nconst createResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .contentType('application/json')\n    .when()\n    .post('/posts', {\n    title: 'Test Post for Response Store',\n    body: 'This post is used to demonstrate response store functionality',\n    userId: 1\n})\n    .execute();\nawait createResponse\n    .statusCode(201)\n    .extract('$.id', 'createdPostId')\n    .execute();\n// Store the creation response\nsrc_1.restified.storeResponse('post-creation');\n// Use stored response data in subsequent tests\nconst storedCreation = src_1.restified.getStoredResponse('post-creation');\nif (storedCreation) {\n    console.log('Created post stored with ID:', storedCreation.data.id);\n    console.log('Stored post title:', storedCreation.data.title);\n    // Verify the stored response contains expected data\n    if (!storedCreation.data.title.includes('Test Post')) {\n        throw new Error('Stored response does not contain expected title');\n    }\n    // Use stored response data for validation\n    const postId = storedCreation.data.id;\n    console.log(`Using stored post ID ${postId} for further operations`);\n}",
              "err": {},
              "uuid": "51562362-b372-4c73-8e2d-0a74c5041805",
              "parentUUID": "a1bebd10-4be6-4f6c-bc3c-c7d15f7d0790",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle response store cleanup and management",
              "fullTitle": "Response Store Example should handle response store cleanup and management",
              "timedOut": false,
              "duration": 1885,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Store multiple responses\nconst responses = [];\nfor (let i = 1; i <= 3; i++) {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get(`/posts/${i}`)\n        .execute();\n    await response.statusCode(200).execute();\n    src_1.restified.storeResponse(`post-${i}`);\n    responses.push(`post-${i}`);\n}\n// Verify all responses are stored\nfor (const key of responses) {\n    const stored = src_1.restified.getStoredResponse(key);\n    if (!stored) {\n        throw new Error(`Response ${key} was not properly stored`);\n    }\n}\nconsole.log('‚úÖ All responses properly stored and retrieved');\n// Response store will be automatically cleaned up in the after hook\n// when restified.cleanup() is called",
              "err": {},
              "uuid": "b316396b-a429-4c10-a01d-5b563e9fa1d0",
              "parentUUID": "a1bebd10-4be6-4f6c-bc3c-c7d15f7d0790",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c0c90950-fd27-4d3d-b69e-0bf343c41599",
            "784cf161-c6fd-4e38-8872-6db5a2a65eeb",
            "51562362-b372-4c73-8e2d-0a74c5041805",
            "b316396b-a429-4c10-a01d-5b563e9fa1d0"
          ],
          "failures": [
            "d699bdfb-cd9d-4974-b90a-2b79ffd7b3d7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5817,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b56a3041-e2bd-4b87-b6b6-c3700ac87354",
          "title": "Schema Validation Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\schema-validation.ts",
          "file": "\\examples\\advanced\\schema-validation.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Schema Validation Example\"",
              "fullTitle": "Schema Validation Example \"after all\" hook in \"Schema Validation Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "49a08752-ce28-426e-a7f2-bccd32f5be75",
              "parentUUID": "b56a3041-e2bd-4b87-b6b6-c3700ac87354",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should validate user object against JSON schema using global client",
              "fullTitle": "Schema Validation Example should validate user object against JSON schema using global client",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Schema Validation', 'User Object Validation');\nconst response = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured global client\n    .when()\n    .get('/users/{{globalUserId}}') // Use global user ID\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonSchema(userSchema)\n    .jsonPath('$.name')\n    .jsonPath('$.email')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\advanced\\schema-validation.ts:58:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\advanced\\schema-validation.ts:53:22)",
                "diff": null
              },
              "uuid": "b0bc9b31-f5bd-426a-8b6d-89123760acfd",
              "parentUUID": "b56a3041-e2bd-4b87-b6b6-c3700ac87354",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate array of posts against JSON schema",
              "fullTitle": "Schema Validation Example should validate array of posts against JSON schema",
              "timedOut": false,
              "duration": 776,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Define JSON schema for array of posts\nconst postsArraySchema = {\n    type: 'array',\n    items: {\n        type: 'object',\n        required: ['id', 'title', 'body', 'userId'],\n        properties: {\n            id: { type: 'number' },\n            title: { type: 'string' },\n            body: { type: 'string' },\n            userId: { type: 'number' }\n        }\n    },\n    minItems: 1,\n    maxItems: 100\n};\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/posts')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonSchema(postsArraySchema)\n    .jsonPath('$[0].id')\n    .jsonPath('$[0].title')\n    .custom((response) => {\n    return Array.isArray(response.data) && response.data.length > 0;\n}, 'Response should be a non-empty array')\n    .execute();",
              "err": {},
              "uuid": "3bdf9323-1b90-4ae5-b097-c3e59475fe38",
              "parentUUID": "b56a3041-e2bd-4b87-b6b6-c3700ac87354",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle schema validation failure",
              "fullTitle": "Schema Validation Example should handle schema validation failure",
              "timedOut": false,
              "duration": 617,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const strictUserSchema = {\n    type: 'object',\n    required: ['id', 'name', 'username', 'email', 'nonExistentField'],\n    properties: {\n        id: { type: 'number' },\n        name: { type: 'string' },\n        username: { type: 'string' },\n        email: { type: 'string', format: 'email' },\n        nonExistentField: { type: 'string' }\n    }\n};\ntry {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/users/1')\n        .execute();\n    await response\n        .statusCode(200)\n        .jsonSchema(strictUserSchema)\n        .execute();\n    throw new Error('Should have failed schema validation');\n}\ncatch (error) {\n    // Expected to fail due to missing required field\n    console.log('Schema validation correctly failed as expected');\n}",
              "err": {},
              "uuid": "eea13361-1bbc-4d53-be18-eb1ac00133c3",
              "parentUUID": "b56a3041-e2bd-4b87-b6b6-c3700ac87354",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3bdf9323-1b90-4ae5-b097-c3e59475fe38",
            "eea13361-1bbc-4d53-be18-eb1ac00133c3"
          ],
          "failures": [
            "b0bc9b31-f5bd-426a-8b6d-89123760acfd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1396,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a532a6ef-99dd-4553-8820-da7cd566d027",
          "title": "Variable Store Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\variable-store.ts",
          "file": "\\examples\\advanced\\variable-store.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Variable Store Example\"",
              "fullTitle": "Variable Store Example \"before each\" hook in \"Variable Store Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear any existing local variables for clean tests\nsrc_1.restified.clearLocalVariables();",
              "err": {},
              "uuid": "e7238434-bcc4-425c-b359-3f506c78a44d",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Variable Store Example\"",
              "fullTitle": "Variable Store Example \"after all\" hook in \"Variable Store Example\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "a8345bf6-e594-4098-8674-a8f55ba42cb7",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should demonstrate global variable management",
              "fullTitle": "Variable Store Example should demonstrate global variable management",
              "timedOut": false,
              "duration": 657,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set global variables\nsrc_1.restified.setGlobalVariable('expectedUserId', 1);\nsrc_1.restified.setGlobalVariable('testEnvironment', 'staging');\nsrc_1.restified.setGlobalVariable('requestSource', 'automated-test');\n// Set multiple global variables at once\nsrc_1.restified.setGlobalVariables({\n    'company': 'Restified Corp',\n    'version': '1.0.0',\n    'testSuite': 'variable-management'\n});\n// Make request and use global variables in headers/validation\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Test-Environment', '{{testEnvironment}}')\n    .header('X-Company', '{{company}}')\n    .header('X-Request-Source', '{{requestSource}}')\n    .when()\n    .get('/users/{{expectedUserId}}')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', 1)\n    .execute();\n// Retrieve and verify global variables\nconsole.log('Global Variables Set:');\nconsole.log('- Expected User ID:', src_1.restified.getGlobalVariable('expectedUserId'));\nconsole.log('- Test Environment:', src_1.restified.getGlobalVariable('testEnvironment'));\nconsole.log('- Request Source:', src_1.restified.getGlobalVariable('requestSource'));\nconsole.log('- Company:', src_1.restified.getGlobalVariable('company'));\nconsole.log('- Version:', src_1.restified.getGlobalVariable('version'));\nconsole.log('- Test Suite:', src_1.restified.getGlobalVariable('testSuite'));\n// Get all global variables\nconst allGlobalVars = src_1.restified.getGlobalVariables();\nconsole.log('Total global variables:', Object.keys(allGlobalVars).length);",
              "err": {},
              "uuid": "cb739ad9-2d6c-4c98-9cee-68cfd9bbc8c1",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate local variable management",
              "fullTitle": "Variable Store Example should demonstrate local variable management",
              "timedOut": false,
              "duration": 756,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set local variables (test-scoped)\nsrc_1.restified.setLocalVariable('testName', 'Variable Store Test');\nsrc_1.restified.setLocalVariable('requestId', Math.random().toString(36).substring(7));\nsrc_1.restified.setLocalVariable('expectedStatus', 200);\n// Set multiple local variables at once\nsrc_1.restified.setLocalVariables({\n    'currentTest': 'local-variables',\n    'timestamp': new Date().toISOString(),\n    'retryCount': 3\n});\n// Use local variables in requests\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Request-Id', '{{requestId}}')\n    .header('X-Test-Name', '{{testName}}')\n    .when()\n    .get('/posts/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .execute();\n// Retrieve local variables\nconsole.log('Local Variables:');\nconsole.log('- Test Name:', src_1.restified.getLocalVariable('testName'));\nconsole.log('- Request ID:', src_1.restified.getLocalVariable('requestId'));\nconsole.log('- Expected Status:', src_1.restified.getLocalVariable('expectedStatus'));\nconsole.log('- Current Test:', src_1.restified.getLocalVariable('currentTest'));\n// Get all local variables\nconst allLocalVars = src_1.restified.getLocalVariables();\nconsole.log('Total local variables:', Object.keys(allLocalVars).length);",
              "err": {},
              "uuid": "6c4b8660-36b5-471c-8768-08f4d4673f47",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate extracted variable management",
              "fullTitle": "Variable Store Example should demonstrate extracted variable management",
              "timedOut": false,
              "duration": 2038,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Make a request and extract multiple values\nconst userResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.id', 'userId')\n    .extract('$.name', 'userName')\n    .extract('$.email', 'userEmail')\n    .extract('$.address.city', 'userCity')\n    .extract('$.company.name', 'companyName')\n    .execute();\n// Use extracted variables in subsequent requests\nconst postsResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-User-Id', '{{userId}}')\n    .header('X-User-Name', '{{userName}}')\n    .when()\n    .get('/posts?userId={{userId}}')\n    .execute();\nawait postsResponse\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) && posts.length > 0;\n}, 'Should have posts for the user')\n    .custom((response) => {\n    const posts = response.data;\n    return posts.every(post => post.userId.toString() === src_1.restified.getVariable('userId').toString());\n}, 'All posts should belong to the extracted user ID')\n    .execute();\n// Display extracted variables\nconsole.log('Extracted Variables:');\nconsole.log('- User ID:', src_1.restified.getVariable('userId'));\nconsole.log('- User Name:', src_1.restified.getVariable('userName'));\nconsole.log('- User Email:', src_1.restified.getVariable('userEmail'));\nconsole.log('- User City:', src_1.restified.getVariable('userCity'));\nconsole.log('- Company Name:', src_1.restified.getVariable('companyName'));",
              "err": {},
              "uuid": "ddfce4ee-220c-4caa-95f0-77b4a8f6545b",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment variable usage",
              "fullTitle": "Variable Store Example should demonstrate environment variable usage",
              "timedOut": false,
              "duration": 652,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Set environment variables (simulating external configuration)\nprocess.env.TEST_USER_ID = '2';\nprocess.env.TEST_ENVIRONMENT = 'production';\nprocess.env.API_VERSION = 'v1';\n// Use environment variables in headers and path parameters\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Environment', '{{$env.TEST_ENVIRONMENT}}')\n    .header('X-API-Version', '{{$env.API_VERSION}}')\n    .when()\n    .get('/users/{{$env.TEST_USER_ID}}')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', 2)\n    .jsonPath('$.name')\n    .execute();\n// Environment variables are accessed through the special $env prefix\nconsole.log('Environment Variables Used:');\nconsole.log('- User ID:', process.env.TEST_USER_ID);\nconsole.log('- Environment:', process.env.TEST_ENVIRONMENT);\nconsole.log('- API Version:', process.env.API_VERSION);",
              "err": {
                "message": "Error: Assertions failed:\nExpected status code 200, got 404\nJSONPath '$.id' expected '2', got 'undefined'\nJSONPath '$.name' should match at least one element",
                "estack": "Error: Assertions failed:\nExpected status code 200, got 404\nJSONPath '$.id' expected '2', got 'undefined'\nJSONPath '$.name' should match at least one element\n    at ThenStep.execute (src\\core\\dsl\\then.core.ts:286:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (examples\\advanced\\variable-store.ts:165:5)",
                "diff": null
              },
              "uuid": "b224ced7-e969-4348-b3e3-b8a290fd4144",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate variable priority and resolution",
              "fullTitle": "Variable Store Example should demonstrate variable priority and resolution",
              "timedOut": false,
              "duration": 1248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set variables with same name at different levels to demonstrate priority\nconst testVar = 'priorityTest';\n// 1. Global variable (lowest priority)\nsrc_1.restified.setGlobalVariable(testVar, 'global-value');\n// 2. Local variable (higher priority)\nsrc_1.restified.setLocalVariable(testVar, 'local-value');\n// 3. Environment variable (can be accessed separately)\nprocess.env.PRIORITY_TEST = 'env-value';\n// Test variable resolution priority\nconsole.log('Variable Priority Resolution:');\nconsole.log('- Global value:', src_1.restified.getGlobalVariable(testVar));\nconsole.log('- Local value:', src_1.restified.getLocalVariable(testVar));\nconsole.log('- General getVariable() returns:', src_1.restified.getVariable(testVar));\n// Make a request to extract a value (highest priority)\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .extract('$.name', testVar) // This will override local variable\n    .execute();\nconsole.log('After extraction:');\nconsole.log('- Extracted value:', src_1.restified.getVariable(testVar));\n// Demonstrate that local variable still exists but extracted takes priority\nconsole.log('- Local variable still exists:', src_1.restified.getLocalVariable(testVar));\n// Test using different variable names in templates\nconst testResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Local-Var', '{{priorityTest}}') // Will resolve to extracted value\n    .header('X-Env-Var', '{{$env.PRIORITY_TEST}}') // Will resolve to env value\n    .when()\n    .get('/posts/1')\n    .execute();\nawait testResponse.statusCode(200).execute();",
              "err": {},
              "uuid": "8b742e59-ce38-4bf4-9abb-5155613f0457",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate comprehensive variable operations",
              "fullTitle": "Variable Store Example should demonstrate comprehensive variable operations",
              "timedOut": false,
              "duration": 1124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up a complex scenario with multiple variable types\nsrc_1.restified.setGlobalVariable('testSuite', 'comprehensive-variables');\nsrc_1.restified.setLocalVariables({\n    'testId': 'comp-test-001',\n    'targetUserId': 1,\n    'requestType': 'user-data-fetch'\n});\nprocess.env.MAX_RETRIES = '3';\nprocess.env.REQUEST_TIMEOUT = '5000';\n// Make request using all variable types\nconst userResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Test-Id', '{{testId}}')\n    .header('X-Request-Type', '{{requestType}}')\n    .header('X-Test-Suite', '{{testSuite}}')\n    .header('X-Max-Retries', '{{$env.MAX_RETRIES}}')\n    .when()\n    .get('/users/{{targetUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.name', 'extractedUserName')\n    .extract('$.company.name', 'extractedCompanyName')\n    .execute();\n// Now use extracted data in another request  \nconst postsResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-User-Name', '{{extractedUserName}}')\n    .header('X-Company', '{{extractedCompanyName}}')\n    .header('X-Suite', '{{testSuite}}')\n    .when()\n    .get('/posts?userId={{targetUserId}}')\n    .execute();\nawait postsResponse\n    .statusCode(200)\n    .custom((response) => {\n    return Array.isArray(response.data) && response.data.length > 0;\n}, 'Should retrieve posts for the user')\n    .execute();\n// Display complete variable summary\nconsole.log('\\n=== Complete Variable Summary ===');\nconsole.log('Global Variables:', src_1.restified.getGlobalVariables());\nconsole.log('Local Variables:', src_1.restified.getLocalVariables());\nconsole.log('Extracted Variables: {');\nconsole.log('  extractedUserName:', src_1.restified.getVariable('extractedUserName'));\nconsole.log('  extractedCompanyName:', src_1.restified.getVariable('extractedCompanyName'));\nconsole.log('}');\nconsole.log('Environment Variables Used: {');\nconsole.log('  MAX_RETRIES:', process.env.MAX_RETRIES);\nconsole.log('  REQUEST_TIMEOUT:', process.env.REQUEST_TIMEOUT);\nconsole.log('}');",
              "err": {},
              "uuid": "eea5c9a3-dc65-444f-ae97-4fab53b42c2e",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate variable clearing and cleanup",
              "fullTitle": "Variable Store Example should demonstrate variable clearing and cleanup",
              "timedOut": false,
              "duration": 651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up variables\nsrc_1.restified.setGlobalVariable('temp1', 'value1');\nsrc_1.restified.setLocalVariable('temp2', 'value2');\n// Extract some data\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .extract('$.id', 'temp3')\n    .execute();\n// Verify variables exist\nconsole.log('Before cleanup:');\nconsole.log('- Global temp1:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Local temp2:', src_1.restified.getLocalVariable('temp2'));\nconsole.log('- Extracted temp3:', src_1.restified.getVariable('temp3'));\n// Clear specific variable types\nsrc_1.restified.clearLocalVariables();\nconsole.log('\\nAfter clearing local variables:');\nconsole.log('- Global temp1:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Local temp2:', src_1.restified.getLocalVariable('temp2')); // Should be undefined\nconsole.log('- Extracted temp3:', src_1.restified.getVariable('temp3'));\n// Note: There's no clearVariables method, only clearLocalVariables\n// Global variables and extracted variables persist until cleanup\nconsole.log('\\nNote: Global and extracted variables persist until cleanup');\nconsole.log('- Global temp1 still exists:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Extracted temp3 still exists:', src_1.restified.getVariable('temp3'));",
              "err": {},
              "uuid": "d6d12c11-3068-4c43-8bbb-9b7fedcc4304",
              "parentUUID": "a532a6ef-99dd-4553-8820-da7cd566d027",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb739ad9-2d6c-4c98-9cee-68cfd9bbc8c1",
            "6c4b8660-36b5-471c-8768-08f4d4673f47",
            "ddfce4ee-220c-4caa-95f0-77b4a8f6545b",
            "8b742e59-ce38-4bf4-9abb-5155613f0457",
            "eea5c9a3-dc65-444f-ae97-4fab53b42c2e",
            "d6d12c11-3068-4c43-8bbb-9b7fedcc4304"
          ],
          "failures": [
            "b224ced7-e969-4348-b3e3-b8a290fd4144"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "6cf2ac11-0d04-4864-a276-5aaf3a1c89ad",
          "title": "WebSocket Real-time Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
          "file": "\\examples\\advanced\\websocket-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WebSocket Real-time Testing\"",
              "fullTitle": "WebSocket Real-time Testing \"before all\" hook in \"WebSocket Real-time Testing\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create WebSocket client for echo service\nindex_1.restified.createWebSocketClient('echo', {\n    url: 'wss://echo.websocket.org',\n    timeout: 10000,\n    reconnectAttempts: 3,\n    reconnectDelay: 1000,\n    pingInterval: 30000\n});\n// Create WebSocket client for crypto data (if available)\nindex_1.restified.createWebSocketClient('crypto', {\n    url: 'wss://stream.binance.com:9443/ws/btcusdt@ticker',\n    timeout: 10000,\n    reconnectAttempts: 2\n});",
              "err": {},
              "uuid": "31782b1b-f6e5-4358-a999-844e24f5a5ce",
              "parentUUID": "6cf2ac11-0d04-4864-a276-5aaf3a1c89ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"WebSocket Real-time Testing\"",
              "fullTitle": "WebSocket Real-time Testing \"after all\" hook in \"WebSocket Real-time Testing\"",
              "timedOut": false,
              "duration": 549,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "6e6994dd-df48-4044-bde1-4b193055d956",
              "parentUUID": "6cf2ac11-0d04-4864-a276-5aaf3a1c89ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "bf38e70a-08f3-430e-88fb-e6d4d59eb3dd",
              "title": "WebSocket Connection Management",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should connect to WebSocket server",
                  "fullTitle": "WebSocket Real-time Testing WebSocket Connection Management should connect to WebSocket server",
                  "timedOut": false,
                  "duration": 426,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await index_1.restified.connectWebSocket('echo');\nconst client = index_1.restified.getWebSocketClient('echo');\n(0, chai_1.expect)(client.isConnected()).to.be.true;",
                  "err": {},
                  "uuid": "0caa108f-4d00-4aba-bd55-819776bec417",
                  "parentUUID": "bf38e70a-08f3-430e-88fb-e6d4d59eb3dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle connection timeout",
                  "fullTitle": "WebSocket Real-time Testing WebSocket Connection Management should handle connection timeout",
                  "timedOut": false,
                  "duration": 288,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Create client with very short timeout\nindex_1.restified.createWebSocketClient('timeout-test', {\n    url: 'wss://invalid-websocket-server.example.com',\n    timeout: 1000\n});\ntry {\n    await index_1.restified.connectWebSocket('timeout-test');\n    chai_1.expect.fail('Should have thrown timeout error');\n}\ncatch (error) {\n    (0, chai_1.expect)(error.message).to.include('timeout');\n}",
                  "err": {
                    "message": "Error: getaddrinfo ENOTFOUND invalid-websocket-server.example.com",
                    "estack": "Error: getaddrinfo ENOTFOUND invalid-websocket-server.example.com\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
                    "diff": null
                  },
                  "uuid": "60d506c5-81cd-4e3a-b892-5080d50d67cc",
                  "parentUUID": "bf38e70a-08f3-430e-88fb-e6d4d59eb3dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0caa108f-4d00-4aba-bd55-819776bec417"
              ],
              "failures": [
                "60d506c5-81cd-4e3a-b892-5080d50d67cc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 714,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "0f63fa27-70b3-4b7d-bbf1-3fc97014e057",
              "title": "Message Communication",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send and receive text messages",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should send and receive text messages",
                  "timedOut": false,
                  "duration": 270,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\n// Clear any existing messages\nclient.clearMessages();\nconst testMessage = 'Hello WebSocket from RestifiedTS!';\nawait client.send(testMessage);\n// Wait for echo response\nconst receivedMessage = await client.waitForMessage((msg) => msg.data === testMessage, 5000);\n(0, chai_1.expect)(receivedMessage.data).to.equal(testMessage);\n(0, chai_1.expect)(receivedMessage.timestamp).to.be.a('number');\n(0, chai_1.expect)(receivedMessage.id).to.be.a('string');",
                  "err": {},
                  "uuid": "5b867abf-bb87-4d42-badb-0c535db35c44",
                  "parentUUID": "0f63fa27-70b3-4b7d-bbf1-3fc97014e057",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send and receive JSON messages",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should send and receive JSON messages",
                  "timedOut": false,
                  "duration": 320,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\nconst jsonMessage = {\n    type: 'test',\n    data: {\n        userId: '{{$random.uuid}}',\n        timestamp: '{{$date.now}}',\n        message: 'JSON test from RestifiedTS'\n    }\n};\nawait client.sendJSON(jsonMessage);\n// Wait for JSON echo response\nconst receivedMessage = await client.waitForMessage((msg) => msg.data && msg.data.type === 'test', 5000);\n(0, chai_1.expect)(receivedMessage.data.type).to.equal('test');\n(0, chai_1.expect)(receivedMessage.data.data.message).to.equal('JSON test from RestifiedTS');\n(0, chai_1.expect)(receivedMessage.data.data.userId).to.match(/^[0-9a-f-]+$/);",
                  "err": {},
                  "uuid": "0ff0750d-3184-4efe-9681-85fa345d9ff7",
                  "parentUUID": "0f63fa27-70b3-4b7d-bbf1-3fc97014e057",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle message with variables",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should handle message with variables",
                  "timedOut": false,
                  "duration": 5003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nindex_1.restified.setGlobalVariable('userName', 'RestifiedTester');\nindex_1.restified.setGlobalVariable('sessionId', 'session-12345');\nclient.clearMessages();\nconst messageWithVars = {\n    user: '{{userName}}',\n    session: '{{sessionId}}',\n    action: 'ping',\n    timestamp: Date.now()\n};\nawait client.sendJSON(messageWithVars);\nconst receivedMessage = await client.waitForMessage((msg) => msg.data && msg.data.user === 'RestifiedTester', 5000);\n(0, chai_1.expect)(receivedMessage.data.user).to.equal('RestifiedTester');\n(0, chai_1.expect)(receivedMessage.data.session).to.equal('session-12345');\n(0, chai_1.expect)(receivedMessage.data.action).to.equal('ping');",
                  "err": {
                    "message": "Error: Timeout waiting for message after 5000ms",
                    "estack": "Error: Timeout waiting for message after 5000ms\n    at Timeout._onTimeout (src\\core\\clients\\WebSocketClient.ts:199:16)\n    at listOnTimeout (node:internal/timers:588:17)\n    at processTimers (node:internal/timers:523:7)",
                    "diff": null
                  },
                  "uuid": "c0783581-12e8-4751-9699-8c2af79ca834",
                  "parentUUID": "0f63fa27-70b3-4b7d-bbf1-3fc97014e057",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b867abf-bb87-4d42-badb-0c535db35c44",
                "0ff0750d-3184-4efe-9681-85fa345d9ff7"
              ],
              "failures": [
                "c0783581-12e8-4751-9699-8c2af79ca834"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5593,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "820aa134-b727-43dd-83f4-4a264045ea29",
              "title": "Message Filtering and Querying",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should filter messages by criteria",
                  "fullTitle": "WebSocket Real-time Testing Message Filtering and Querying should filter messages by criteria",
                  "timedOut": false,
                  "duration": 1011,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\n// Send multiple messages\nawait client.sendJSON({ type: 'order', id: 1, status: 'pending' });\nawait client.sendJSON({ type: 'order', id: 2, status: 'completed' });\nawait client.sendJSON({ type: 'notification', message: 'System update' });\n// Wait a bit for all messages to be received\nawait new Promise(resolve => setTimeout(resolve, 1000));\nconst orderMessages = client.getMessagesWhere((msg) => msg.data && msg.data.type === 'order');\n(0, chai_1.expect)(orderMessages).to.have.length(2);\nconst completedOrders = client.getMessagesWhere((msg) => msg.data && msg.data.type === 'order' && msg.data.status === 'completed');\n(0, chai_1.expect)(completedOrders).to.have.length(1);\n(0, chai_1.expect)(completedOrders[0].data.id).to.equal(2);",
                  "err": {},
                  "uuid": "7c137f8f-30b3-4885-86f9-72a9a816f938",
                  "parentUUID": "820aa134-b727-43dd-83f4-4a264045ea29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should wait for specific message patterns",
                  "fullTitle": "WebSocket Real-time Testing Message Filtering and Querying should wait for specific message patterns",
                  "timedOut": false,
                  "duration": 1261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\n// Send message that will trigger wait condition\nsetTimeout(async () => {\n    await client.sendJSON({\n        type: 'response',\n        requestId: 'req-123',\n        result: 'success'\n    });\n}, 1000);\n// Wait for specific response\nconst response = await client.waitForMessage((msg) => msg.data &&\n    msg.data.type === 'response' &&\n    msg.data.requestId === 'req-123', 5000);\n(0, chai_1.expect)(response.data.result).to.equal('success');",
                  "err": {},
                  "uuid": "172f1d86-2719-45f2-a232-b5996cb6919a",
                  "parentUUID": "820aa134-b727-43dd-83f4-4a264045ea29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c137f8f-30b3-4885-86f9-72a9a816f938",
                "172f1d86-2719-45f2-a232-b5996cb6919a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2272,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "9fe6795a-71ae-47fa-8320-5dca95a334c6",
              "title": "Connection Health and Ping",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure ping latency",
                  "fullTitle": "WebSocket Real-time Testing Connection Health and Ping should measure ping latency",
                  "timedOut": false,
                  "duration": 244,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nif (client.isConnected()) {\n    const latency = await client.ping();\n    (0, chai_1.expect)(latency).to.be.a('number');\n    (0, chai_1.expect)(latency).to.be.greaterThan(0);\n    (0, chai_1.expect)(latency).to.be.lessThan(10000); // Less than 10 seconds\n    console.log(`WebSocket ping latency: ${latency}ms`);\n}",
                  "err": {},
                  "uuid": "15a6abe4-3fbf-48fa-bd66-f7bcc7b7b6e5",
                  "parentUUID": "9fe6795a-71ae-47fa-8320-5dca95a334c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15a6abe4-3fbf-48fa-bd66-f7bcc7b7b6e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 244,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "72fb9081-8736-467e-8a05-7376e58b9fd6",
              "title": "Real-time Data Stream Testing",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should receive crypto price updates",
                  "fullTitle": "WebSocket Real-time Testing Real-time Data Stream Testing should receive crypto price updates",
                  "timedOut": false,
                  "duration": 1433,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await index_1.restified.connectWebSocket('crypto');\n    const client = index_1.restified.getWebSocketClient('crypto');\n    client.clearMessages();\n    // Wait for price update message\n    const priceUpdate = await client.waitForMessage((msg) => msg.data && typeof msg.data.c !== 'undefined', // 'c' is close price\n    10000);\n    (0, chai_1.expect)(priceUpdate.data).to.have.property('s'); // symbol\n    (0, chai_1.expect)(priceUpdate.data).to.have.property('c'); // close price\n    (0, chai_1.expect)(priceUpdate.data.s).to.equal('BTCUSDT');\n    (0, chai_1.expect)(parseFloat(priceUpdate.data.c)).to.be.greaterThan(0);\n    console.log(`Received BTC price: $${priceUpdate.data.c}`);\n}\ncatch (error) {\n    console.log('Crypto stream test skipped - service unavailable');\n    this.skip();\n}",
                  "err": {},
                  "uuid": "a4483dfb-248c-4ccc-904c-07e02edb2128",
                  "parentUUID": "72fb9081-8736-467e-8a05-7376e58b9fd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle multiple concurrent connections",
                  "fullTitle": "WebSocket Real-time Testing Real-time Data Stream Testing should handle multiple concurrent connections",
                  "timedOut": false,
                  "duration": 3356,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create multiple echo connections\nindex_1.restified.createWebSocketClient('echo2', {\n    url: 'wss://echo.websocket.org',\n    timeout: 10000\n});\nawait index_1.restified.connectWebSocket('echo2');\nconst client1 = index_1.restified.getWebSocketClient('echo');\nconst client2 = index_1.restified.getWebSocketClient('echo2');\n(0, chai_1.expect)(client1.isConnected()).to.be.true;\n(0, chai_1.expect)(client2.isConnected()).to.be.true;\n// Send different messages on each connection\nclient1.clearMessages();\nclient2.clearMessages();\nawait client1.send('Message from connection 1');\nawait client2.send('Message from connection 2');\n// Verify each connection received its own message\nconst msg1 = await client1.waitForMessage((msg) => msg.data === 'Message from connection 1', 3000);\nconst msg2 = await client2.waitForMessage((msg) => msg.data === 'Message from connection 2', 3000);\n(0, chai_1.expect)(msg1.data).to.equal('Message from connection 1');\n(0, chai_1.expect)(msg2.data).to.equal('Message from connection 2');",
                  "err": {},
                  "uuid": "ae37957a-f7f4-43e9-b600-1e0d22510586",
                  "parentUUID": "72fb9081-8736-467e-8a05-7376e58b9fd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4483dfb-248c-4ccc-904c-07e02edb2128",
                "ae37957a-f7f4-43e9-b600-1e0d22510586"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4789,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "fd379735-4543-495c-9ee9-04646719acd4",
              "title": "Error Handling and Reconnection",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle disconnection gracefully",
                  "fullTitle": "WebSocket Real-time Testing Error Handling and Reconnection should handle disconnection gracefully",
                  "timedOut": false,
                  "duration": 657,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nif (client.isConnected()) {\n    await client.disconnect();\n    (0, chai_1.expect)(client.isConnected()).to.be.false;\n    // Test result should show disconnection\n    const testResult = client.getTestResult();\n    (0, chai_1.expect)(testResult.connected).to.be.false;\n    (0, chai_1.expect)(testResult.disconnectionTime).to.be.a('number');\n    (0, chai_1.expect)(testResult.messages).to.be.an('array');\n}",
                  "err": {},
                  "uuid": "a1ed8804-d9b7-42f4-96e7-9ded3eefb755",
                  "parentUUID": "fd379735-4543-495c-9ee9-04646719acd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1ed8804-d9b7-42f4-96e7-9ded3eefb755"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 657,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
          "title": "Bearer Token Authentication Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\authentication\\bearer-auth.ts",
          "file": "\\examples\\authentication\\bearer-auth.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"before all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "c52c5fb7-5a5c-4c44-b1ea-0eb9c87872e6",
              "parentUUID": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"before each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "935a8981-08ca-4a1b-adfb-cb75a426b84c",
              "parentUUID": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"after all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "3e0f4981-76d6-43c6-a67c-f0778b0da259",
              "parentUUID": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"after each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "bfcf4224-ce81-4b47-afdb-775f3adb995c",
              "parentUUID": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should use global authentication token with testUtils client",
              "fullTitle": "Bearer Token Authentication Example should use global authentication token with testUtils client",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Global Token Usage');\n// Use the global auth token that was obtained during global setup\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils') // Pre-configured client\n    .bearerToken('{{globalAuthToken}}') // Global auth token\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', src_1.restified.getVariable('globalAuthToken'))\n    .execute();\nconsole.log('‚úÖ Authentication successful with global token');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:44:10)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\authentication\\bearer-auth.ts:38:22)",
                "diff": null
              },
              "uuid": "72869e87-23fa-4a91-a157-955b866989fa",
              "parentUUID": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment-based authentication",
              "fullTitle": "Bearer Token Authentication Example should demonstrate environment-based authentication",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Environment Auth');\n// Use environment variable that was set up during global setup\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .bearerToken('{{$env.EXAMPLE_API_KEY}}') // From global setup\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', process.env.EXAMPLE_API_KEY)\n    .execute();\nconsole.log('‚úÖ Environment-based authentication successful');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:191:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:66:10)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:238:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:189:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:185:12)\n    at async Context.<anonymous> (examples\\authentication\\bearer-auth.ts:60:22)",
                "diff": null
              },
              "uuid": "cf4c807b-be50-4fb0-a476-a133fefffb7c",
              "parentUUID": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show authenticated API workflow",
              "fullTitle": "Bearer Token Authentication Example should show authenticated API workflow",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'API Workflow');\n// Step 1: Use authenticated API client for business operation\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured with global auth\n    .header('Authorization', `Bearer {{globalAuthToken}}`)\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .extract('$.phone', 'userPhone')\n    .execute();\n// Step 2: Validate auth token with test utilities\nconst validateResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .header('X-User-Phone', '{{userPhone}}')\n    .header('X-Global-User', '{{globalUserEmail}}')\n    .bearerToken('{{globalAuthToken}}')\n    .when()\n    .get('/bearer')\n    .execute();\nawait validateResponse\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .custom((response) => {\n    return response.data.token === src_1.restified.getVariable('globalAuthToken');\n}, 'Token should match global auth token')\n    .execute();\nconsole.log('‚úÖ Full authenticated workflow completed');",
              "err": {
                "message": "Error: Circuit breaker 'GET:/' is OPEN. Failing fast to protect downstream service.",
                "estack": "Error: Circuit breaker 'GET:/' is OPEN. Failing fast to protect downstream service.\n    at CircuitBreakerManager.executeInOpenState (src\\core\\network\\CircuitBreakerManager.ts:139:19)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:88:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:88:10)",
                "diff": null
              },
              "uuid": "cc1f6644-edcd-4999-8e71-ab65cbe7efc9",
              "parentUUID": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle authentication errors with global patterns",
              "fullTitle": "Bearer Token Authentication Example should handle authentication errors with global patterns",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Error Handling');\n// Test authentication failure using invalid token\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .bearerToken('invalid-global-token')\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200) // HTTPBin accepts any token for demo\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', 'invalid-global-token')\n    .execute();\nconsole.log('‚úÖ Authentication error handling verified');",
              "err": {
                "message": "Error: Circuit breaker 'GET:/' is OPEN. Failing fast to protect downstream service.",
                "estack": "Error: Circuit breaker 'GET:/' is OPEN. Failing fast to protect downstream service.\n    at CircuitBreakerManager.executeInOpenState (src\\core\\network\\CircuitBreakerManager.ts:139:19)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:88:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:185:45)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:129:10)",
                "diff": null
              },
              "uuid": "b455ae62-2268-4de5-b839-b22a342faf7e",
              "parentUUID": "1cd1b891-77ba-4e9a-91c9-b3a59a7cf423",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "72869e87-23fa-4a91-a157-955b866989fa",
            "cf4c807b-be50-4fb0-a476-a133fefffb7c",
            "cc1f6644-edcd-4999-8e71-ab65cbe7efc9",
            "b455ae62-2268-4de5-b839-b22a342faf7e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}