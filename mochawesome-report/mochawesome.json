{
  "stats": {
    "suites": 32,
    "tests": 83,
    "passes": 56,
    "pending": 1,
    "failures": 26,
    "start": "2025-08-30T05:55:38.530Z",
    "end": "2025-08-30T05:56:58.505Z",
    "duration": 79975,
    "testsRegistered": 83,
    "passPercent": 68.29268292682927,
    "pendingPercent": 1.2048192771084338,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a9cdcb84-e5af-4b94-b2b8-1a62f3e504ed",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bff2e45d-1cdf-4fe9-a3fc-a8f2de8d9cdc",
          "title": "POST Request with Variables Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\basic\\post-with-variables.ts",
          "file": "\\examples\\basic\\post-with-variables.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST Request with Variables Example\"",
              "fullTitle": "POST Request with Variables Example \"before each\" hook in \"POST Request with Variables Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up test-specific data (global auth data already available from setup)\nsrc_1.restified.setLocalVariable('postTitle', 'My Test Post');\nsrc_1.restified.setLocalVariable('postBody', 'Created using global auth by {{globalUserEmail}}');",
              "err": {},
              "uuid": "dbed3daf-1f85-46d4-9f29-2dc9999694e1",
              "parentUUID": "bff2e45d-1cdf-4fe9-a3fc-a8f2de8d9cdc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a post using global client and variables",
              "fullTitle": "POST Request with Variables Example should create a post using global client and variables",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Create Post');\n// Use pre-configured API client from global setup\n// Common headers are already included in the client configuration\nconst createResponse = await src_1.restified\n    .given()\n    .useClient('api') // Global client with pre-configured headers\n    .header('X-Author', '{{globalUserEmail}}')\n    .when()\n    .post('/posts', {\n    title: '{{postTitle}}',\n    body: '{{postBody}}',\n    userId: '{{globalUserId}}' // Using global user ID from auth\n})\n    .execute();\n// Verify creation and extract the ID\nawait createResponse\n    .statusCode(201)\n    .jsonPath('$.title', 'My Test Post')\n    .jsonPath('$.userId', '1') // JSONPlaceholder returns userId as string\n    .extract('$.id', 'createdPostId')\n    .execute();\nconsole.log('üìù Post created with ID:', src_1.restified.getVariable('createdPostId'));",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:208:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:35:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:208:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:25:28)",
                "diff": null
              },
              "uuid": "7c02c231-a5dc-41a8-b5ee-7ecc058401d5",
              "parentUUID": "bff2e45d-1cdf-4fe9-a3fc-a8f2de8d9cdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve post using global client and extracted variables",
              "fullTitle": "POST Request with Variables Example should retrieve post using global client and extracted variables",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Retrieve Post');\n// Use the globalUserId that was set during global authentication\n// Common headers are already included in the client configuration\nconst getResponse = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured API client\n    .header('X-Requested-By', '{{globalUserEmail}}')\n    .when()\n    .get('/posts/{{globalUserId}}') // Using global user ID\n    .execute();\nawait getResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.userId', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.title')\n    .custom((response) => {\n    // Verify we can access global variables in custom assertions\n    return src_1.restified.getVariable('testEnvironment') === 'development';\n}, 'Should have access to global test environment')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:59:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:53:25)",
                "diff": null
              },
              "uuid": "23880299-98cc-4b25-82e3-c9d2234e3710",
              "parentUUID": "bff2e45d-1cdf-4fe9-a3fc-a8f2de8d9cdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate cross-client variable usage",
              "fullTitle": "POST Request with Variables Example should demonstrate cross-client variable usage",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Cross-Client');\n// First, create data using API client\n// Common headers are already included in the client configuration\nconst apiResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait apiResponse\n    .statusCode(200)\n    .extract('$.company.catchPhrase', 'companyCatchPhrase')\n    .execute();\n// Then use testUtils client to validate the extracted data\n// Common headers are already included in the client configuration\nconst testResponse = await src_1.restified\n    .given()\n    .useClient('testUtils') // Different client from global setup\n    .when()\n    .post('/post', {\n    extractedData: '{{companyCatchPhrase}}',\n    globalUser: '{{globalUserEmail}}',\n    testSuite: '{{testSuite}}'\n})\n    .execute();\nawait testResponse\n    .statusCode(200)\n    .jsonPath('$.json.globalUser', src_1.restified.getVariable('globalUserEmail'))\n    .jsonPath('$.json.testSuite', src_1.restified.getVariable('testSuite'))\n    .execute();\nconsole.log('üåê Cross-client variable sharing successful');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:83:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:78:25)",
                "diff": null
              },
              "uuid": "8f5b15e2-225a-496c-ad11-597271e26581",
              "parentUUID": "bff2e45d-1cdf-4fe9-a3fc-a8f2de8d9cdc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7c02c231-a5dc-41a8-b5ee-7ecc058401d5",
            "23880299-98cc-4b25-82e3-c9d2234e3710",
            "8f5b15e2-225a-496c-ad11-597271e26581"
          ],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
          "title": "Data-Driven Testing Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\data-driven-testing.ts",
          "file": "\\examples\\advanced\\data-driven-testing.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Data-Driven Testing Example\"",
              "fullTitle": "Data-Driven Testing Example \"after all\" hook in \"Data-Driven Testing Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "81f94cbb-94ed-40d0-939e-812a25a6eeea",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should validate user 1 has correct name: Leanne Graham",
              "fullTitle": "Data-Driven Testing Example should validate user 1 has correct name: Leanne Graham",
              "timedOut": false,
              "duration": 1037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "96858dd8-0403-40f7-a7fe-4e721239ac0d",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 2 has correct name: Ervin Howell",
              "fullTitle": "Data-Driven Testing Example should validate user 2 has correct name: Ervin Howell",
              "timedOut": false,
              "duration": 1473,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "5ddca5e6-d44e-4f64-96b6-f10983a94c2a",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 3 has correct name: Clementine Bauch",
              "fullTitle": "Data-Driven Testing Example should validate user 3 has correct name: Clementine Bauch",
              "timedOut": false,
              "duration": 649,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "49911653-676c-4a6e-b9c0-4c68ee570f35",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 1 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 1 has posts within expected range",
              "timedOut": false,
              "duration": 633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "fd7e29d2-c552-4902-9d0c-74a27f48727d",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 2 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 2 has posts within expected range",
              "timedOut": false,
              "duration": 604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "ada27a73-bd09-46c3-aaef-a4a585e524dd",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 3 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 3 has posts within expected range",
              "timedOut": false,
              "duration": 627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "0e59d6c3-8c12-41e2-9414-9184d7c05f3e",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for /posts/1",
              "fullTitle": "Data-Driven Testing Example should return 200 for /posts/1",
              "timedOut": false,
              "duration": 2218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "e0146d4b-a815-4620-81a2-660b19054de8",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for /posts/999",
              "fullTitle": "Data-Driven Testing Example should return 404 for /posts/999",
              "timedOut": false,
              "duration": 2383,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "297ee336-1f82-40ff-93a0-5c17c72d908f",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for /users/1",
              "fullTitle": "Data-Driven Testing Example should return 200 for /users/1",
              "timedOut": false,
              "duration": 887,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "3aa16c83-6864-4ec6-a957-04dbe6fbd5df",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for /users/999",
              "fullTitle": "Data-Driven Testing Example should return 404 for /users/999",
              "timedOut": false,
              "duration": 1503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "95482d9f-3b59-4bfd-8d6d-55734b3d8ae0",
              "parentUUID": "d0ed6af3-1637-4059-91f9-f447708b4b4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96858dd8-0403-40f7-a7fe-4e721239ac0d",
            "5ddca5e6-d44e-4f64-96b6-f10983a94c2a",
            "49911653-676c-4a6e-b9c0-4c68ee570f35",
            "fd7e29d2-c552-4902-9d0c-74a27f48727d",
            "ada27a73-bd09-46c3-aaef-a4a585e524dd",
            "0e59d6c3-8c12-41e2-9414-9184d7c05f3e",
            "e0146d4b-a815-4620-81a2-660b19054de8",
            "297ee336-1f82-40ff-93a0-5c17c72d908f",
            "3aa16c83-6864-4ec6-a957-04dbe6fbd5df",
            "95482d9f-3b59-4bfd-8d6d-55734b3d8ae0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12014,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e5801f28-ea72-4c97-8497-92de023f0c1d",
          "title": "Database Integration Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
          "file": "\\examples\\advanced\\database-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Database Integration Testing\"",
              "fullTitle": "Database Integration Testing \"before all\" hook in \"Database Integration Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup database connections (using mock/test databases)\n// PostgreSQL connection (if available)\nif (process.env.POSTGRES_CONNECTION_STRING || process.env.POSTGRES_HOST) {\n    await index_1.restified.createDatabaseClient('postgres', {\n        type: 'postgresql',\n        host: process.env.POSTGRES_HOST || 'localhost',\n        port: parseInt(process.env.POSTGRES_PORT || '5432'),\n        username: process.env.POSTGRES_USER || 'test',\n        password: process.env.POSTGRES_PASSWORD || 'test',\n        database: process.env.POSTGRES_DB || 'testdb',\n        connectionString: process.env.POSTGRES_CONNECTION_STRING,\n        timeout: 10000\n    });\n}\n// MongoDB connection (if available)\nif (process.env.MONGODB_CONNECTION_STRING || process.env.MONGODB_HOST) {\n    await index_1.restified.createDatabaseClient('mongodb', {\n        type: 'mongodb',\n        host: process.env.MONGODB_HOST || 'localhost',\n        port: parseInt(process.env.MONGODB_PORT || '27017'),\n        database: process.env.MONGODB_DB || 'testdb',\n        connectionString: process.env.MONGODB_CONNECTION_STRING,\n        timeout: 10000\n    });\n}",
              "err": {},
              "uuid": "ee692de5-74db-4ae2-bcdc-4f9960b7b60f",
              "parentUUID": "e5801f28-ea72-4c97-8497-92de023f0c1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Database Integration Testing\"",
              "fullTitle": "Database Integration Testing \"after all\" hook in \"Database Integration Testing\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "9a514de6-ada7-460e-ba83-2da2aa00cb16",
              "parentUUID": "e5801f28-ea72-4c97-8497-92de023f0c1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9d540523-eaac-4468-9bdc-256a5f489488",
              "title": "PostgreSQL Integration",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"PostgreSQL Integration\"",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration \"before each\" hook in \"PostgreSQL Integration\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!index_1.restified.getDatabaseClient) {\n    this.skip();\n}\ntry {\n    index_1.restified.getDatabaseClient('postgres');\n}\ncatch {\n    this.skip();\n}",
                  "err": {},
                  "uuid": "2dd47f4f-fadc-453a-b70d-d4ae2d5d8459",
                  "parentUUID": "9d540523-eaac-4468-9bdc-256a5f489488",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate user creation via API and database",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should validate user creation via API and database",
                  "timedOut": false,
                  "duration": 1158,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\n// Create snapshot before test\nawait dbClient.createSnapshot('before-user-test', ['users']);\n// Create user via API\nconst response = await index_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .post('/users', {\n    name: 'Database Test User',\n    email: 'dbtest@example.com',\n    username: 'dbtestuser'\n})\n    .execute();\nawait response\n    .statusCode(201)\n    .extract('$.id', 'createdUserId')\n    .execute();\n// Simulate database state validation\n// In real scenario, this would check if user was actually created in database\nconst userId = index_1.restified.getVariable('createdUserId');\n// Mock database query result\nconst queryResult = await dbClient.executeQuery('SELECT * FROM users WHERE external_id = $1', [userId]);\n// In a real test, you would validate the user exists in database\nconsole.log(`Created user with ID: ${userId}`);\n(0, chai_1.expect)(queryResult.executionTime).to.be.a('number');",
                  "err": {
                    "message": "AssertionError: expected undefined to be a number",
                    "estack": "AssertionError: expected undefined to be a number\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:95:47)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "c5ed1658-3197-4d7f-83fb-24e2dc34ec07",
                  "parentUUID": "9d540523-eaac-4468-9bdc-256a5f489488",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate data consistency across API and database",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should validate data consistency across API and database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\n// Test data consistency validation\nconst validationResult = await index_1.restified.validateDatabaseState([\n    {\n        client: 'postgres',\n        table: 'users',\n        conditions: { active: true },\n        expectedCount: 5\n    },\n    {\n        client: 'postgres',\n        table: 'orders',\n        conditions: { status: 'pending' },\n        expectedCount: { min: 1 }\n    }\n]);\n// In real scenario, this would validate actual database state\n(0, chai_1.expect)(validationResult).to.have.property('success');\n(0, chai_1.expect)(validationResult).to.have.property('results');",
                  "err": {},
                  "uuid": "22a92674-1918-4715-85e7-91a5a74c2f81",
                  "parentUUID": "9d540523-eaac-4468-9bdc-256a5f489488",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database transactions",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should handle database transactions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\ntry {\n    // Begin transaction\n    await dbClient.beginTransaction();\n    // Execute test operations\n    await dbClient.executeQuery('INSERT INTO test_table (name, value) VALUES ($1, $2)', ['transaction-test', 42]);\n    // Validate data exists in transaction\n    const result = await dbClient.executeQuery('SELECT * FROM test_table WHERE name = $1', ['transaction-test']);\n    // Rollback transaction (cleanup)\n    await dbClient.rollback();\n    console.log('Transaction test completed successfully');\n}\ncatch (error) {\n    await dbClient.rollback();\n    throw error;\n}",
                  "err": {},
                  "uuid": "dd510423-4f1a-469a-b2b7-2d5f50772b30",
                  "parentUUID": "9d540523-eaac-4468-9bdc-256a5f489488",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should measure database query performance",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should measure database query performance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\nconst startTime = Date.now();\nconst result = await dbClient.executeQuery('SELECT COUNT(*) as total FROM information_schema.tables');\n(0, chai_1.expect)(result.executionTime).to.be.a('number');\n(0, chai_1.expect)(result.executionTime).to.be.lessThan(5000); // Less than 5 seconds\nconsole.log(`Database query executed in ${result.executionTime}ms`);",
                  "err": {
                    "message": "AssertionError: expected undefined to be a number",
                    "estack": "AssertionError: expected undefined to be a number\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:160:42)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "4711b432-0753-4c05-bae9-a8cdadb968d0",
                  "parentUUID": "9d540523-eaac-4468-9bdc-256a5f489488",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22a92674-1918-4715-85e7-91a5a74c2f81",
                "dd510423-4f1a-469a-b2b7-2d5f50772b30"
              ],
              "failures": [
                "c5ed1658-3197-4d7f-83fb-24e2dc34ec07",
                "4711b432-0753-4c05-bae9-a8cdadb968d0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "7ae9be57-e83f-4dfc-92d0-035a01afdbcb",
              "title": "MongoDB Integration",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"MongoDB Integration\"",
                  "fullTitle": "Database Integration Testing MongoDB Integration \"before each\" hook in \"MongoDB Integration\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    index_1.restified.getDatabaseClient('mongodb');\n}\ncatch {\n    this.skip();\n}",
                  "err": {},
                  "uuid": "e4638938-e59d-41ff-b11a-5ca8a7311a37",
                  "parentUUID": "7ae9be57-e83f-4dfc-92d0-035a01afdbcb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate document creation and retrieval",
                  "fullTitle": "Database Integration Testing MongoDB Integration should validate document creation and retrieval",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\n// Insert document\nconst insertOperation = JSON.stringify({\n    collection: 'users',\n    method: 'insertOne',\n    document: {\n        name: 'MongoDB Test User',\n        email: 'mongotest@example.com',\n        createdAt: new Date(),\n        metadata: {\n            source: 'restifiedts-test',\n            version: '1.0.0'\n        }\n    }\n});\nconst insertResult = await dbClient.executeQuery(insertOperation);\n(0, chai_1.expect)(insertResult.insertId).to.exist;\nconst documentId = insertResult.insertId;\nindex_1.restified.setGlobalVariable('mongoDocumentId', documentId.toString());\n// Retrieve document\nconst findOperation = JSON.stringify({\n    collection: 'users',\n    method: 'findOne',\n    query: { _id: documentId }\n});\nconst findResult = await dbClient.executeQuery(findOperation);\n(0, chai_1.expect)(findResult.rows).to.have.length(1);\n(0, chai_1.expect)(findResult.rows[0].name).to.equal('MongoDB Test User');\n(0, chai_1.expect)(findResult.rows[0].metadata.source).to.equal('restifiedts-test');",
                  "err": {
                    "message": "AssertionError: expected undefined to exist",
                    "estack": "AssertionError: expected undefined to exist\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:195:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "0032cf35-3062-4dc5-85e3-2d67d8cfcbd1",
                  "parentUUID": "7ae9be57-e83f-4dfc-92d0-035a01afdbcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate document updates",
                  "fullTitle": "Database Integration Testing MongoDB Integration should validate document updates",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\nconst documentId = index_1.restified.getVariable('mongoDocumentId');\nif (!documentId) {\n    this.skip();\n}\n// Update document\nconst updateOperation = JSON.stringify({\n    collection: 'users',\n    method: 'updateOne',\n    query: { _id: { $oid: documentId } },\n    document: {\n        $set: {\n            name: 'Updated MongoDB User',\n            updatedAt: new Date()\n        }\n    }\n});\nconst updateResult = await dbClient.executeQuery(updateOperation);\n(0, chai_1.expect)(updateResult.affectedRows).to.equal(1);\n// Verify update\nconst findOperation = JSON.stringify({\n    collection: 'users',\n    method: 'findOne',\n    query: { _id: { $oid: documentId } }\n});\nconst findResult = await dbClient.executeQuery(findOperation);\n(0, chai_1.expect)(findResult.rows[0].name).to.equal('Updated MongoDB User');\n(0, chai_1.expect)(findResult.rows[0].updatedAt).to.exist;",
                  "err": {},
                  "uuid": "9ba94927-c998-4d2a-9d09-97861b3802f0",
                  "parentUUID": "7ae9be57-e83f-4dfc-92d0-035a01afdbcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle aggregation queries",
                  "fullTitle": "Database Integration Testing MongoDB Integration should handle aggregation queries",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\nconst aggregationOperation = JSON.stringify({\n    collection: 'users',\n    method: 'aggregate',\n    query: [\n        { $match: { name: { $regex: 'MongoDB', $options: 'i' } } },\n        { $group: { _id: '$metadata.source', count: { $sum: 1 } } },\n        { $sort: { count: -1 } }\n    ]\n});\nconst result = await dbClient.executeQuery(aggregationOperation);\n(0, chai_1.expect)(result.rows).to.be.an('array');\n(0, chai_1.expect)(result.executionTime).to.be.a('number');\nconsole.log(`Aggregation completed in ${result.executionTime}ms`);",
                  "err": {
                    "message": "AssertionError: expected undefined to be an array",
                    "estack": "AssertionError: expected undefined to be an array\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:263:33)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "94f37898-4d1c-4d94-b89f-b66d777cddb8",
                  "parentUUID": "7ae9be57-e83f-4dfc-92d0-035a01afdbcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0032cf35-3062-4dc5-85e3-2d67d8cfcbd1",
                "94f37898-4d1c-4d94-b89f-b66d777cddb8"
              ],
              "pending": [
                "9ba94927-c998-4d2a-9d09-97861b3802f0"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ba16c418-d7a1-4bfc-8abf-fb84b78a2e07",
              "title": "Cross-Database Validation",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate data consistency across multiple databases",
                  "fullTitle": "Database Integration Testing Cross-Database Validation should validate data consistency across multiple databases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This would test scenarios where data must be consistent across different databases\n// For example, user data in PostgreSQL and session data in MongoDB\nconst validations = [\n    {\n        client: 'postgres',\n        table: 'users',\n        conditions: { active: true },\n        expectedCount: 3\n    }\n];\n// Add MongoDB validation if available\ntry {\n    index_1.restified.getDatabaseClient('mongodb');\n    validations.push({\n        client: 'mongodb',\n        table: 'sessions', // collection\n        conditions: { active: true },\n        expectedCount: 3\n    });\n}\ncatch {\n    // MongoDB not available, skip\n}\nif (validations.length > 1) {\n    const result = await index_1.restified.validateDatabaseState(validations);\n    (0, chai_1.expect)(result.success).to.be.a('boolean');\n    (0, chai_1.expect)(result.results).to.have.length(validations.length);\n}",
                  "err": {},
                  "uuid": "f96ada7d-479c-4c21-b00e-9aff190c6cbf",
                  "parentUUID": "ba16c418-d7a1-4bfc-8abf-fb84b78a2e07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f96ada7d-479c-4c21-b00e-9aff190c6cbf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d7ff47c5-118c-498c-8c30-81a587616178",
              "title": "Database Health Checks",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should perform health checks on all database connections",
                  "fullTitle": "Database Integration Testing Database Health Checks should perform health checks on all database connections",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const connections = ['postgres', 'mongodb'];\nfor (const connectionName of connections) {\n    try {\n        const dbClient = index_1.restified.getDatabaseClient(connectionName);\n        const health = await dbClient.healthCheck();\n        (0, chai_1.expect)(health.healthy).to.be.a('boolean');\n        (0, chai_1.expect)(health.latency).to.be.a('number');\n        if (health.healthy) {\n            (0, chai_1.expect)(health.latency).to.be.greaterThan(0);\n            console.log(`${connectionName} health check: ${health.latency}ms`);\n        }\n        else {\n            console.log(`${connectionName} health check failed: ${health.error}`);\n        }\n    }\n    catch (error) {\n        console.log(`${connectionName} connection not available`);\n    }\n}",
                  "err": {},
                  "uuid": "3536493f-d699-47e3-9a68-39d323462b89",
                  "parentUUID": "d7ff47c5-118c-498c-8c30-81a587616178",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3536493f-d699-47e3-9a68-39d323462b89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8038603f-0d50-4717-b2c1-74e42bf249ef",
              "title": "Test Data Management",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should seed and cleanup test data",
                  "fullTitle": "Database Integration Testing Test Data Management should seed and cleanup test data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    const dbClient = index_1.restified.getDatabaseClient('postgres');\n    // Seed test data\n    const testData = [\n        { name: 'Test User 1', email: 'test1@example.com', active: true },\n        { name: 'Test User 2', email: 'test2@example.com', active: true },\n        { name: 'Test User 3', email: 'test3@example.com', active: false }\n    ];\n    await dbClient.seedTestData('test_users', testData);\n    // Validate data was seeded\n    const count = await dbClient.validateCount('test_users', 3, { active: true });\n    (0, chai_1.expect)(count).to.be.true;\n    // Cleanup test data\n    await dbClient.cleanupTestData('test_users', { email: { $like: '%@example.com' } });\n    console.log('Test data seeding and cleanup completed');\n}\ncatch (error) {\n    console.log('Test data management skipped - table not available');\n}",
                  "err": {},
                  "uuid": "13147136-be69-4ce4-ba9f-6e22c7c0d0c1",
                  "parentUUID": "8038603f-0d50-4717-b2c1-74e42bf249ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13147136-be69-4ce4-ba9f-6e22c7c0d0c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "121b1db5-c1ab-49c6-883c-201ef0621709",
          "title": "Error Handling and Resilience Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\error-handling.ts",
          "file": "\\examples\\advanced\\error-handling.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Error Handling and Resilience Example\"",
              "fullTitle": "Error Handling and Resilience Example \"after all\" hook in \"Error Handling and Resilience Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "3075281c-c701-49ef-9c51-8aaddb4347a1",
              "parentUUID": "121b1db5-c1ab-49c6-883c-201ef0621709",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should handle 404 errors gracefully",
              "fullTitle": "Error Handling and Resilience Example should handle 404 errors gracefully",
              "timedOut": false,
              "duration": 1125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/posts/9999')\n    .execute();\nawait response\n    .statusCode(404)\n    .execute();",
              "err": {},
              "uuid": "6d85758d-a5d4-4e69-91cd-9fb08da50ebd",
              "parentUUID": "121b1db5-c1ab-49c6-883c-201ef0621709",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle network timeouts with retry",
              "fullTitle": "Error Handling and Resilience Example should handle network timeouts with retry",
              "timedOut": false,
              "duration": 4001,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Configure client with short timeout for demonstration\nsrc_1.restified.createClient('timeout-test', {\n    baseURL: 'https://httpbin.org',\n    timeout: 1000 // Very short timeout\n});\ntry {\n    const response = await src_1.restified\n        .given()\n        .useClient('timeout-test')\n        .when()\n        .get('/delay/2') // This will likely timeout and retry\n        .execute();\n    await response\n        .statusCode(200)\n        .execute();\n}\ncatch (error) {\n    // Expected to fail due to timeout, but should show retry attempts\n    console.log('Request failed after retries as expected');\n}",
              "err": {},
              "uuid": "fdfe22fb-f018-4955-b478-77f7e42ebcce",
              "parentUUID": "121b1db5-c1ab-49c6-883c-201ef0621709",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate error response structure",
              "fullTitle": "Error Handling and Resilience Example should validate error response structure",
              "timedOut": false,
              "duration": 1921,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .when()\n    .get('/status/500')\n    .execute();\nawait response\n    .statusCode(500)\n    .execute();",
              "err": {},
              "uuid": "5fcd4c36-22ea-43f8-957a-44bbbc208d1d",
              "parentUUID": "121b1db5-c1ab-49c6-883c-201ef0621709",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle malformed JSON responses",
              "fullTitle": "Error Handling and Resilience Example should handle malformed JSON responses",
              "timedOut": false,
              "duration": 2487,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test against an endpoint that returns plain text instead of JSON\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .when()\n    .get('/html')\n    .execute();\nawait response\n    .statusCode(200)\n    .header('content-type')\n    .custom((response) => {\n    return response.headers['content-type'].includes('text/html');\n}, 'Response should be HTML')\n    .execute();",
              "err": {},
              "uuid": "3aec8a90-8539-4253-be80-28068a7c5d40",
              "parentUUID": "121b1db5-c1ab-49c6-883c-201ef0621709",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test API rate limiting behavior",
              "fullTitle": "Error Handling and Resilience Example should test API rate limiting behavior",
              "timedOut": false,
              "duration": 1984,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Make multiple rapid requests to test rate limiting\n// Note: This is just for demonstration - real rate limiting would need appropriate endpoint\nconst requests = [];\nfor (let i = 0; i < 3; i++) {\n    const request = src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/posts/1')\n        .execute();\n    requests.push(request);\n}\nconst responses = await Promise.all(requests);\n// Verify all requests succeeded (JSONPlaceholder doesn't have rate limiting)\nfor (const response of responses) {\n    await response\n        .statusCode(200)\n        .execute();\n}",
              "err": {},
              "uuid": "90fd4402-99bd-4bc2-97d4-ce67c7b05b0c",
              "parentUUID": "121b1db5-c1ab-49c6-883c-201ef0621709",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle authentication errors",
              "fullTitle": "Error Handling and Resilience Example should handle authentication errors",
              "timedOut": false,
              "duration": 3064,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .bearerToken('invalid-token')\n    .when()\n    .get('/bearer')\n    .execute();\n// httpbin.org /bearer endpoint doesn't actually validate tokens\n// So this will pass, but in real scenarios you'd test for 401\nawait response\n    .statusCode(200)\n    .execute();",
              "err": {},
              "uuid": "4c1f2470-42cf-4a2f-b04a-8420779e5222",
              "parentUUID": "121b1db5-c1ab-49c6-883c-201ef0621709",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test request payload validation errors",
              "fullTitle": "Error Handling and Resilience Example should test request payload validation errors",
              "timedOut": false,
              "duration": 982,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .contentType('application/json')\n    .when()\n    .post('/posts', {\n    // Missing required fields to simulate validation error\n    invalidField: 'test'\n})\n    .execute();\n// JSONPlaceholder is lenient, but real APIs would return validation errors\nawait response\n    .statusCode(201) // JSONPlaceholder always returns 201 for POST\n    .execute();",
              "err": {},
              "uuid": "4b075daf-428b-4168-adbc-6a2c9a88f215",
              "parentUUID": "121b1db5-c1ab-49c6-883c-201ef0621709",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d85758d-a5d4-4e69-91cd-9fb08da50ebd",
            "fdfe22fb-f018-4955-b478-77f7e42ebcce",
            "5fcd4c36-22ea-43f8-957a-44bbbc208d1d",
            "3aec8a90-8539-4253-be80-28068a7c5d40",
            "90fd4402-99bd-4bc2-97d4-ce67c7b05b0c",
            "4c1f2470-42cf-4a2f-b04a-8420779e5222",
            "4b075daf-428b-4168-adbc-6a2c9a88f215"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15564,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "cef4a4e7-9dcd-407d-ac9e-6c07ce8e14e5",
          "title": "GraphQL API Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
          "file": "\\examples\\advanced\\graphql-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL API Testing\"",
              "fullTitle": "GraphQL API Testing \"before all\" hook in \"GraphQL API Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create GraphQL client\nindex_1.restified.createGraphQLClient('github', {\n    endpoint: 'https://api.github.com/graphql',\n    headers: {\n        'Authorization': 'Bearer {{$env.GITHUB_TOKEN}}',\n        'User-Agent': 'RestifiedTS-GraphQL-Test'\n    },\n    timeout: 15000\n});\n// Set test variables\nindex_1.restified.setGlobalVariable('owner', 'facebook');\nindex_1.restified.setGlobalVariable('repo', 'react');",
              "err": {},
              "uuid": "d7ea06e2-c61c-452e-aa57-a2fa850614ea",
              "parentUUID": "cef4a4e7-9dcd-407d-ac9e-6c07ce8e14e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GraphQL API Testing\"",
              "fullTitle": "GraphQL API Testing \"after all\" hook in \"GraphQL API Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "5d7f1cb1-a0c1-4c59-a5d8-8dbea8b0e161",
              "parentUUID": "cef4a4e7-9dcd-407d-ac9e-6c07ce8e14e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "93d84bdf-ca43-4a8c-8fb4-1d4a96761c0d",
              "title": "GraphQL Queries",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should execute basic repository query",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should execute basic repository query",
                  "timedOut": false,
                  "duration": 3177,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst query = `\n        query GetRepository($owner: String!, $name: String!) {\n          repository(owner: $owner, name: $name) {\nname\ndescription\nstargazerCount\nforkCount\nlanguage {\n  name\n}\nowner {\n  login\n}\n          }\n        }\n      `;\nconst response = await client.query(query, {\n    owner: '{{owner}}',\n    name: '{{repo}}'\n});\n// Validate GraphQL response structure\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data).to.exist;\n(0, chai_1.expect)(response.data.errors).to.not.exist;\nconst repository = response.data.data.repository;\n(0, chai_1.expect)(repository.name).to.equal('react');\n(0, chai_1.expect)(repository.owner.login).to.equal('facebook');\n(0, chai_1.expect)(repository.stargazerCount).to.be.a('number');\n(0, chai_1.expect)(repository.stargazerCount).to.be.greaterThan(100000);\n// Extract repository data\nindex_1.restified.setGlobalVariable('repoStars', repository.stargazerCount);\nindex_1.restified.setGlobalVariable('repoDescription', repository.description);",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:54:24)",
                    "diff": null
                  },
                  "uuid": "f279ee2b-0be5-4d11-9791-9f29145c29c6",
                  "parentUUID": "93d84bdf-ca43-4a8c-8fb4-1d4a96761c0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle GraphQL variables and fragments",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should handle GraphQL variables and fragments",
                  "timedOut": false,
                  "duration": 2994,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst query = `\n        fragment RepositoryInfo on Repository {\n          name\n          description\n          stargazerCount\n          issues(states: OPEN) {\ntotalCount\n          }\n          pullRequests(states: OPEN) {\ntotalCount\n          }\n        }\n\n        query GetRepositoryDetails($owner: String!, $name: String!) {\n          repository(owner: $owner, name: $name) {\n...RepositoryInfo\nlanguages(first: 5) {\n  edges {\n    node {\n      name\n    }\n    size\n  }\n}\n          }\n        }\n      `;\nconst response = await client.query(query, {\n    owner: '{{owner}}',\n    name: '{{repo}}'\n});\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data.repository.languages.edges).to.be.an('array');\n(0, chai_1.expect)(response.data.data.repository.issues.totalCount).to.be.a('number');\n(0, chai_1.expect)(response.data.data.repository.pullRequests.totalCount).to.be.a('number');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:106:24)",
                    "diff": null
                  },
                  "uuid": "177c9946-4964-4ee0-aedd-863f0055de09",
                  "parentUUID": "93d84bdf-ca43-4a8c-8fb4-1d4a96761c0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate GraphQL errors",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should validate GraphQL errors",
                  "timedOut": false,
                  "duration": 2955,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\n// Invalid query - missing required field\nconst invalidQuery = `\n        query InvalidQuery {\n          repository {\nname\n          }\n        }\n      `;\nconst response = await client.query(invalidQuery);\n(0, chai_1.expect)(response.status).to.equal(200); // GraphQL returns 200 even for errors\n(0, chai_1.expect)(response.data.errors).to.exist;\n(0, chai_1.expect)(response.data.errors).to.be.an('array');\n(0, chai_1.expect)(response.data.errors[0].message).to.include('Field \\'repository\\' of type \\'Repository\\' must have a selection of subfields');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:129:24)",
                    "diff": null
                  },
                  "uuid": "d891a36e-69e4-4dec-b42c-253bb28ab926",
                  "parentUUID": "93d84bdf-ca43-4a8c-8fb4-1d4a96761c0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f279ee2b-0be5-4d11-9791-9f29145c29c6",
                "177c9946-4964-4ee0-aedd-863f0055de09",
                "d891a36e-69e4-4dec-b42c-253bb28ab926"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9126,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "cd193dad-27ee-4b2c-a54e-1df8256550b6",
              "title": "GraphQL Introspection",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should introspect GraphQL schema",
                  "fullTitle": "GraphQL API Testing GraphQL Introspection should introspect GraphQL schema",
                  "timedOut": false,
                  "duration": 2935,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst response = await client.introspect();\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data.__schema).to.exist;\n(0, chai_1.expect)(response.data.data.__schema.types).to.be.an('array');\n(0, chai_1.expect)(response.data.data.__schema.queryType.name).to.equal('Query');\n// Find Repository type\nconst repositoryType = response.data.data.__schema.types.find((type) => type.name === 'Repository');\n(0, chai_1.expect)(repositoryType).to.exist;\n(0, chai_1.expect)(repositoryType.fields).to.be.an('array');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:142:24)",
                    "diff": null
                  },
                  "uuid": "b1b401d4-0b5c-47bd-977f-88889baf0264",
                  "parentUUID": "cd193dad-27ee-4b2c-a54e-1df8256550b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b1b401d4-0b5c-47bd-977f-88889baf0264"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2935,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c62ec1cc-892a-43f9-a416-d3237dac28c1",
              "title": "GraphQL Query Validation",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate query syntax",
                  "fullTitle": "GraphQL API Testing GraphQL Query Validation should validate query syntax",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst validQuery = `\n        query ValidQuery($owner: String!) {\n          repository(owner: $owner, name: \"react\") {\nname\n          }\n        }\n      `;\nconst validation = client.validateQuery(validQuery);\n(0, chai_1.expect)(validation.valid).to.be.true;\n(0, chai_1.expect)(validation.errors).to.be.empty;",
                  "err": {},
                  "uuid": "9dec4e2c-a083-474f-9117-37954f1268b9",
                  "parentUUID": "c62ec1cc-892a-43f9-a416-d3237dac28c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invalid query syntax",
                  "fullTitle": "GraphQL API Testing GraphQL Query Validation should detect invalid query syntax",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst invalidQuery = `\n        query InvalidQuery {\n          repository(owner: $owner, name: \"react\" {\nname\n          }\n        }\n      `;\nconst validation = client.validateQuery(invalidQuery);\n(0, chai_1.expect)(validation.valid).to.be.false;\n(0, chai_1.expect)(validation.errors).to.not.be.empty;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (examples\\advanced\\graphql-testing.ts:187:37)\n    at processImmediate (node:internal/timers:485:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "3803f6df-ae7a-43e4-b997-46f18f843786",
                  "parentUUID": "c62ec1cc-892a-43f9-a416-d3237dac28c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9dec4e2c-a083-474f-9117-37954f1268b9"
              ],
              "failures": [
                "3803f6df-ae7a-43e4-b997-46f18f843786"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1376ab07-2eb5-4791-8d40-4c3d0afb5fa6",
              "title": "Performance Testing",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure GraphQL query performance",
                  "fullTitle": "GraphQL API Testing Performance Testing should measure GraphQL query performance",
                  "timedOut": false,
                  "duration": 2944,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst startTime = Date.now();\nconst query = `\n        query QuickQuery {\n          viewer {\nlogin\n          }\n        }\n      `;\nconst response = await client.query(query);\nconst endTime = Date.now();\nconst duration = endTime - startTime;\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(duration).to.be.lessThan(5000); // Should complete within 5 seconds\nconsole.log(`GraphQL query completed in ${duration}ms`);",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:206:24)",
                    "diff": null
                  },
                  "uuid": "1c1f0fff-17f2-4a93-b26e-4a84094a3b3d",
                  "parentUUID": "1376ab07-2eb5-4791-8d40-4c3d0afb5fa6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1c1f0fff-17f2-4a93-b26e-4a84094a3b3d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2944,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "50f23e7a-b7c7-44fc-8c30-0d406a64f1c2",
          "title": "JSON Fixture Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
          "file": "\\examples\\advanced\\json-fixture-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"JSON Fixture Testing\"",
              "fullTitle": "JSON Fixture Testing \"before all\" hook in \"JSON Fixture Testing\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup test fixtures directory\nconst fixturesDir = path.join(__dirname, 'fixtures');\nif (!fs.existsSync(fixturesDir)) {\n    fs.mkdirSync(fixturesDir, { recursive: true });\n}\n// Create sample fixture files\nconst userFixture = {\n    id: \"{{userId}}\",\n    name: \"{{$faker.person.fullName}}\",\n    email: \"{{$faker.internet.email}}\",\n    age: \"{{$random.number(18,65)}}\",\n    address: {\n        street: \"{{$faker.address.streetAddress}}\",\n        city: \"{{$faker.address.city}}\",\n        country: \"{{country}}\",\n        coordinates: {\n            lat: \"{{$faker.address.latitude}}\",\n            lng: \"{{$faker.address.longitude}}\"\n        }\n    },\n    preferences: {\n        theme: \"{{userTheme}}\",\n        notifications: true,\n        language: \"{{$env.DEFAULT_LANGUAGE}}\",\n        metadata: {\n            createdAt: \"{{$date.now}}\",\n            version: \"{{$util.guid}}\",\n            source: \"restifiedts-test\"\n        }\n    },\n    tags: [\"{{tag1}}\", \"{{tag2}}\", \"premium\"]\n};\nconst orderFixture = {\n    orderId: \"{{$random.uuid}}\",\n    customerId: \"{{userId}}\",\n    items: [\n        {\n            productId: \"{{productId1}}\",\n            name: \"{{$faker.commerce.product}}\",\n            price: \"{{$random.number(10,1000)}}\",\n            quantity: \"{{quantity1}}\"\n        },\n        {\n            productId: \"{{productId2}}\",\n            name: \"{{$faker.commerce.product}}\",\n            price: \"{{$random.number(10,1000)}}\",\n            quantity: \"{{quantity2}}\"\n        }\n    ],\n    shipping: {\n        address: \"{{shippingAddress}}\",\n        method: \"{{shippingMethod}}\",\n        trackingId: \"{{$util.base64encode(track-{{$random.uuid}})}}\"\n    },\n    payment: {\n        method: \"credit_card\",\n        cardLast4: \"{{$random.number(1000,9999)}}\",\n        amount: \"{{totalAmount}}\",\n        currency: \"{{$env.DEFAULT_CURRENCY}}\",\n        transactionId: \"{{$util.guid}}\"\n    },\n    timestamps: {\n        created: \"{{$date.now}}\",\n        updated: \"{{$date.now}}\",\n        estimatedDelivery: \"{{deliveryDate}}\"\n    }\n};\n// Write fixtures to files\nfs.writeFileSync(path.join(fixturesDir, 'user.json'), JSON.stringify(userFixture, null, 2));\nfs.writeFileSync(path.join(fixturesDir, 'order.json'), JSON.stringify(orderFixture, null, 2));\n// Set up global variables\nindex_1.restified.setGlobalVariables({\n    userId: 'user-12345',\n    country: 'United States',\n    userTheme: 'dark',\n    tag1: 'vip',\n    tag2: 'beta-tester'\n});\n// Set up environment variables for testing\nprocess.env.DEFAULT_LANGUAGE = 'en-US';\nprocess.env.DEFAULT_CURRENCY = 'USD';",
              "err": {},
              "uuid": "862e5cf0-cf56-4c1e-9d51-7aba60680f87",
              "parentUUID": "50f23e7a-b7c7-44fc-8c30-0d406a64f1c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"JSON Fixture Testing\"",
              "fullTitle": "JSON Fixture Testing \"after all\" hook in \"JSON Fixture Testing\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();\n// Cleanup fixtures\nconst fixturesDir = path.join(__dirname, 'fixtures');\nif (fs.existsSync(fixturesDir)) {\n    fs.rmSync(fixturesDir, { recursive: true, force: true });\n}",
              "err": {},
              "uuid": "e0e1e56b-96b3-40c4-8cfd-307186100f4d",
              "parentUUID": "50f23e7a-b7c7-44fc-8c30-0d406a64f1c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "13da4f12-f8db-4d88-8c5e-3aee683d6303",
              "title": "Basic JSON Variable Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve simple variables in JSON objects",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve simple variables in JSON objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    userId: '{{userId}}',\n    name: '{{userName}}',\n    active: true,\n    count: 42\n};\nindex_1.restified.setLocalVariable('userName', 'John Doe');\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.userId).to.equal('user-12345');\n(0, chai_1.expect)(resolved.name).to.equal('John Doe');\n(0, chai_1.expect)(resolved.active).to.be.true;\n(0, chai_1.expect)(resolved.count).to.equal(42);",
                  "err": {},
                  "uuid": "0a7b6f26-86c7-4125-856f-1dc23490595c",
                  "parentUUID": "13da4f12-f8db-4d88-8c5e-3aee683d6303",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve nested variables in complex objects",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve nested variables in complex objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    user: {\n        profile: {\n            id: '{{userId}}',\n            settings: {\n                theme: '{{userTheme}}',\n                lang: '{{$env.DEFAULT_LANGUAGE}}'\n            }\n        }\n    },\n    metadata: {\n        timestamp: '{{$date.timestamp}}',\n        uuid: '{{$random.uuid}}'\n    }\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.user.profile.id).to.equal('user-12345');\n(0, chai_1.expect)(resolved.user.profile.settings.theme).to.equal('dark');\n(0, chai_1.expect)(resolved.user.profile.settings.lang).to.equal('en-US');\n(0, chai_1.expect)(resolved.metadata.timestamp).to.be.a('string');\n(0, chai_1.expect)(resolved.metadata.uuid).to.match(/^[0-9a-f-]+$/);",
                  "err": {},
                  "uuid": "dc0bd795-4b52-4703-9236-a717fdac834d",
                  "parentUUID": "13da4f12-f8db-4d88-8c5e-3aee683d6303",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve variables in arrays",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve variables in arrays",
                  "timedOut": false,
                  "duration": 834,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    users: ['{{userId}}', '{{$random.uuid}}'],\n    tags: ['{{tag1}}', '{{tag2}}', 'static-tag'],\n    coordinates: ['{{$faker.address.latitude}}', '{{$faker.address.longitude}}']\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.users[0]).to.equal('user-12345');\n(0, chai_1.expect)(resolved.users[1]).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(resolved.tags).to.deep.equal(['vip', 'beta-tester', 'static-tag']);\n(0, chai_1.expect)(resolved.coordinates).to.have.length(2);",
                  "err": {},
                  "uuid": "380474da-532c-4791-83a8-4479628e3d67",
                  "parentUUID": "13da4f12-f8db-4d88-8c5e-3aee683d6303",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a7b6f26-86c7-4125-856f-1dc23490595c",
                "dc0bd795-4b52-4703-9236-a717fdac834d",
                "380474da-532c-4791-83a8-4479628e3d67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 834,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "5fcc521d-f79f-4857-b00f-1228d7ace423",
              "title": "Built-in Function Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve faker functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve faker functions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    name: '{{$faker.person.fullName}}',\n    email: '{{$faker.internet.email}}',\n    product: '{{$faker.commerce.product}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.name).to.be.a('string');\n(0, chai_1.expect)(resolved.email).to.include('@');\n(0, chai_1.expect)(resolved.product).to.be.a('string');",
                  "err": {},
                  "uuid": "544da798-2e27-4397-9be6-15746dd4ffe8",
                  "parentUUID": "5fcc521d-f79f-4857-b00f-1228d7ace423",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve random utility functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve random utility functions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    uuid: '{{$random.uuid}}',\n    number: '{{$random.number}}',\n    rangeNumber: '{{$random.number(1,10)}}',\n    string: '{{$random.string}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.uuid).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(parseInt(resolved.number)).to.be.a('number');\n(0, chai_1.expect)(parseInt(resolved.rangeNumber)).to.be.within(1, 10);\n(0, chai_1.expect)(resolved.string).to.be.a('string');",
                  "err": {},
                  "uuid": "cd9a2080-acc8-47b0-9523-51586820e4ee",
                  "parentUUID": "5fcc521d-f79f-4857-b00f-1228d7ace423",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve date and utility functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve date and utility functions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    now: '{{$date.now}}',\n    timestamp: '{{$date.timestamp}}',\n    today: '{{$date.today}}',\n    guid: '{{$util.guid}}',\n    encoded: '{{$util.base64encode(test-data)}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(new Date(resolved.now)).to.be.a('date');\n(0, chai_1.expect)(parseInt(resolved.timestamp)).to.be.a('number');\n(0, chai_1.expect)(resolved.today).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\n(0, chai_1.expect)(resolved.guid).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(resolved.encoded).to.be.a('string');",
                  "err": {},
                  "uuid": "2425f761-f2f5-4556-b3a6-6e300a51365e",
                  "parentUUID": "5fcc521d-f79f-4857-b00f-1228d7ace423",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "544da798-2e27-4397-9be6-15746dd4ffe8",
                "cd9a2080-acc8-47b0-9523-51586820e4ee",
                "2425f761-f2f5-4556-b3a6-6e300a51365e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "650d5748-8abc-4ac7-b82f-d3b0563cc258",
              "title": "JSON Fixture Loading",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load and resolve user fixture",
                  "fullTitle": "JSON Fixture Testing JSON Fixture Loading should load and resolve user fixture",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fixturePath = path.join(__dirname, 'fixtures', 'user.json');\nconst userData = index_1.restified.loadJsonFixture(fixturePath);\n(0, chai_1.expect)(userData.id).to.equal('user-12345');\n(0, chai_1.expect)(userData.name).to.be.a('string');\n(0, chai_1.expect)(userData.email).to.include('@');\n(0, chai_1.expect)(parseInt(userData.age)).to.be.within(18, 65);\n(0, chai_1.expect)(userData.address.country).to.equal('United States');\n(0, chai_1.expect)(userData.preferences.theme).to.equal('dark');\n(0, chai_1.expect)(userData.preferences.language).to.equal('en-US');\n(0, chai_1.expect)(userData.tags).to.deep.equal(['vip', 'beta-tester', 'premium']);",
                  "err": {},
                  "uuid": "6dd4dcd2-9154-4229-95f3-b5edaac74db4",
                  "parentUUID": "650d5748-8abc-4ac7-b82f-d3b0563cc258",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load and resolve order fixture with cross-references",
                  "fullTitle": "JSON Fixture Testing JSON Fixture Loading should load and resolve order fixture with cross-references",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Set local variables for order\nindex_1.restified.setLocalVariables({\n    productId1: 'prod-001',\n    productId2: 'prod-002',\n    quantity1: '2',\n    quantity2: '1',\n    shippingAddress: '123 Main St, City, State',\n    shippingMethod: 'express',\n    totalAmount: '149.99',\n    deliveryDate: '2024-01-15'\n});\nconst fixturePath = path.join(__dirname, 'fixtures', 'order.json');\nconst orderData = index_1.restified.loadJsonFixture(fixturePath);\n(0, chai_1.expect)(orderData.customerId).to.equal('user-12345'); // From global variable\n(0, chai_1.expect)(orderData.orderId).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(orderData.items).to.have.length(2);\n(0, chai_1.expect)(orderData.items[0].productId).to.equal('prod-001');\n(0, chai_1.expect)(orderData.items[0].quantity).to.equal('2');\n(0, chai_1.expect)(orderData.shipping.address).to.equal('123 Main St, City, State');\n(0, chai_1.expect)(orderData.payment.currency).to.equal('USD');\n(0, chai_1.expect)(orderData.payment.amount).to.equal('149.99');",
                  "err": {},
                  "uuid": "4ac9bf40-1ed3-4025-8af5-6ed2afb977d8",
                  "parentUUID": "650d5748-8abc-4ac7-b82f-d3b0563cc258",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dd4dcd2-9154-4229-95f3-b5edaac74db4",
                "4ac9bf40-1ed3-4025-8af5-6ed2afb977d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1a6c78a3-43cf-4839-b146-78f1fd0f3cb3",
              "title": "JSON String Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve variables in JSON strings",
                  "fullTitle": "JSON Fixture Testing JSON String Resolution should resolve variables in JSON strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonString = `{\n        \"userId\": \"{{userId}}\",\n        \"profile\": {\n          \"name\": \"{{$faker.person.fullName}}\",\n          \"settings\": {\n\"theme\": \"{{userTheme}}\",\n\"notifications\": true\n          }\n        },\n        \"timestamp\": \"{{$date.now}}\"\n      }`;\nconst resolved = index_1.restified.resolveJsonString(jsonString);\n(0, chai_1.expect)(resolved.userId).to.equal('user-12345');\n(0, chai_1.expect)(resolved.profile.name).to.be.a('string');\n(0, chai_1.expect)(resolved.profile.settings.theme).to.equal('dark');\n(0, chai_1.expect)(resolved.profile.settings.notifications).to.be.true;\n(0, chai_1.expect)(new Date(resolved.timestamp)).to.be.a('date');",
                  "err": {},
                  "uuid": "f01182a0-087c-47f5-a64c-c7c797c7903d",
                  "parentUUID": "1a6c78a3-43cf-4839-b146-78f1fd0f3cb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f01182a0-087c-47f5-a64c-c7c797c7903d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "149cf117-f976-4f5a-9fd2-493a76c4f937",
              "title": "API Testing with Dynamic Fixtures",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should use resolved fixtures in API requests",
                  "fullTitle": "JSON Fixture Testing API Testing with Dynamic Fixtures should use resolved fixtures in API requests",
                  "timedOut": false,
                  "duration": 1492,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create dynamic user data\nconst userTemplate = {\n    name: '{{$faker.person.fullName}}',\n    email: '{{$faker.internet.email}}',\n    age: '{{$random.number(18,65)}}',\n    preferences: {\n        theme: '{{userTheme}}',\n        language: '{{$env.DEFAULT_LANGUAGE}}'\n    }\n};\nconst userData = index_1.restified.resolveVariables(userTemplate);\n// Use in API request\nconst response = await index_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .post('/users', userData)\n    .execute();\nawait response\n    .statusCode(201)\n    .execute();\n// Extract and validate\n(0, chai_1.expect)(userData.name).to.be.a('string');\n(0, chai_1.expect)(userData.email).to.include('@');\n(0, chai_1.expect)(userData.preferences.theme).to.equal('dark');\n(0, chai_1.expect)(userData.preferences.language).to.equal('en-US');",
                  "err": {},
                  "uuid": "4d4b782a-8f7c-49a8-bfe7-6ea5815f54d9",
                  "parentUUID": "149cf117-f976-4f5a-9fd2-493a76c4f937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle complex nested fixture scenarios",
                  "fullTitle": "JSON Fixture Testing API Testing with Dynamic Fixtures should handle complex nested fixture scenarios",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Multi-level variable resolution\nindex_1.restified.setLocalVariable('baseUrl', 'https://api.example.com');\nindex_1.restified.setLocalVariable('version', 'v2');\nconst apiConfig = {\n    endpoints: {\n        users: '{{baseUrl}}/{{version}}/users',\n        orders: '{{baseUrl}}/{{version}}/orders/{{userId}}'\n    },\n    headers: {\n        'Authorization': 'Bearer {{authToken}}',\n        'User-Agent': 'RestifiedTS/{{$util.guid}}',\n        'X-Request-ID': '{{$random.uuid}}'\n    },\n    timeout: '{{requestTimeout}}'\n};\nindex_1.restified.setLocalVariables({\n    authToken: 'jwt-token-12345',\n    requestTimeout: '30000'\n});\nconst resolved = index_1.restified.resolveVariables(apiConfig);\n(0, chai_1.expect)(resolved.endpoints.users).to.equal('https://api.example.com/v2/users');\n(0, chai_1.expect)(resolved.endpoints.orders).to.equal('https://api.example.com/v2/orders/user-12345');\n(0, chai_1.expect)(resolved.headers.Authorization).to.equal('Bearer jwt-token-12345');\n(0, chai_1.expect)(resolved.headers['User-Agent']).to.include('RestifiedTS/');\n(0, chai_1.expect)(resolved.timeout).to.equal('30000');",
                  "err": {},
                  "uuid": "5b9a4dc0-021a-4f9a-8143-5872c819eab0",
                  "parentUUID": "149cf117-f976-4f5a-9fd2-493a76c4f937",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d4b782a-8f7c-49a8-bfe7-6ea5815f54d9",
                "5b9a4dc0-021a-4f9a-8143-5872c819eab0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1493,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ce6354e4-dd09-4e3e-a8cb-de1b612ad832",
          "title": "Multi-Client Integration Tests",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\multi-client.ts",
          "file": "\\examples\\advanced\\multi-client.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should use pre-configured API client with global authentication",
              "fullTitle": "Multi-Client Integration Tests should use pre-configured API client with global authentication",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'API Client Test');\n// Use the pre-configured API client (no setup needed!)\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .header('Authorization', `Bearer {{globalAuthToken}}`)\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.email', src_1.restified.getVariable('globalUserEmail'))\n    .extract('$.company.name', 'userCompany')\n    .execute();\nconsole.log('üè¢ User company:', src_1.restified.getVariable('userCompany'));",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:26:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:20:26)",
                "diff": null
              },
              "uuid": "bf57809b-a052-48f7-92ab-55c2b0f53928",
              "parentUUID": "ce6354e4-dd09-4e3e-a8cb-de1b612ad832",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use testing utilities client with global config",
              "fullTitle": "Multi-Client Integration Tests should use testing utilities client with global config",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Test Utils Client');\n// Use the pre-configured test utilities client\n// Common headers are already included in the client configuration\nconst validationResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .header('X-Global-Auth-Token', '{{globalAuthToken}}')\n    .when()\n    .get('/headers')\n    .execute();\nawait validationResponse\n    .statusCode(200)\n    .jsonPath('$.headers.X-Test-Suite', src_1.restified.getVariable('testSuite'))\n    .jsonPath('$.headers.X-Environment', src_1.restified.getVariable('testEnvironment'))\n    .custom((response) => {\n    return response.data.headers['X-Global-Auth-Token'] === src_1.restified.getVariable('globalAuthToken');\n}, 'Should have correct global auth token in headers')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:49:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:43:32)",
                "diff": null
              },
              "uuid": "f0c931e3-1c83-400f-a300-d70304e93596",
              "parentUUID": "ce6354e4-dd09-4e3e-a8cb-de1b612ad832",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate cross-service workflow using global data",
              "fullTitle": "Multi-Client Integration Tests should demonstrate cross-service workflow using global data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!test_utils_1.GlobalTestUtils.shouldRunIntegrationTests()) {\n    console.log('‚è≠Ô∏è  Skipping integration test');\n    return;\n}\ntest_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Cross-Service Workflow');\n// Step 1: Use API service to get additional user data\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/2')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.name', 'workflowUserName')\n    .extract('$.website', 'workflowWebsite')\n    .execute();\n// Step 2: Use extracted data with test utilities service\n// Common headers are already included in the client configuration\nconst workflowResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .when()\n    .post('/post', {\n    message: `User {{workflowUserName}} from {{workflowWebsite}}`,\n    globalUser: '{{globalUserEmail}}',\n    environment: '{{testEnvironment}}',\n    timestamp: new Date().toISOString()\n})\n    .execute();\nawait workflowResponse\n    .statusCode(200)\n    .jsonPath('$.json.globalUser', src_1.restified.getVariable('globalUserEmail'))\n    .jsonPath('$.json.environment', src_1.restified.getVariable('testEnvironment'))\n    .execute();\nconsole.log('‚úÖ Cross-service workflow completed successfully');",
              "err": {},
              "uuid": "4833da71-db57-484b-aa61-1cf3b1a9093b",
              "parentUUID": "ce6354e4-dd09-4e3e-a8cb-de1b612ad832",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle service errors with global error patterns",
              "fullTitle": "Multi-Client Integration Tests should handle service errors with global error patterns",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Error Handling');\n// Test API service 404 error\n// Common headers are already included in the client configuration\nconst apiErrorResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/99999')\n    .execute();\nawait apiErrorResponse\n    .statusCode(404)\n    .execute();\n// Test utilities service 500 error\n// Common headers are already included in the client configuration\nconst utilsErrorResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .when()\n    .get('/status/500')\n    .execute();\nawait utilsErrorResponse\n    .statusCode(500)\n    .execute();\nconsole.log('‚úÖ Error handling validated across all services');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:117:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:112:30)",
                "diff": null
              },
              "uuid": "91c03d9d-81fe-4db0-9e53-7600f4a46970",
              "parentUUID": "ce6354e4-dd09-4e3e-a8cb-de1b612ad832",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment-aware testing",
              "fullTitle": "Multi-Client Integration Tests should demonstrate environment-aware testing",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Environment Testing');\nconst environment = src_1.restified.getVariable('testEnvironment');\nconst apiVersion = src_1.restified.getVariable('apiVersion');\n// Test shows how same test adapts to different environments\nconst environmentResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .header('X-Environment', environment)\n    .header('X-API-Version', apiVersion)\n    .header('X-Global-User', '{{globalUserEmail}}')\n    .when()\n    .get('/posts/1')\n    .execute();\nawait environmentResponse\n    .statusCode(200)\n    .jsonPath('$.id', 1)\n    .custom((response) => {\n    const hasTitle = response.data.hasOwnProperty('title');\n    const hasBody = response.data.hasOwnProperty('body');\n    return hasTitle && hasBody;\n}, 'Response should have expected structure for all environments')\n    .execute();\nconsole.log(`‚úÖ Environment-specific test completed for: ${environment}`);",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:154:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:146:33)",
                "diff": null
              },
              "uuid": "b12a6bf4-8fd0-4b5c-92c5-ec4bd75f6f90",
              "parentUUID": "ce6354e4-dd09-4e3e-a8cb-de1b612ad832",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4833da71-db57-484b-aa61-1cf3b1a9093b"
          ],
          "failures": [
            "bf57809b-a052-48f7-92ab-55c2b0f53928",
            "f0c931e3-1c83-400f-a300-d70304e93596",
            "91c03d9d-81fe-4db0-9e53-7600f4a46970",
            "b12a6bf4-8fd0-4b5c-92c5-ec4bd75f6f90"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "43233fbc-61d3-4cf4-9c6d-c14746e07979",
          "title": "Response Store Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\response-store.ts",
          "file": "\\examples\\advanced\\response-store.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should store and retrieve responses using global client",
              "fullTitle": "Response Store Example should store and retrieve responses using global client",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Response Store', 'Store and Retrieve');\n// Use pre-configured API client from global setup\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api') // Global client\n    .when()\n    .get('/users/{{globalUserId}}') // Global user ID\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .execute();\n// Store the response with a custom key\nsrc_1.restified.storeResponse('user1-data');\n// Later, retrieve the stored response\nconst storedResponse = src_1.restified.getStoredResponse('user1-data');\n// Verify the stored response exists and has expected data\nif (storedResponse) {\n    console.log('Retrieved stored response for user:', storedResponse.data.name);\n    // You can perform additional assertions on stored responses\n    await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/users/1')\n        .execute()\n        .then(response => response\n        .statusCode(200)\n        .custom((response) => {\n        return response.data.id === storedResponse.data.id;\n    }, 'Current response should match stored response ID')\n        .execute());\n}",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\advanced\\response-store.ts:23:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\advanced\\response-store.ts:18:26)",
                "diff": null
              },
              "uuid": "e1bd2bbf-239c-4a10-b922-5d7646fccc91",
              "parentUUID": "43233fbc-61d3-4cf4-9c6d-c14746e07979",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle multiple stored responses",
              "fullTitle": "Response Store Example should handle multiple stored responses",
              "timedOut": false,
              "duration": 5563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Store responses for multiple users\nconst users = [1, 2, 3];\nfor (const userId of users) {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get(`/users/${userId}`)\n        .execute();\n    await response.statusCode(200).execute();\n    // Store each response with a unique key\n    src_1.restified.storeResponse(`user-${userId}`);\n}\n// Retrieve and validate all stored responses\nfor (const userId of users) {\n    const storedResponse = src_1.restified.getStoredResponse(`user-${userId}`);\n    if (storedResponse) {\n        console.log(`User ${userId} stored data:`, {\n            id: storedResponse.data.id,\n            name: storedResponse.data.name,\n            email: storedResponse.data.email\n        });\n        // Validate stored response data\n        if (storedResponse.data.id !== userId) {\n            throw new Error(`Stored response ID mismatch for user ${userId}`);\n        }\n    }\n    else {\n        throw new Error(`No stored response found for user ${userId}`);\n    }\n}",
              "err": {},
              "uuid": "20771572-fa62-4cd6-b764-131106d41579",
              "parentUUID": "43233fbc-61d3-4cf4-9c6d-c14746e07979",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should compare current response with stored response",
              "fullTitle": "Response Store Example should compare current response with stored response",
              "timedOut": false,
              "duration": 1717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First, get and store user data\nconst initialResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait initialResponse.statusCode(200).execute();\nsrc_1.restified.storeResponse('initial-user-data');\n// Later, get the same data again\nconst currentResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait currentResponse.statusCode(200).execute();\n// Compare with stored response\nconst storedResponse = src_1.restified.getStoredResponse('initial-user-data');\nif (storedResponse) {\n    await currentResponse\n        .custom((response) => {\n        return JSON.stringify(response.data) === JSON.stringify(storedResponse.data);\n    }, 'Current response should match stored response')\n        .execute();\n    console.log('‚úÖ Response comparison successful - data is consistent');\n}",
              "err": {},
              "uuid": "5c72d6af-ce29-4faa-a6b3-f464e77a506b",
              "parentUUID": "43233fbc-61d3-4cf4-9c6d-c14746e07979",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate response store with POST operations",
              "fullTitle": "Response Store Example should demonstrate response store with POST operations",
              "timedOut": false,
              "duration": 1310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create a new post\nconst createResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .contentType('application/json')\n    .when()\n    .post('/posts', {\n    title: 'Test Post for Response Store',\n    body: 'This post is used to demonstrate response store functionality',\n    userId: 1\n})\n    .execute();\nawait createResponse\n    .statusCode(201)\n    .extract('$.id', 'createdPostId')\n    .execute();\n// Store the creation response\nsrc_1.restified.storeResponse('post-creation');\n// Use stored response data in subsequent tests\nconst storedCreation = src_1.restified.getStoredResponse('post-creation');\nif (storedCreation) {\n    console.log('Created post stored with ID:', storedCreation.data.id);\n    console.log('Stored post title:', storedCreation.data.title);\n    // Verify the stored response contains expected data\n    if (!storedCreation.data.title.includes('Test Post')) {\n        throw new Error('Stored response does not contain expected title');\n    }\n    // Use stored response data for validation\n    const postId = storedCreation.data.id;\n    console.log(`Using stored post ID ${postId} for further operations`);\n}",
              "err": {},
              "uuid": "09b3c440-05e4-46d7-a30f-c1aa8d5d5e93",
              "parentUUID": "43233fbc-61d3-4cf4-9c6d-c14746e07979",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle response store cleanup and management",
              "fullTitle": "Response Store Example should handle response store cleanup and management",
              "timedOut": false,
              "duration": 2693,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Store multiple responses\nconst responses = [];\nfor (let i = 1; i <= 3; i++) {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get(`/posts/${i}`)\n        .execute();\n    await response.statusCode(200).execute();\n    src_1.restified.storeResponse(`post-${i}`);\n    responses.push(`post-${i}`);\n}\n// Verify all responses are stored\nfor (const key of responses) {\n    const stored = src_1.restified.getStoredResponse(key);\n    if (!stored) {\n        throw new Error(`Response ${key} was not properly stored`);\n    }\n}\nconsole.log('‚úÖ All responses properly stored and retrieved');\n// Response store will be automatically cleaned up in the after hook\n// when restified.cleanup() is called",
              "err": {},
              "uuid": "7947b9a7-c76a-420b-96ca-97c614394b16",
              "parentUUID": "43233fbc-61d3-4cf4-9c6d-c14746e07979",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "20771572-fa62-4cd6-b764-131106d41579",
            "5c72d6af-ce29-4faa-a6b3-f464e77a506b",
            "09b3c440-05e4-46d7-a30f-c1aa8d5d5e93",
            "7947b9a7-c76a-420b-96ca-97c614394b16"
          ],
          "failures": [
            "e1bd2bbf-239c-4a10-b922-5d7646fccc91"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11285,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "0656dedb-9483-4141-832d-7075ab86c532",
          "title": "Schema Validation Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\schema-validation.ts",
          "file": "\\examples\\advanced\\schema-validation.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Schema Validation Example\"",
              "fullTitle": "Schema Validation Example \"after all\" hook in \"Schema Validation Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "d9112405-472f-4482-9b03-1733f4660911",
              "parentUUID": "0656dedb-9483-4141-832d-7075ab86c532",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should validate user object against JSON schema using global client",
              "fullTitle": "Schema Validation Example should validate user object against JSON schema using global client",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Schema Validation', 'User Object Validation');\nconst response = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured global client\n    .when()\n    .get('/users/{{globalUserId}}') // Use global user ID\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonSchema(userSchema)\n    .jsonPath('$.name')\n    .jsonPath('$.email')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\advanced\\schema-validation.ts:58:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\advanced\\schema-validation.ts:53:22)",
                "diff": null
              },
              "uuid": "2ce9e9cd-b3b2-4d15-b512-7f5b8f0f4da1",
              "parentUUID": "0656dedb-9483-4141-832d-7075ab86c532",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate array of posts against JSON schema",
              "fullTitle": "Schema Validation Example should validate array of posts against JSON schema",
              "timedOut": false,
              "duration": 1254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Define JSON schema for array of posts\nconst postsArraySchema = {\n    type: 'array',\n    items: {\n        type: 'object',\n        required: ['id', 'title', 'body', 'userId'],\n        properties: {\n            id: { type: 'number' },\n            title: { type: 'string' },\n            body: { type: 'string' },\n            userId: { type: 'number' }\n        }\n    },\n    minItems: 1,\n    maxItems: 100\n};\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/posts')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonSchema(postsArraySchema)\n    .jsonPath('$[0].id')\n    .jsonPath('$[0].title')\n    .custom((response) => {\n    return Array.isArray(response.data) && response.data.length > 0;\n}, 'Response should be a non-empty array')\n    .execute();",
              "err": {},
              "uuid": "7f53ad3c-a8ac-4d6e-90ac-f3db4e317095",
              "parentUUID": "0656dedb-9483-4141-832d-7075ab86c532",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle schema validation failure",
              "fullTitle": "Schema Validation Example should handle schema validation failure",
              "timedOut": false,
              "duration": 610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const strictUserSchema = {\n    type: 'object',\n    required: ['id', 'name', 'username', 'email', 'nonExistentField'],\n    properties: {\n        id: { type: 'number' },\n        name: { type: 'string' },\n        username: { type: 'string' },\n        email: { type: 'string', format: 'email' },\n        nonExistentField: { type: 'string' }\n    }\n};\ntry {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/users/1')\n        .execute();\n    await response\n        .statusCode(200)\n        .jsonSchema(strictUserSchema)\n        .execute();\n    throw new Error('Should have failed schema validation');\n}\ncatch (error) {\n    // Expected to fail due to missing required field\n    console.log('Schema validation correctly failed as expected');\n}",
              "err": {},
              "uuid": "b680f895-eff3-4bfa-aeec-4ba0bbb54cb4",
              "parentUUID": "0656dedb-9483-4141-832d-7075ab86c532",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f53ad3c-a8ac-4d6e-90ac-f3db4e317095",
            "b680f895-eff3-4bfa-aeec-4ba0bbb54cb4"
          ],
          "failures": [
            "2ce9e9cd-b3b2-4d15-b512-7f5b8f0f4da1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1866,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "52273cec-0b5c-478b-aa12-2563beef5465",
          "title": "Variable Store Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\variable-store.ts",
          "file": "\\examples\\advanced\\variable-store.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Variable Store Example\"",
              "fullTitle": "Variable Store Example \"before each\" hook in \"Variable Store Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear any existing local variables for clean tests\nsrc_1.restified.clearLocalVariables();",
              "err": {},
              "uuid": "a8557e4e-f12a-4605-a880-0313adeebf73",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Variable Store Example\"",
              "fullTitle": "Variable Store Example \"after all\" hook in \"Variable Store Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "416f2ee2-0622-4141-90ea-1d345dc3b010",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should demonstrate global variable management",
              "fullTitle": "Variable Store Example should demonstrate global variable management",
              "timedOut": false,
              "duration": 1151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set global variables\nsrc_1.restified.setGlobalVariable('expectedUserId', 1);\nsrc_1.restified.setGlobalVariable('testEnvironment', 'staging');\nsrc_1.restified.setGlobalVariable('requestSource', 'automated-test');\n// Set multiple global variables at once\nsrc_1.restified.setGlobalVariables({\n    'company': 'Restified Corp',\n    'version': '1.0.0',\n    'testSuite': 'variable-management'\n});\n// Make request and use global variables in headers/validation\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Test-Environment', '{{testEnvironment}}')\n    .header('X-Company', '{{company}}')\n    .header('X-Request-Source', '{{requestSource}}')\n    .when()\n    .get('/users/{{expectedUserId}}')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', 1)\n    .execute();\n// Retrieve and verify global variables\nconsole.log('Global Variables Set:');\nconsole.log('- Expected User ID:', src_1.restified.getGlobalVariable('expectedUserId'));\nconsole.log('- Test Environment:', src_1.restified.getGlobalVariable('testEnvironment'));\nconsole.log('- Request Source:', src_1.restified.getGlobalVariable('requestSource'));\nconsole.log('- Company:', src_1.restified.getGlobalVariable('company'));\nconsole.log('- Version:', src_1.restified.getGlobalVariable('version'));\nconsole.log('- Test Suite:', src_1.restified.getGlobalVariable('testSuite'));\n// Get all global variables\nconst allGlobalVars = src_1.restified.getGlobalVariables();\nconsole.log('Total global variables:', Object.keys(allGlobalVars).length);",
              "err": {},
              "uuid": "ccd50bb0-cc68-4809-81f4-de3215036591",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate local variable management",
              "fullTitle": "Variable Store Example should demonstrate local variable management",
              "timedOut": false,
              "duration": 899,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set local variables (test-scoped)\nsrc_1.restified.setLocalVariable('testName', 'Variable Store Test');\nsrc_1.restified.setLocalVariable('requestId', Math.random().toString(36).substring(7));\nsrc_1.restified.setLocalVariable('expectedStatus', 200);\n// Set multiple local variables at once\nsrc_1.restified.setLocalVariables({\n    'currentTest': 'local-variables',\n    'timestamp': new Date().toISOString(),\n    'retryCount': 3\n});\n// Use local variables in requests\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Request-Id', '{{requestId}}')\n    .header('X-Test-Name', '{{testName}}')\n    .when()\n    .get('/posts/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .execute();\n// Retrieve local variables\nconsole.log('Local Variables:');\nconsole.log('- Test Name:', src_1.restified.getLocalVariable('testName'));\nconsole.log('- Request ID:', src_1.restified.getLocalVariable('requestId'));\nconsole.log('- Expected Status:', src_1.restified.getLocalVariable('expectedStatus'));\nconsole.log('- Current Test:', src_1.restified.getLocalVariable('currentTest'));\n// Get all local variables\nconst allLocalVars = src_1.restified.getLocalVariables();\nconsole.log('Total local variables:', Object.keys(allLocalVars).length);",
              "err": {},
              "uuid": "b348a555-c0f5-425c-bb74-1bf98ed4287a",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate extracted variable management",
              "fullTitle": "Variable Store Example should demonstrate extracted variable management",
              "timedOut": false,
              "duration": 2034,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Make a request and extract multiple values\nconst userResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.id', 'userId')\n    .extract('$.name', 'userName')\n    .extract('$.email', 'userEmail')\n    .extract('$.address.city', 'userCity')\n    .extract('$.company.name', 'companyName')\n    .execute();\n// Use extracted variables in subsequent requests\nconst postsResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-User-Id', '{{userId}}')\n    .header('X-User-Name', '{{userName}}')\n    .when()\n    .get('/posts?userId={{userId}}')\n    .execute();\nawait postsResponse\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) && posts.length > 0;\n}, 'Should have posts for the user')\n    .custom((response) => {\n    const posts = response.data;\n    return posts.every(post => post.userId.toString() === src_1.restified.getVariable('userId').toString());\n}, 'All posts should belong to the extracted user ID')\n    .execute();\n// Display extracted variables\nconsole.log('Extracted Variables:');\nconsole.log('- User ID:', src_1.restified.getVariable('userId'));\nconsole.log('- User Name:', src_1.restified.getVariable('userName'));\nconsole.log('- User Email:', src_1.restified.getVariable('userEmail'));\nconsole.log('- User City:', src_1.restified.getVariable('userCity'));\nconsole.log('- Company Name:', src_1.restified.getVariable('companyName'));",
              "err": {},
              "uuid": "4cd87091-e8a8-4f17-a16a-40f8cd22e3d5",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment variable usage",
              "fullTitle": "Variable Store Example should demonstrate environment variable usage",
              "timedOut": false,
              "duration": 414,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Set environment variables (simulating external configuration)\nprocess.env.TEST_USER_ID = '2';\nprocess.env.TEST_ENVIRONMENT = 'production';\nprocess.env.API_VERSION = 'v1';\n// Use environment variables in headers and path parameters\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Environment', '{{$env.TEST_ENVIRONMENT}}')\n    .header('X-API-Version', '{{$env.API_VERSION}}')\n    .when()\n    .get('/users/{{$env.TEST_USER_ID}}')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', 2)\n    .jsonPath('$.name')\n    .execute();\n// Environment variables are accessed through the special $env prefix\nconsole.log('Environment Variables Used:');\nconsole.log('- User ID:', process.env.TEST_USER_ID);\nconsole.log('- Environment:', process.env.TEST_ENVIRONMENT);\nconsole.log('- API Version:', process.env.API_VERSION);",
              "err": {
                "message": "Error: Assertions failed:\nExpected status code 200, got 404\nJSONPath '$.id' expected '2', got 'undefined'\nJSONPath '$.name' should match at least one element",
                "estack": "Error: Assertions failed:\nExpected status code 200, got 404\nJSONPath '$.id' expected '2', got 'undefined'\nJSONPath '$.name' should match at least one element\n    at ThenStep.execute (src\\core\\dsl\\then.core.ts:286:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (examples\\advanced\\variable-store.ts:165:5)",
                "diff": null
              },
              "uuid": "1c709baa-033f-422a-bb97-fbc29197d986",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate variable priority and resolution",
              "fullTitle": "Variable Store Example should demonstrate variable priority and resolution",
              "timedOut": false,
              "duration": 1604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set variables with same name at different levels to demonstrate priority\nconst testVar = 'priorityTest';\n// 1. Global variable (lowest priority)\nsrc_1.restified.setGlobalVariable(testVar, 'global-value');\n// 2. Local variable (higher priority)\nsrc_1.restified.setLocalVariable(testVar, 'local-value');\n// 3. Environment variable (can be accessed separately)\nprocess.env.PRIORITY_TEST = 'env-value';\n// Test variable resolution priority\nconsole.log('Variable Priority Resolution:');\nconsole.log('- Global value:', src_1.restified.getGlobalVariable(testVar));\nconsole.log('- Local value:', src_1.restified.getLocalVariable(testVar));\nconsole.log('- General getVariable() returns:', src_1.restified.getVariable(testVar));\n// Make a request to extract a value (highest priority)\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .extract('$.name', testVar) // This will override local variable\n    .execute();\nconsole.log('After extraction:');\nconsole.log('- Extracted value:', src_1.restified.getVariable(testVar));\n// Demonstrate that local variable still exists but extracted takes priority\nconsole.log('- Local variable still exists:', src_1.restified.getLocalVariable(testVar));\n// Test using different variable names in templates\nconst testResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Local-Var', '{{priorityTest}}') // Will resolve to extracted value\n    .header('X-Env-Var', '{{$env.PRIORITY_TEST}}') // Will resolve to env value\n    .when()\n    .get('/posts/1')\n    .execute();\nawait testResponse.statusCode(200).execute();",
              "err": {},
              "uuid": "5ab603e5-7fe7-4118-a4e7-6480bd14c274",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate comprehensive variable operations",
              "fullTitle": "Variable Store Example should demonstrate comprehensive variable operations",
              "timedOut": false,
              "duration": 1867,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up a complex scenario with multiple variable types\nsrc_1.restified.setGlobalVariable('testSuite', 'comprehensive-variables');\nsrc_1.restified.setLocalVariables({\n    'testId': 'comp-test-001',\n    'targetUserId': 1,\n    'requestType': 'user-data-fetch'\n});\nprocess.env.MAX_RETRIES = '3';\nprocess.env.REQUEST_TIMEOUT = '5000';\n// Make request using all variable types\nconst userResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Test-Id', '{{testId}}')\n    .header('X-Request-Type', '{{requestType}}')\n    .header('X-Test-Suite', '{{testSuite}}')\n    .header('X-Max-Retries', '{{$env.MAX_RETRIES}}')\n    .when()\n    .get('/users/{{targetUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.name', 'extractedUserName')\n    .extract('$.company.name', 'extractedCompanyName')\n    .execute();\n// Now use extracted data in another request  \nconst postsResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-User-Name', '{{extractedUserName}}')\n    .header('X-Company', '{{extractedCompanyName}}')\n    .header('X-Suite', '{{testSuite}}')\n    .when()\n    .get('/posts?userId={{targetUserId}}')\n    .execute();\nawait postsResponse\n    .statusCode(200)\n    .custom((response) => {\n    return Array.isArray(response.data) && response.data.length > 0;\n}, 'Should retrieve posts for the user')\n    .execute();\n// Display complete variable summary\nconsole.log('\\n=== Complete Variable Summary ===');\nconsole.log('Global Variables:', src_1.restified.getGlobalVariables());\nconsole.log('Local Variables:', src_1.restified.getLocalVariables());\nconsole.log('Extracted Variables: {');\nconsole.log('  extractedUserName:', src_1.restified.getVariable('extractedUserName'));\nconsole.log('  extractedCompanyName:', src_1.restified.getVariable('extractedCompanyName'));\nconsole.log('}');\nconsole.log('Environment Variables Used: {');\nconsole.log('  MAX_RETRIES:', process.env.MAX_RETRIES);\nconsole.log('  REQUEST_TIMEOUT:', process.env.REQUEST_TIMEOUT);\nconsole.log('}');",
              "err": {},
              "uuid": "5e706373-2120-4cd0-b4bf-f5346c63d96f",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate variable clearing and cleanup",
              "fullTitle": "Variable Store Example should demonstrate variable clearing and cleanup",
              "timedOut": false,
              "duration": 422,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up variables\nsrc_1.restified.setGlobalVariable('temp1', 'value1');\nsrc_1.restified.setLocalVariable('temp2', 'value2');\n// Extract some data\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .extract('$.id', 'temp3')\n    .execute();\n// Verify variables exist\nconsole.log('Before cleanup:');\nconsole.log('- Global temp1:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Local temp2:', src_1.restified.getLocalVariable('temp2'));\nconsole.log('- Extracted temp3:', src_1.restified.getVariable('temp3'));\n// Clear specific variable types\nsrc_1.restified.clearLocalVariables();\nconsole.log('\\nAfter clearing local variables:');\nconsole.log('- Global temp1:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Local temp2:', src_1.restified.getLocalVariable('temp2')); // Should be undefined\nconsole.log('- Extracted temp3:', src_1.restified.getVariable('temp3'));\n// Note: There's no clearVariables method, only clearLocalVariables\n// Global variables and extracted variables persist until cleanup\nconsole.log('\\nNote: Global and extracted variables persist until cleanup');\nconsole.log('- Global temp1 still exists:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Extracted temp3 still exists:', src_1.restified.getVariable('temp3'));",
              "err": {},
              "uuid": "773c14a3-70f2-47c8-a0e6-672f802ec994",
              "parentUUID": "52273cec-0b5c-478b-aa12-2563beef5465",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccd50bb0-cc68-4809-81f4-de3215036591",
            "b348a555-c0f5-425c-bb74-1bf98ed4287a",
            "4cd87091-e8a8-4f17-a16a-40f8cd22e3d5",
            "5ab603e5-7fe7-4118-a4e7-6480bd14c274",
            "5e706373-2120-4cd0-b4bf-f5346c63d96f",
            "773c14a3-70f2-47c8-a0e6-672f802ec994"
          ],
          "failures": [
            "1c709baa-033f-422a-bb97-fbc29197d986"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8391,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "78af1551-b492-4dad-8203-fb78737b9f42",
          "title": "WebSocket Real-time Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
          "file": "\\examples\\advanced\\websocket-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WebSocket Real-time Testing\"",
              "fullTitle": "WebSocket Real-time Testing \"before all\" hook in \"WebSocket Real-time Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create WebSocket client for echo service\nindex_1.restified.createWebSocketClient('echo', {\n    url: 'wss://echo.websocket.org',\n    timeout: 10000,\n    reconnectAttempts: 3,\n    reconnectDelay: 1000,\n    pingInterval: 30000\n});\n// Create WebSocket client for crypto data (if available)\nindex_1.restified.createWebSocketClient('crypto', {\n    url: 'wss://stream.binance.com:9443/ws/btcusdt@ticker',\n    timeout: 10000,\n    reconnectAttempts: 2\n});",
              "err": {},
              "uuid": "b98f07d4-226e-4dd7-b1c5-b365a171b39b",
              "parentUUID": "78af1551-b492-4dad-8203-fb78737b9f42",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"WebSocket Real-time Testing\"",
              "fullTitle": "WebSocket Real-time Testing \"after all\" hook in \"WebSocket Real-time Testing\"",
              "timedOut": false,
              "duration": 370,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "9dde5b28-0a99-438b-865a-c3e9f723b69c",
              "parentUUID": "78af1551-b492-4dad-8203-fb78737b9f42",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "373b4fc1-769a-45ac-ac91-3a2a26b4ee1e",
              "title": "WebSocket Connection Management",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should connect to WebSocket server",
                  "fullTitle": "WebSocket Real-time Testing WebSocket Connection Management should connect to WebSocket server",
                  "timedOut": false,
                  "duration": 503,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await index_1.restified.connectWebSocket('echo');\nconst client = index_1.restified.getWebSocketClient('echo');\n(0, chai_1.expect)(client.isConnected()).to.be.true;",
                  "err": {},
                  "uuid": "6348bd0e-89fc-4052-8511-df1728243512",
                  "parentUUID": "373b4fc1-769a-45ac-ac91-3a2a26b4ee1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle connection timeout",
                  "fullTitle": "WebSocket Real-time Testing WebSocket Connection Management should handle connection timeout",
                  "timedOut": false,
                  "duration": 50,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Create client with very short timeout\nindex_1.restified.createWebSocketClient('timeout-test', {\n    url: 'wss://invalid-websocket-server.example.com',\n    timeout: 1000\n});\ntry {\n    await index_1.restified.connectWebSocket('timeout-test');\n    chai_1.expect.fail('Should have thrown timeout error');\n}\ncatch (error) {\n    (0, chai_1.expect)(error.message).to.include('timeout');\n}",
                  "err": {
                    "message": "Error: getaddrinfo ENOTFOUND invalid-websocket-server.example.com",
                    "estack": "Error: getaddrinfo ENOTFOUND invalid-websocket-server.example.com\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
                    "diff": null
                  },
                  "uuid": "787803d9-30a3-45a8-bd2e-a0ab950ddecd",
                  "parentUUID": "373b4fc1-769a-45ac-ac91-3a2a26b4ee1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6348bd0e-89fc-4052-8511-df1728243512"
              ],
              "failures": [
                "787803d9-30a3-45a8-bd2e-a0ab950ddecd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 553,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "5c2a4946-ff00-435b-b75a-b806a9887c44",
              "title": "Message Communication",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send and receive text messages",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should send and receive text messages",
                  "timedOut": false,
                  "duration": 223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\n// Clear any existing messages\nclient.clearMessages();\nconst testMessage = 'Hello WebSocket from RestifiedTS!';\nawait client.send(testMessage);\n// Wait for echo response\nconst receivedMessage = await client.waitForMessage((msg) => msg.data === testMessage, 5000);\n(0, chai_1.expect)(receivedMessage.data).to.equal(testMessage);\n(0, chai_1.expect)(receivedMessage.timestamp).to.be.a('number');\n(0, chai_1.expect)(receivedMessage.id).to.be.a('string');",
                  "err": {},
                  "uuid": "2a280908-52fb-4632-a618-08f338f22ba6",
                  "parentUUID": "5c2a4946-ff00-435b-b75a-b806a9887c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send and receive JSON messages",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should send and receive JSON messages",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\nconst jsonMessage = {\n    type: 'test',\n    data: {\n        userId: '{{$random.uuid}}',\n        timestamp: '{{$date.now}}',\n        message: 'JSON test from RestifiedTS'\n    }\n};\nawait client.sendJSON(jsonMessage);\n// Wait for JSON echo response\nconst receivedMessage = await client.waitForMessage((msg) => msg.data && msg.data.type === 'test', 5000);\n(0, chai_1.expect)(receivedMessage.data.type).to.equal('test');\n(0, chai_1.expect)(receivedMessage.data.data.message).to.equal('JSON test from RestifiedTS');\n(0, chai_1.expect)(receivedMessage.data.data.userId).to.match(/^[0-9a-f-]+$/);",
                  "err": {},
                  "uuid": "8c376d37-a197-4c28-b610-29f70746f2fd",
                  "parentUUID": "5c2a4946-ff00-435b-b75a-b806a9887c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle message with variables",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should handle message with variables",
                  "timedOut": false,
                  "duration": 5013,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nindex_1.restified.setGlobalVariable('userName', 'RestifiedTester');\nindex_1.restified.setGlobalVariable('sessionId', 'session-12345');\nclient.clearMessages();\nconst messageWithVars = {\n    user: '{{userName}}',\n    session: '{{sessionId}}',\n    action: 'ping',\n    timestamp: Date.now()\n};\nawait client.sendJSON(messageWithVars);\nconst receivedMessage = await client.waitForMessage((msg) => msg.data && msg.data.user === 'RestifiedTester', 5000);\n(0, chai_1.expect)(receivedMessage.data.user).to.equal('RestifiedTester');\n(0, chai_1.expect)(receivedMessage.data.session).to.equal('session-12345');\n(0, chai_1.expect)(receivedMessage.data.action).to.equal('ping');",
                  "err": {
                    "message": "Error: Timeout waiting for message after 5000ms",
                    "estack": "Error: Timeout waiting for message after 5000ms\n    at Timeout._onTimeout (src\\core\\clients\\WebSocketClient.ts:199:16)\n    at listOnTimeout (node:internal/timers:588:17)\n    at processTimers (node:internal/timers:523:7)",
                    "diff": null
                  },
                  "uuid": "71e97940-4078-4b20-a559-6ee1448b2e74",
                  "parentUUID": "5c2a4946-ff00-435b-b75a-b806a9887c44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a280908-52fb-4632-a618-08f338f22ba6",
                "8c376d37-a197-4c28-b610-29f70746f2fd"
              ],
              "failures": [
                "71e97940-4078-4b20-a559-6ee1448b2e74"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5455,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "da15c51a-7f18-46a4-b710-29fac8ca8126",
              "title": "Message Filtering and Querying",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should filter messages by criteria",
                  "fullTitle": "WebSocket Real-time Testing Message Filtering and Querying should filter messages by criteria",
                  "timedOut": false,
                  "duration": 1003,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\n// Send multiple messages\nawait client.sendJSON({ type: 'order', id: 1, status: 'pending' });\nawait client.sendJSON({ type: 'order', id: 2, status: 'completed' });\nawait client.sendJSON({ type: 'notification', message: 'System update' });\n// Wait a bit for all messages to be received\nawait new Promise(resolve => setTimeout(resolve, 1000));\nconst orderMessages = client.getMessagesWhere((msg) => msg.data && msg.data.type === 'order');\n(0, chai_1.expect)(orderMessages).to.have.length(2);\nconst completedOrders = client.getMessagesWhere((msg) => msg.data && msg.data.type === 'order' && msg.data.status === 'completed');\n(0, chai_1.expect)(completedOrders).to.have.length(1);\n(0, chai_1.expect)(completedOrders[0].data.id).to.equal(2);",
                  "err": {},
                  "uuid": "206793b1-2b3a-4f5d-b294-08af964bffce",
                  "parentUUID": "da15c51a-7f18-46a4-b710-29fac8ca8126",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should wait for specific message patterns",
                  "fullTitle": "WebSocket Real-time Testing Message Filtering and Querying should wait for specific message patterns",
                  "timedOut": false,
                  "duration": 1230,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\n// Send message that will trigger wait condition\nsetTimeout(async () => {\n    await client.sendJSON({\n        type: 'response',\n        requestId: 'req-123',\n        result: 'success'\n    });\n}, 1000);\n// Wait for specific response\nconst response = await client.waitForMessage((msg) => msg.data &&\n    msg.data.type === 'response' &&\n    msg.data.requestId === 'req-123', 5000);\n(0, chai_1.expect)(response.data.result).to.equal('success');",
                  "err": {},
                  "uuid": "3db936d8-88a3-43b4-a927-7aec209e73bb",
                  "parentUUID": "da15c51a-7f18-46a4-b710-29fac8ca8126",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "206793b1-2b3a-4f5d-b294-08af964bffce",
                "3db936d8-88a3-43b4-a927-7aec209e73bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2233,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "e3071fda-5a7f-401f-b1dd-318d386d1e22",
              "title": "Connection Health and Ping",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure ping latency",
                  "fullTitle": "WebSocket Real-time Testing Connection Health and Ping should measure ping latency",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nif (client.isConnected()) {\n    const latency = await client.ping();\n    (0, chai_1.expect)(latency).to.be.a('number');\n    (0, chai_1.expect)(latency).to.be.greaterThan(0);\n    (0, chai_1.expect)(latency).to.be.lessThan(10000); // Less than 10 seconds\n    console.log(`WebSocket ping latency: ${latency}ms`);\n}",
                  "err": {},
                  "uuid": "d5e0358b-7cd9-40b5-b6a5-1e980d1d36df",
                  "parentUUID": "e3071fda-5a7f-401f-b1dd-318d386d1e22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5e0358b-7cd9-40b5-b6a5-1e980d1d36df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 236,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "3941caa7-a7f6-4765-8b99-4a2bc2f6266d",
              "title": "Real-time Data Stream Testing",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should receive crypto price updates",
                  "fullTitle": "WebSocket Real-time Testing Real-time Data Stream Testing should receive crypto price updates",
                  "timedOut": false,
                  "duration": 1569,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await index_1.restified.connectWebSocket('crypto');\n    const client = index_1.restified.getWebSocketClient('crypto');\n    client.clearMessages();\n    // Wait for price update message\n    const priceUpdate = await client.waitForMessage((msg) => msg.data && typeof msg.data.c !== 'undefined', // 'c' is close price\n    10000);\n    (0, chai_1.expect)(priceUpdate.data).to.have.property('s'); // symbol\n    (0, chai_1.expect)(priceUpdate.data).to.have.property('c'); // close price\n    (0, chai_1.expect)(priceUpdate.data.s).to.equal('BTCUSDT');\n    (0, chai_1.expect)(parseFloat(priceUpdate.data.c)).to.be.greaterThan(0);\n    console.log(`Received BTC price: $${priceUpdate.data.c}`);\n}\ncatch (error) {\n    console.log('Crypto stream test skipped - service unavailable');\n    this.skip();\n}",
                  "err": {},
                  "uuid": "02949a1d-46b3-452a-8ffb-522d8b96360d",
                  "parentUUID": "3941caa7-a7f6-4765-8b99-4a2bc2f6266d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle multiple concurrent connections",
                  "fullTitle": "WebSocket Real-time Testing Real-time Data Stream Testing should handle multiple concurrent connections",
                  "timedOut": false,
                  "duration": 1623,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create multiple echo connections\nindex_1.restified.createWebSocketClient('echo2', {\n    url: 'wss://echo.websocket.org',\n    timeout: 10000\n});\nawait index_1.restified.connectWebSocket('echo2');\nconst client1 = index_1.restified.getWebSocketClient('echo');\nconst client2 = index_1.restified.getWebSocketClient('echo2');\n(0, chai_1.expect)(client1.isConnected()).to.be.true;\n(0, chai_1.expect)(client2.isConnected()).to.be.true;\n// Send different messages on each connection\nclient1.clearMessages();\nclient2.clearMessages();\nawait client1.send('Message from connection 1');\nawait client2.send('Message from connection 2');\n// Verify each connection received its own message\nconst msg1 = await client1.waitForMessage((msg) => msg.data === 'Message from connection 1', 3000);\nconst msg2 = await client2.waitForMessage((msg) => msg.data === 'Message from connection 2', 3000);\n(0, chai_1.expect)(msg1.data).to.equal('Message from connection 1');\n(0, chai_1.expect)(msg2.data).to.equal('Message from connection 2');",
                  "err": {},
                  "uuid": "b0e640c0-1114-4877-9a02-09b10f5ddff4",
                  "parentUUID": "3941caa7-a7f6-4765-8b99-4a2bc2f6266d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02949a1d-46b3-452a-8ffb-522d8b96360d",
                "b0e640c0-1114-4877-9a02-09b10f5ddff4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3192,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "ce53b0bd-b31b-4ef1-ac4b-bea317568270",
              "title": "Error Handling and Reconnection",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle disconnection gracefully",
                  "fullTitle": "WebSocket Real-time Testing Error Handling and Reconnection should handle disconnection gracefully",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nif (client.isConnected()) {\n    await client.disconnect();\n    (0, chai_1.expect)(client.isConnected()).to.be.false;\n    // Test result should show disconnection\n    const testResult = client.getTestResult();\n    (0, chai_1.expect)(testResult.connected).to.be.false;\n    (0, chai_1.expect)(testResult.disconnectionTime).to.be.a('number');\n    (0, chai_1.expect)(testResult.messages).to.be.an('array');\n}",
                  "err": {},
                  "uuid": "d6911ce3-0b4b-40cc-a0c8-1e445a844c6d",
                  "parentUUID": "ce53b0bd-b31b-4ef1-ac4b-bea317568270",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6911ce3-0b4b-40cc-a0c8-1e445a844c6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 208,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "5f559774-6808-4efb-ab5b-197c12308bf1",
          "title": "Bearer Token Authentication Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\authentication\\bearer-auth.ts",
          "file": "\\examples\\authentication\\bearer-auth.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"before all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "875e3be9-79de-4580-98a9-dbbe36749edd",
              "parentUUID": "5f559774-6808-4efb-ab5b-197c12308bf1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"before each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "593cdb4e-e61c-4558-b860-62fc4a48a317",
              "parentUUID": "5f559774-6808-4efb-ab5b-197c12308bf1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"after all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "6c4e7dc3-94c0-46ca-948d-888ecdad15cb",
              "parentUUID": "5f559774-6808-4efb-ab5b-197c12308bf1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"after each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "c880ecca-e7a3-4843-a277-b8e5a7b09afb",
              "parentUUID": "5f559774-6808-4efb-ab5b-197c12308bf1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should use global authentication token with testUtils client",
              "fullTitle": "Bearer Token Authentication Example should use global authentication token with testUtils client",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Global Token Usage');\n// Use the global auth token that was obtained during global setup\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils') // Pre-configured client\n    .bearerToken('{{globalAuthToken}}') // Global auth token\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', src_1.restified.getVariable('globalAuthToken'))\n    .execute();\nconsole.log('‚úÖ Authentication successful with global token');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:44:10)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\authentication\\bearer-auth.ts:38:22)",
                "diff": null
              },
              "uuid": "ef763ce6-feb9-4a21-a664-e062d285d7e8",
              "parentUUID": "5f559774-6808-4efb-ab5b-197c12308bf1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment-based authentication",
              "fullTitle": "Bearer Token Authentication Example should demonstrate environment-based authentication",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Environment Auth');\n// Use environment variable that was set up during global setup\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .bearerToken('{{$env.EXAMPLE_API_KEY}}') // From global setup\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', process.env.EXAMPLE_API_KEY)\n    .execute();\nconsole.log('‚úÖ Environment-based authentication successful');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:66:10)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\authentication\\bearer-auth.ts:60:22)",
                "diff": null
              },
              "uuid": "df40118f-399e-4363-b91e-175db9270c0e",
              "parentUUID": "5f559774-6808-4efb-ab5b-197c12308bf1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show authenticated API workflow",
              "fullTitle": "Bearer Token Authentication Example should show authenticated API workflow",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'API Workflow');\n// Step 1: Use authenticated API client for business operation\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured with global auth\n    .header('Authorization', `Bearer {{globalAuthToken}}`)\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .extract('$.phone', 'userPhone')\n    .execute();\n// Step 2: Validate auth token with test utilities\nconst validateResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .header('X-User-Phone', '{{userPhone}}')\n    .header('X-Global-User', '{{globalUserEmail}}')\n    .bearerToken('{{globalAuthToken}}')\n    .when()\n    .get('/bearer')\n    .execute();\nawait validateResponse\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .custom((response) => {\n    return response.data.token === src_1.restified.getVariable('globalAuthToken');\n}, 'Token should match global auth token')\n    .execute();\nconsole.log('‚úÖ Full authenticated workflow completed');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:88:10)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\authentication\\bearer-auth.ts:82:26)",
                "diff": null
              },
              "uuid": "6ea6ea2d-7fec-4ae8-af4d-973a5fdd19e8",
              "parentUUID": "5f559774-6808-4efb-ab5b-197c12308bf1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle authentication errors with global patterns",
              "fullTitle": "Bearer Token Authentication Example should handle authentication errors with global patterns",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Error Handling');\n// Test authentication failure using invalid token\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .bearerToken('invalid-global-token')\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200) // HTTPBin accepts any token for demo\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', 'invalid-global-token')\n    .execute();\nconsole.log('‚úÖ Authentication error handling verified');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:171:24\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:169:36)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:129:10)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:215:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:169:12)\n    at async Context.<anonymous> (examples\\authentication\\bearer-auth.ts:123:22)",
                "diff": null
              },
              "uuid": "4c06dacb-abe4-4f65-a9a4-5ee5c5d3a048",
              "parentUUID": "5f559774-6808-4efb-ab5b-197c12308bf1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ef763ce6-feb9-4a21-a664-e062d285d7e8",
            "df40118f-399e-4363-b91e-175db9270c0e",
            "6ea6ea2d-7fec-4ae8-af4d-973a5fdd19e8",
            "4c06dacb-abe4-4f65-a9a4-5ee5c5d3a048"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}