{
  "stats": {
    "suites": 32,
    "tests": 83,
    "passes": 56,
    "pending": 1,
    "failures": 26,
    "start": "2025-08-30T08:26:01.531Z",
    "end": "2025-08-30T08:27:12.765Z",
    "duration": 71234,
    "testsRegistered": 83,
    "passPercent": 68.29268292682927,
    "pendingPercent": 1.2048192771084338,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "87c9552a-4b1e-4618-a904-5f4dac7fdc55",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "18c7b2fc-0894-47ab-a4f0-8420da261a9b",
          "title": "POST Request with Variables Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\basic\\post-with-variables.ts",
          "file": "\\examples\\basic\\post-with-variables.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST Request with Variables Example\"",
              "fullTitle": "POST Request with Variables Example \"before each\" hook in \"POST Request with Variables Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up test-specific data (global auth data already available from setup)\nsrc_1.restified.setLocalVariable('postTitle', 'My Test Post');\nsrc_1.restified.setLocalVariable('postBody', 'Created using global auth by {{globalUserEmail}}');",
              "err": {},
              "uuid": "4562c7f7-ced1-46ab-8aa8-87ee15ff5cc0",
              "parentUUID": "18c7b2fc-0894-47ab-a4f0-8420da261a9b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a post using global client and variables",
              "fullTitle": "POST Request with Variables Example should create a post using global client and variables",
              "timedOut": false,
              "duration": 32,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Create Post');\n// Use pre-configured API client from global setup\n// Common headers are already included in the client configuration\nconst createResponse = await src_1.restified\n    .given()\n    .useClient('api') // Global client with pre-configured headers\n    .header('X-Author', '{{globalUserEmail}}')\n    .when()\n    .post('/posts', {\n    title: '{{postTitle}}',\n    body: '{{postBody}}',\n    userId: '{{globalUserId}}' // Using global user ID from auth\n})\n    .execute();\n// Verify creation and extract the ID\nawait createResponse\n    .statusCode(201)\n    .jsonPath('$.title', 'My Test Post')\n    .jsonPath('$.userId', '1') // JSONPlaceholder returns userId as string\n    .extract('$.id', 'createdPostId')\n    .execute();\nconsole.log('üìù Post created with ID:', src_1.restified.getVariable('createdPostId'));",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:223:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:35:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:223:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:25:28)",
                "diff": null
              },
              "uuid": "b3af78c5-7459-48cc-bdaa-6685632b5185",
              "parentUUID": "18c7b2fc-0894-47ab-a4f0-8420da261a9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve post using global client and extracted variables",
              "fullTitle": "POST Request with Variables Example should retrieve post using global client and extracted variables",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Retrieve Post');\n// Use the globalUserId that was set during global authentication\n// Common headers are already included in the client configuration\nconst getResponse = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured API client\n    .header('X-Requested-By', '{{globalUserEmail}}')\n    .when()\n    .get('/posts/{{globalUserId}}') // Using global user ID\n    .execute();\nawait getResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.userId', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.title')\n    .custom((response) => {\n    // Verify we can access global variables in custom assertions\n    return src_1.restified.getVariable('testEnvironment') === 'development';\n}, 'Should have access to global test environment')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:59:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:53:25)",
                "diff": null
              },
              "uuid": "5fdee8d3-7bf7-4cb2-8f99-708516b89b82",
              "parentUUID": "18c7b2fc-0894-47ab-a4f0-8420da261a9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate cross-client variable usage",
              "fullTitle": "POST Request with Variables Example should demonstrate cross-client variable usage",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('POST Variables', 'Cross-Client');\n// First, create data using API client\n// Common headers are already included in the client configuration\nconst apiResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait apiResponse\n    .statusCode(200)\n    .extract('$.company.catchPhrase', 'companyCatchPhrase')\n    .execute();\n// Then use testUtils client to validate the extracted data\n// Common headers are already included in the client configuration\nconst testResponse = await src_1.restified\n    .given()\n    .useClient('testUtils') // Different client from global setup\n    .when()\n    .post('/post', {\n    extractedData: '{{companyCatchPhrase}}',\n    globalUser: '{{globalUserEmail}}',\n    testSuite: '{{testSuite}}'\n})\n    .execute();\nawait testResponse\n    .statusCode(200)\n    .jsonPath('$.json.globalUser', src_1.restified.getVariable('globalUserEmail'))\n    .jsonPath('$.json.testSuite', src_1.restified.getVariable('testSuite'))\n    .execute();\nconsole.log('üåê Cross-client variable sharing successful');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\basic\\post-with-variables.ts:83:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\basic\\post-with-variables.ts:78:25)",
                "diff": null
              },
              "uuid": "828c5c13-529e-47e3-804c-1f1821c7a882",
              "parentUUID": "18c7b2fc-0894-47ab-a4f0-8420da261a9b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b3af78c5-7459-48cc-bdaa-6685632b5185",
            "5fdee8d3-7bf7-4cb2-8f99-708516b89b82",
            "828c5c13-529e-47e3-804c-1f1821c7a882"
          ],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
          "title": "Data-Driven Testing Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\data-driven-testing.ts",
          "file": "\\examples\\advanced\\data-driven-testing.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Data-Driven Testing Example\"",
              "fullTitle": "Data-Driven Testing Example \"after all\" hook in \"Data-Driven Testing Example\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "14122072-4980-42b1-90b9-a8b8d075f1a6",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should validate user 1 has correct name: Leanne Graham",
              "fullTitle": "Data-Driven Testing Example should validate user 1 has correct name: Leanne Graham",
              "timedOut": false,
              "duration": 691,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "c74674ef-76fd-4489-b17d-7f64cba1c2ea",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 2 has correct name: Ervin Howell",
              "fullTitle": "Data-Driven Testing Example should validate user 2 has correct name: Ervin Howell",
              "timedOut": false,
              "duration": 813,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "def05e71-624a-41ac-b696-dff8a958f684",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 3 has correct name: Clementine Bauch",
              "fullTitle": "Data-Driven Testing Example should validate user 3 has correct name: Clementine Bauch",
              "timedOut": false,
              "duration": 744,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/users/${id}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', id)\n    .jsonPath('$.name', expectedName)\n    .execute();",
              "err": {},
              "uuid": "1d51299a-10c8-4e76-a4dc-c22cbeab1f4c",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 1 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 1 has posts within expected range",
              "timedOut": false,
              "duration": 650,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "1da51426-b5e5-4cf0-8e65-92a1673e37b1",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 2 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 2 has posts within expected range",
              "timedOut": false,
              "duration": 646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "41919f41-85c6-4555-bf3d-65c3fdaaa842",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate user 3 has posts within expected range",
              "fullTitle": "Data-Driven Testing Example should validate user 3 has posts within expected range",
              "timedOut": false,
              "duration": 618,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(`/posts?userId=${userId}`)\n    .execute();\nawait response\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) &&\n        posts.length >= expectedPostCount.min &&\n        posts.length <= expectedPostCount.max;\n}, `User ${userId} should have ${expectedPostCount.min}-${expectedPostCount.max} posts`)\n    .custom((response) => {\n    return response.data.every(post => post.userId === userId);\n}, `All posts should belong to user ${userId}`)\n    .execute();",
              "err": {},
              "uuid": "c3f32a78-af6f-4345-9d3c-794df566fea1",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for /posts/1",
              "fullTitle": "Data-Driven Testing Example should return 200 for /posts/1",
              "timedOut": false,
              "duration": 600,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "1814aa00-fb49-49cc-94d1-5ebf667a7eff",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for /posts/999",
              "fullTitle": "Data-Driven Testing Example should return 404 for /posts/999",
              "timedOut": false,
              "duration": 616,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "d1af2ccc-5957-4aa1-a30b-1b79b4cd5c30",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for /users/1",
              "fullTitle": "Data-Driven Testing Example should return 200 for /users/1",
              "timedOut": false,
              "duration": 607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "93c7ec87-8f37-472e-9d5c-f067d78ba683",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for /users/999",
              "fullTitle": "Data-Driven Testing Example should return 404 for /users/999",
              "timedOut": false,
              "duration": 779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get(endpoint)\n    .execute();\nawait response\n    .statusCode(expectedStatus)\n    .execute();",
              "err": {},
              "uuid": "5f3121f3-4342-4330-b325-f46bac778cab",
              "parentUUID": "0f51fd5d-1e23-4d6c-9738-a1cbd41c596a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c74674ef-76fd-4489-b17d-7f64cba1c2ea",
            "def05e71-624a-41ac-b696-dff8a958f684",
            "1d51299a-10c8-4e76-a4dc-c22cbeab1f4c",
            "1da51426-b5e5-4cf0-8e65-92a1673e37b1",
            "41919f41-85c6-4555-bf3d-65c3fdaaa842",
            "c3f32a78-af6f-4345-9d3c-794df566fea1",
            "1814aa00-fb49-49cc-94d1-5ebf667a7eff",
            "d1af2ccc-5957-4aa1-a30b-1b79b4cd5c30",
            "93c7ec87-8f37-472e-9d5c-f067d78ba683",
            "5f3121f3-4342-4330-b325-f46bac778cab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6764,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "989bdbb6-425e-4f68-b4ef-65bc74f4ac9f",
          "title": "Database Integration Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
          "file": "\\examples\\advanced\\database-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Database Integration Testing\"",
              "fullTitle": "Database Integration Testing \"before all\" hook in \"Database Integration Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup database connections (using mock/test databases)\n// PostgreSQL connection (if available)\nif (process.env.POSTGRES_CONNECTION_STRING || process.env.POSTGRES_HOST) {\n    await index_1.restified.createDatabaseClient('postgres', {\n        type: 'postgresql',\n        host: process.env.POSTGRES_HOST || 'localhost',\n        port: parseInt(process.env.POSTGRES_PORT || '5432'),\n        username: process.env.POSTGRES_USER || 'test',\n        password: process.env.POSTGRES_PASSWORD || 'test',\n        database: process.env.POSTGRES_DB || 'testdb',\n        connectionString: process.env.POSTGRES_CONNECTION_STRING,\n        timeout: 10000\n    });\n}\n// MongoDB connection (if available)\nif (process.env.MONGODB_CONNECTION_STRING || process.env.MONGODB_HOST) {\n    await index_1.restified.createDatabaseClient('mongodb', {\n        type: 'mongodb',\n        host: process.env.MONGODB_HOST || 'localhost',\n        port: parseInt(process.env.MONGODB_PORT || '27017'),\n        database: process.env.MONGODB_DB || 'testdb',\n        connectionString: process.env.MONGODB_CONNECTION_STRING,\n        timeout: 10000\n    });\n}",
              "err": {},
              "uuid": "aa27b5b2-59cb-45fa-a465-6beba74db22a",
              "parentUUID": "989bdbb6-425e-4f68-b4ef-65bc74f4ac9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Database Integration Testing\"",
              "fullTitle": "Database Integration Testing \"after all\" hook in \"Database Integration Testing\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "7fdc5a39-f3e4-44d5-afd7-79d3af346a1d",
              "parentUUID": "989bdbb6-425e-4f68-b4ef-65bc74f4ac9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "48231bd4-bea2-4606-a616-697ee4acd526",
              "title": "PostgreSQL Integration",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"PostgreSQL Integration\"",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration \"before each\" hook in \"PostgreSQL Integration\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!index_1.restified.getDatabaseClient) {\n    this.skip();\n}\ntry {\n    index_1.restified.getDatabaseClient('postgres');\n}\ncatch {\n    this.skip();\n}",
                  "err": {},
                  "uuid": "43457550-6174-4e2a-94cd-23cb58cba668",
                  "parentUUID": "48231bd4-bea2-4606-a616-697ee4acd526",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate user creation via API and database",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should validate user creation via API and database",
                  "timedOut": false,
                  "duration": 677,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\n// Create snapshot before test\nawait dbClient.createSnapshot('before-user-test', ['users']);\n// Create user via API\nconst response = await index_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .post('/users', {\n    name: 'Database Test User',\n    email: 'dbtest@example.com',\n    username: 'dbtestuser'\n})\n    .execute();\nawait response\n    .statusCode(201)\n    .extract('$.id', 'createdUserId')\n    .execute();\n// Simulate database state validation\n// In real scenario, this would check if user was actually created in database\nconst userId = index_1.restified.getVariable('createdUserId');\n// Mock database query result\nconst queryResult = await dbClient.executeQuery('SELECT * FROM users WHERE external_id = $1', [userId]);\n// In a real test, you would validate the user exists in database\nconsole.log(`Created user with ID: ${userId}`);\n(0, chai_1.expect)(queryResult.executionTime).to.be.a('number');",
                  "err": {
                    "message": "AssertionError: expected undefined to be a number",
                    "estack": "AssertionError: expected undefined to be a number\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:95:47)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "3198738a-4e45-4177-a0c3-5e2c24dd5f0a",
                  "parentUUID": "48231bd4-bea2-4606-a616-697ee4acd526",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate data consistency across API and database",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should validate data consistency across API and database",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\n// Test data consistency validation\nconst validationResult = await index_1.restified.validateDatabaseState([\n    {\n        client: 'postgres',\n        table: 'users',\n        conditions: { active: true },\n        expectedCount: 5\n    },\n    {\n        client: 'postgres',\n        table: 'orders',\n        conditions: { status: 'pending' },\n        expectedCount: { min: 1 }\n    }\n]);\n// In real scenario, this would validate actual database state\n(0, chai_1.expect)(validationResult).to.have.property('success');\n(0, chai_1.expect)(validationResult).to.have.property('results');",
                  "err": {},
                  "uuid": "f4a7f427-86a8-45ed-88a2-aa1ab505b492",
                  "parentUUID": "48231bd4-bea2-4606-a616-697ee4acd526",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database transactions",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should handle database transactions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\ntry {\n    // Begin transaction\n    await dbClient.beginTransaction();\n    // Execute test operations\n    await dbClient.executeQuery('INSERT INTO test_table (name, value) VALUES ($1, $2)', ['transaction-test', 42]);\n    // Validate data exists in transaction\n    const result = await dbClient.executeQuery('SELECT * FROM test_table WHERE name = $1', ['transaction-test']);\n    // Rollback transaction (cleanup)\n    await dbClient.rollback();\n    console.log('Transaction test completed successfully');\n}\ncatch (error) {\n    await dbClient.rollback();\n    throw error;\n}",
                  "err": {},
                  "uuid": "2e1b8369-1bd2-4ebc-8e21-a508ad4be954",
                  "parentUUID": "48231bd4-bea2-4606-a616-697ee4acd526",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should measure database query performance",
                  "fullTitle": "Database Integration Testing PostgreSQL Integration should measure database query performance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('postgres');\nconst startTime = Date.now();\nconst result = await dbClient.executeQuery('SELECT COUNT(*) as total FROM information_schema.tables');\n(0, chai_1.expect)(result.executionTime).to.be.a('number');\n(0, chai_1.expect)(result.executionTime).to.be.lessThan(5000); // Less than 5 seconds\nconsole.log(`Database query executed in ${result.executionTime}ms`);",
                  "err": {
                    "message": "AssertionError: expected undefined to be a number",
                    "estack": "AssertionError: expected undefined to be a number\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:160:42)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "340edd85-58e4-4616-a77d-0bde571c1229",
                  "parentUUID": "48231bd4-bea2-4606-a616-697ee4acd526",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4a7f427-86a8-45ed-88a2-aa1ab505b492",
                "2e1b8369-1bd2-4ebc-8e21-a508ad4be954"
              ],
              "failures": [
                "3198738a-4e45-4177-a0c3-5e2c24dd5f0a",
                "340edd85-58e4-4616-a77d-0bde571c1229"
              ],
              "pending": [],
              "skipped": [],
              "duration": 677,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "9aab8e1e-2c14-45b1-98ad-96ebfc2b295d",
              "title": "MongoDB Integration",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"MongoDB Integration\"",
                  "fullTitle": "Database Integration Testing MongoDB Integration \"before each\" hook in \"MongoDB Integration\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    index_1.restified.getDatabaseClient('mongodb');\n}\ncatch {\n    this.skip();\n}",
                  "err": {},
                  "uuid": "dc606480-97d3-4acc-81a0-761e5aa88bbc",
                  "parentUUID": "9aab8e1e-2c14-45b1-98ad-96ebfc2b295d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate document creation and retrieval",
                  "fullTitle": "Database Integration Testing MongoDB Integration should validate document creation and retrieval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\n// Insert document\nconst insertOperation = JSON.stringify({\n    collection: 'users',\n    method: 'insertOne',\n    document: {\n        name: 'MongoDB Test User',\n        email: 'mongotest@example.com',\n        createdAt: new Date(),\n        metadata: {\n            source: 'restifiedts-test',\n            version: '1.0.0'\n        }\n    }\n});\nconst insertResult = await dbClient.executeQuery(insertOperation);\n(0, chai_1.expect)(insertResult.insertId).to.exist;\nconst documentId = insertResult.insertId;\nindex_1.restified.setGlobalVariable('mongoDocumentId', documentId.toString());\n// Retrieve document\nconst findOperation = JSON.stringify({\n    collection: 'users',\n    method: 'findOne',\n    query: { _id: documentId }\n});\nconst findResult = await dbClient.executeQuery(findOperation);\n(0, chai_1.expect)(findResult.rows).to.have.length(1);\n(0, chai_1.expect)(findResult.rows[0].name).to.equal('MongoDB Test User');\n(0, chai_1.expect)(findResult.rows[0].metadata.source).to.equal('restifiedts-test');",
                  "err": {
                    "message": "AssertionError: expected undefined to exist",
                    "estack": "AssertionError: expected undefined to exist\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:195:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "4d443766-180a-459c-b542-b6c44cbb45a3",
                  "parentUUID": "9aab8e1e-2c14-45b1-98ad-96ebfc2b295d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate document updates",
                  "fullTitle": "Database Integration Testing MongoDB Integration should validate document updates",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\nconst documentId = index_1.restified.getVariable('mongoDocumentId');\nif (!documentId) {\n    this.skip();\n}\n// Update document\nconst updateOperation = JSON.stringify({\n    collection: 'users',\n    method: 'updateOne',\n    query: { _id: { $oid: documentId } },\n    document: {\n        $set: {\n            name: 'Updated MongoDB User',\n            updatedAt: new Date()\n        }\n    }\n});\nconst updateResult = await dbClient.executeQuery(updateOperation);\n(0, chai_1.expect)(updateResult.affectedRows).to.equal(1);\n// Verify update\nconst findOperation = JSON.stringify({\n    collection: 'users',\n    method: 'findOne',\n    query: { _id: { $oid: documentId } }\n});\nconst findResult = await dbClient.executeQuery(findOperation);\n(0, chai_1.expect)(findResult.rows[0].name).to.equal('Updated MongoDB User');\n(0, chai_1.expect)(findResult.rows[0].updatedAt).to.exist;",
                  "err": {},
                  "uuid": "86f9692a-86b2-46c2-9330-4648b9fd23ec",
                  "parentUUID": "9aab8e1e-2c14-45b1-98ad-96ebfc2b295d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle aggregation queries",
                  "fullTitle": "Database Integration Testing MongoDB Integration should handle aggregation queries",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbClient = index_1.restified.getDatabaseClient('mongodb');\nconst aggregationOperation = JSON.stringify({\n    collection: 'users',\n    method: 'aggregate',\n    query: [\n        { $match: { name: { $regex: 'MongoDB', $options: 'i' } } },\n        { $group: { _id: '$metadata.source', count: { $sum: 1 } } },\n        { $sort: { count: -1 } }\n    ]\n});\nconst result = await dbClient.executeQuery(aggregationOperation);\n(0, chai_1.expect)(result.rows).to.be.an('array');\n(0, chai_1.expect)(result.executionTime).to.be.a('number');\nconsole.log(`Aggregation completed in ${result.executionTime}ms`);",
                  "err": {
                    "message": "AssertionError: expected undefined to be an array",
                    "estack": "AssertionError: expected undefined to be an array\n    at Context.<anonymous> (examples\\advanced\\database-testing.ts:263:33)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "0743b6a7-ffc3-44cf-96fa-5bee086a0825",
                  "parentUUID": "9aab8e1e-2c14-45b1-98ad-96ebfc2b295d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4d443766-180a-459c-b542-b6c44cbb45a3",
                "0743b6a7-ffc3-44cf-96fa-5bee086a0825"
              ],
              "pending": [
                "86f9692a-86b2-46c2-9330-4648b9fd23ec"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "9173a6b2-1ded-46f8-a106-49fd003b4e16",
              "title": "Cross-Database Validation",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate data consistency across multiple databases",
                  "fullTitle": "Database Integration Testing Cross-Database Validation should validate data consistency across multiple databases",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This would test scenarios where data must be consistent across different databases\n// For example, user data in PostgreSQL and session data in MongoDB\nconst validations = [\n    {\n        client: 'postgres',\n        table: 'users',\n        conditions: { active: true },\n        expectedCount: 3\n    }\n];\n// Add MongoDB validation if available\ntry {\n    index_1.restified.getDatabaseClient('mongodb');\n    validations.push({\n        client: 'mongodb',\n        table: 'sessions', // collection\n        conditions: { active: true },\n        expectedCount: 3\n    });\n}\ncatch {\n    // MongoDB not available, skip\n}\nif (validations.length > 1) {\n    const result = await index_1.restified.validateDatabaseState(validations);\n    (0, chai_1.expect)(result.success).to.be.a('boolean');\n    (0, chai_1.expect)(result.results).to.have.length(validations.length);\n}",
                  "err": {},
                  "uuid": "4ccebfd6-5862-48b3-81cb-80d338640a5d",
                  "parentUUID": "9173a6b2-1ded-46f8-a106-49fd003b4e16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ccebfd6-5862-48b3-81cb-80d338640a5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b06e2303-9076-4883-9c9e-af415ff4ef06",
              "title": "Database Health Checks",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should perform health checks on all database connections",
                  "fullTitle": "Database Integration Testing Database Health Checks should perform health checks on all database connections",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const connections = ['postgres', 'mongodb'];\nfor (const connectionName of connections) {\n    try {\n        const dbClient = index_1.restified.getDatabaseClient(connectionName);\n        const health = await dbClient.healthCheck();\n        (0, chai_1.expect)(health.healthy).to.be.a('boolean');\n        (0, chai_1.expect)(health.latency).to.be.a('number');\n        if (health.healthy) {\n            (0, chai_1.expect)(health.latency).to.be.greaterThan(0);\n            console.log(`${connectionName} health check: ${health.latency}ms`);\n        }\n        else {\n            console.log(`${connectionName} health check failed: ${health.error}`);\n        }\n    }\n    catch (error) {\n        console.log(`${connectionName} connection not available`);\n    }\n}",
                  "err": {},
                  "uuid": "2fe5a9ab-979f-4a65-af1d-113174ff6992",
                  "parentUUID": "b06e2303-9076-4883-9c9e-af415ff4ef06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fe5a9ab-979f-4a65-af1d-113174ff6992"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "bb1eb489-fd93-4ff0-bf88-fc74f58a2e56",
              "title": "Test Data Management",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\database-testing.ts",
              "file": "\\examples\\advanced\\database-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should seed and cleanup test data",
                  "fullTitle": "Database Integration Testing Test Data Management should seed and cleanup test data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    const dbClient = index_1.restified.getDatabaseClient('postgres');\n    // Seed test data\n    const testData = [\n        { name: 'Test User 1', email: 'test1@example.com', active: true },\n        { name: 'Test User 2', email: 'test2@example.com', active: true },\n        { name: 'Test User 3', email: 'test3@example.com', active: false }\n    ];\n    await dbClient.seedTestData('test_users', testData);\n    // Validate data was seeded\n    const count = await dbClient.validateCount('test_users', 3, { active: true });\n    (0, chai_1.expect)(count).to.be.true;\n    // Cleanup test data\n    await dbClient.cleanupTestData('test_users', { email: { $like: '%@example.com' } });\n    console.log('Test data seeding and cleanup completed');\n}\ncatch (error) {\n    console.log('Test data management skipped - table not available');\n}",
                  "err": {},
                  "uuid": "40b40aa9-a469-4296-9885-ff10ade31723",
                  "parentUUID": "bb1eb489-fd93-4ff0-bf88-fc74f58a2e56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40b40aa9-a469-4296-9885-ff10ade31723"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
          "title": "Error Handling and Resilience Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\error-handling.ts",
          "file": "\\examples\\advanced\\error-handling.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Error Handling and Resilience Example\"",
              "fullTitle": "Error Handling and Resilience Example \"after all\" hook in \"Error Handling and Resilience Example\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "160aae7a-2fa9-4ddd-bfb0-401167c3f45a",
              "parentUUID": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should handle 404 errors gracefully",
              "fullTitle": "Error Handling and Resilience Example should handle 404 errors gracefully",
              "timedOut": false,
              "duration": 587,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/posts/9999')\n    .execute();\nawait response\n    .statusCode(404)\n    .execute();",
              "err": {},
              "uuid": "df1ecb49-46cf-4a4e-9a1f-ad31e776b065",
              "parentUUID": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle network timeouts with retry",
              "fullTitle": "Error Handling and Resilience Example should handle network timeouts with retry",
              "timedOut": false,
              "duration": 5291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Configure client with short timeout for demonstration\nsrc_1.restified.createClient('timeout-test', {\n    baseURL: 'https://httpbin.org',\n    timeout: 1000 // Very short timeout\n});\ntry {\n    const response = await src_1.restified\n        .given()\n        .useClient('timeout-test')\n        .when()\n        .get('/delay/2') // This will likely timeout and retry\n        .execute();\n    await response\n        .statusCode(200)\n        .execute();\n}\ncatch (error) {\n    // Expected to fail due to timeout, but should show retry attempts\n    console.log('Request failed after retries as expected');\n}",
              "err": {},
              "uuid": "81f00ca1-3068-432d-85bc-34b503cf421e",
              "parentUUID": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate error response structure",
              "fullTitle": "Error Handling and Resilience Example should validate error response structure",
              "timedOut": false,
              "duration": 2094,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .when()\n    .get('/status/500')\n    .execute();\nawait response\n    .statusCode(500)\n    .execute();",
              "err": {},
              "uuid": "469d7e63-8cb2-46be-b7f8-c4d3c163d44a",
              "parentUUID": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle malformed JSON responses",
              "fullTitle": "Error Handling and Resilience Example should handle malformed JSON responses",
              "timedOut": false,
              "duration": 2212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test against an endpoint that returns plain text instead of JSON\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .when()\n    .get('/html')\n    .execute();\nawait response\n    .statusCode(200)\n    .header('content-type')\n    .custom((response) => {\n    return response.headers['content-type'].includes('text/html');\n}, 'Response should be HTML')\n    .execute();",
              "err": {},
              "uuid": "ca31d134-fdb7-4ccd-9180-f5f2f304da91",
              "parentUUID": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test API rate limiting behavior",
              "fullTitle": "Error Handling and Resilience Example should test API rate limiting behavior",
              "timedOut": false,
              "duration": 1186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Make multiple rapid requests to test rate limiting\n// Note: This is just for demonstration - real rate limiting would need appropriate endpoint\nconst requests = [];\nfor (let i = 0; i < 3; i++) {\n    const request = src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/posts/1')\n        .execute();\n    requests.push(request);\n}\nconst responses = await Promise.all(requests);\n// Verify all requests succeeded (JSONPlaceholder doesn't have rate limiting)\nfor (const response of responses) {\n    await response\n        .statusCode(200)\n        .execute();\n}",
              "err": {},
              "uuid": "d9464978-99b8-46ff-8e05-5d6aeb1e812e",
              "parentUUID": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle authentication errors",
              "fullTitle": "Error Handling and Resilience Example should handle authentication errors",
              "timedOut": false,
              "duration": 1901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://httpbin.org')\n    .bearerToken('invalid-token')\n    .when()\n    .get('/bearer')\n    .execute();\n// httpbin.org /bearer endpoint doesn't actually validate tokens\n// So this will pass, but in real scenarios you'd test for 401\nawait response\n    .statusCode(200)\n    .execute();",
              "err": {},
              "uuid": "12310059-968b-497c-9cd6-9670ab0781a7",
              "parentUUID": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test request payload validation errors",
              "fullTitle": "Error Handling and Resilience Example should test request payload validation errors",
              "timedOut": false,
              "duration": 838,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .contentType('application/json')\n    .when()\n    .post('/posts', {\n    // Missing required fields to simulate validation error\n    invalidField: 'test'\n})\n    .execute();\n// JSONPlaceholder is lenient, but real APIs would return validation errors\nawait response\n    .statusCode(201) // JSONPlaceholder always returns 201 for POST\n    .execute();",
              "err": {},
              "uuid": "7b8324c2-035d-4ddb-a2e4-2e9b459df191",
              "parentUUID": "a77ef09b-b8f7-462c-8bba-0248db339ef3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df1ecb49-46cf-4a4e-9a1f-ad31e776b065",
            "81f00ca1-3068-432d-85bc-34b503cf421e",
            "469d7e63-8cb2-46be-b7f8-c4d3c163d44a",
            "ca31d134-fdb7-4ccd-9180-f5f2f304da91",
            "d9464978-99b8-46ff-8e05-5d6aeb1e812e",
            "12310059-968b-497c-9cd6-9670ab0781a7",
            "7b8324c2-035d-4ddb-a2e4-2e9b459df191"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e5b09aa5-7938-4fd1-a924-2e282b5127f2",
          "title": "GraphQL API Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
          "file": "\\examples\\advanced\\graphql-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL API Testing\"",
              "fullTitle": "GraphQL API Testing \"before all\" hook in \"GraphQL API Testing\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create GraphQL client\nindex_1.restified.createGraphQLClient('github', {\n    endpoint: 'https://api.github.com/graphql',\n    headers: {\n        'Authorization': 'Bearer {{$env.GITHUB_TOKEN}}',\n        'User-Agent': 'RestifiedTS-GraphQL-Test'\n    },\n    timeout: 15000\n});\n// Set test variables\nindex_1.restified.setGlobalVariable('owner', 'facebook');\nindex_1.restified.setGlobalVariable('repo', 'react');",
              "err": {},
              "uuid": "adcf727c-fdb5-4fcf-849f-48a84666f79c",
              "parentUUID": "e5b09aa5-7938-4fd1-a924-2e282b5127f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GraphQL API Testing\"",
              "fullTitle": "GraphQL API Testing \"after all\" hook in \"GraphQL API Testing\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "ea8c1550-0781-418a-b43b-6cf1de8bdff2",
              "parentUUID": "e5b09aa5-7938-4fd1-a924-2e282b5127f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8c1c7ded-704b-40de-9b96-37952acd1bd1",
              "title": "GraphQL Queries",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should execute basic repository query",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should execute basic repository query",
                  "timedOut": false,
                  "duration": 3033,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst query = `\n        query GetRepository($owner: String!, $name: String!) {\n          repository(owner: $owner, name: $name) {\nname\ndescription\nstargazerCount\nforkCount\nlanguage {\n  name\n}\nowner {\n  login\n}\n          }\n        }\n      `;\nconst response = await client.query(query, {\n    owner: '{{owner}}',\n    name: '{{repo}}'\n});\n// Validate GraphQL response structure\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data).to.exist;\n(0, chai_1.expect)(response.data.errors).to.not.exist;\nconst repository = response.data.data.repository;\n(0, chai_1.expect)(repository.name).to.equal('react');\n(0, chai_1.expect)(repository.owner.login).to.equal('facebook');\n(0, chai_1.expect)(repository.stargazerCount).to.be.a('number');\n(0, chai_1.expect)(repository.stargazerCount).to.be.greaterThan(100000);\n// Extract repository data\nindex_1.restified.setGlobalVariable('repoStars', repository.stargazerCount);\nindex_1.restified.setGlobalVariable('repoDescription', repository.description);",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:54:24)",
                    "diff": null
                  },
                  "uuid": "f149d803-d5aa-482b-ab51-b986a8594ebf",
                  "parentUUID": "8c1c7ded-704b-40de-9b96-37952acd1bd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle GraphQL variables and fragments",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should handle GraphQL variables and fragments",
                  "timedOut": false,
                  "duration": 2874,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst query = `\n        fragment RepositoryInfo on Repository {\n          name\n          description\n          stargazerCount\n          issues(states: OPEN) {\ntotalCount\n          }\n          pullRequests(states: OPEN) {\ntotalCount\n          }\n        }\n\n        query GetRepositoryDetails($owner: String!, $name: String!) {\n          repository(owner: $owner, name: $name) {\n...RepositoryInfo\nlanguages(first: 5) {\n  edges {\n    node {\n      name\n    }\n    size\n  }\n}\n          }\n        }\n      `;\nconst response = await client.query(query, {\n    owner: '{{owner}}',\n    name: '{{repo}}'\n});\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data.repository.languages.edges).to.be.an('array');\n(0, chai_1.expect)(response.data.data.repository.issues.totalCount).to.be.a('number');\n(0, chai_1.expect)(response.data.data.repository.pullRequests.totalCount).to.be.a('number');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:106:24)",
                    "diff": null
                  },
                  "uuid": "e71eb032-ae93-47c3-8527-5ec638382375",
                  "parentUUID": "8c1c7ded-704b-40de-9b96-37952acd1bd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate GraphQL errors",
                  "fullTitle": "GraphQL API Testing GraphQL Queries should validate GraphQL errors",
                  "timedOut": false,
                  "duration": 2872,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\n// Invalid query - missing required field\nconst invalidQuery = `\n        query InvalidQuery {\n          repository {\nname\n          }\n        }\n      `;\nconst response = await client.query(invalidQuery);\n(0, chai_1.expect)(response.status).to.equal(200); // GraphQL returns 200 even for errors\n(0, chai_1.expect)(response.data.errors).to.exist;\n(0, chai_1.expect)(response.data.errors).to.be.an('array');\n(0, chai_1.expect)(response.data.errors[0].message).to.include('Field \\'repository\\' of type \\'Repository\\' must have a selection of subfields');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:129:24)",
                    "diff": null
                  },
                  "uuid": "7c3b60bb-ad68-4723-aafe-856dc7ed2cdd",
                  "parentUUID": "8c1c7ded-704b-40de-9b96-37952acd1bd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f149d803-d5aa-482b-ab51-b986a8594ebf",
                "e71eb032-ae93-47c3-8527-5ec638382375",
                "7c3b60bb-ad68-4723-aafe-856dc7ed2cdd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8779,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "dafd2c01-e144-4896-9c23-da9b57fbed27",
              "title": "GraphQL Introspection",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should introspect GraphQL schema",
                  "fullTitle": "GraphQL API Testing GraphQL Introspection should introspect GraphQL schema",
                  "timedOut": false,
                  "duration": 2872,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst response = await client.introspect();\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(response.data.data.__schema).to.exist;\n(0, chai_1.expect)(response.data.data.__schema.types).to.be.an('array');\n(0, chai_1.expect)(response.data.data.__schema.queryType.name).to.equal('Query');\n// Find Repository type\nconst repositoryType = response.data.data.__schema.types.find((type) => type.name === 'Repository');\n(0, chai_1.expect)(repositoryType).to.exist;\n(0, chai_1.expect)(repositoryType.fields).to.be.an('array');",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:142:24)",
                    "diff": null
                  },
                  "uuid": "6dd0a2dd-d67e-4345-a910-a1059020eaf7",
                  "parentUUID": "dafd2c01-e144-4896-9c23-da9b57fbed27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6dd0a2dd-d67e-4345-a910-a1059020eaf7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2872,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a1311cfb-6145-4b0f-98fc-b8c39b11a5f8",
              "title": "GraphQL Query Validation",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate query syntax",
                  "fullTitle": "GraphQL API Testing GraphQL Query Validation should validate query syntax",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst validQuery = `\n        query ValidQuery($owner: String!) {\n          repository(owner: $owner, name: \"react\") {\nname\n          }\n        }\n      `;\nconst validation = client.validateQuery(validQuery);\n(0, chai_1.expect)(validation.valid).to.be.true;\n(0, chai_1.expect)(validation.errors).to.be.empty;",
                  "err": {},
                  "uuid": "74dbfaba-40f4-48df-b536-f9b4bb2a2466",
                  "parentUUID": "a1311cfb-6145-4b0f-98fc-b8c39b11a5f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invalid query syntax",
                  "fullTitle": "GraphQL API Testing GraphQL Query Validation should detect invalid query syntax",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst invalidQuery = `\n        query InvalidQuery {\n          repository(owner: $owner, name: \"react\" {\nname\n          }\n        }\n      `;\nconst validation = client.validateQuery(invalidQuery);\n(0, chai_1.expect)(validation.valid).to.be.false;\n(0, chai_1.expect)(validation.errors).to.not.be.empty;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (examples\\advanced\\graphql-testing.ts:187:37)\n    at processImmediate (node:internal/timers:485:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "565b85bb-ba16-4608-b819-f0d571e884dc",
                  "parentUUID": "a1311cfb-6145-4b0f-98fc-b8c39b11a5f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74dbfaba-40f4-48df-b536-f9b4bb2a2466"
              ],
              "failures": [
                "565b85bb-ba16-4608-b819-f0d571e884dc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "65216676-277c-40a0-b6e7-466591aa1094",
              "title": "Performance Testing",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\graphql-testing.ts",
              "file": "\\examples\\advanced\\graphql-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure GraphQL query performance",
                  "fullTitle": "GraphQL API Testing Performance Testing should measure GraphQL query performance",
                  "timedOut": false,
                  "duration": 2873,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getGraphQLClient('github');\nconst startTime = Date.now();\nconst query = `\n        query QuickQuery {\n          viewer {\nlogin\n          }\n        }\n      `;\nconst response = await client.query(query);\nconst endTime = Date.now();\nconst duration = endTime - startTime;\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(duration).to.be.lessThan(5000); // Should complete within 5 seconds\nconsole.log(`GraphQL query completed in ${duration}ms`);",
                  "err": {
                    "message": "AxiosError: Request failed with status code 401",
                    "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async GraphQLClient.executeWithRetry (src\\core\\clients\\GraphQLClient.ts:119:24)\n    at async GraphQLClient.query (src\\core\\clients\\GraphQLClient.ts:77:12)\n    at async Context.<anonymous> (examples\\advanced\\graphql-testing.ts:206:24)",
                    "diff": null
                  },
                  "uuid": "8815c4c5-0812-45a7-b3a3-fd1d071cbab0",
                  "parentUUID": "65216676-277c-40a0-b6e7-466591aa1094",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8815c4c5-0812-45a7-b3a3-fd1d071cbab0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2873,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "66bf1772-56d4-434b-bcd6-31b264fef1d5",
          "title": "JSON Fixture Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
          "file": "\\examples\\advanced\\json-fixture-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"JSON Fixture Testing\"",
              "fullTitle": "JSON Fixture Testing \"before all\" hook in \"JSON Fixture Testing\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup test fixtures directory\nconst fixturesDir = path.join(__dirname, 'fixtures');\nif (!fs.existsSync(fixturesDir)) {\n    fs.mkdirSync(fixturesDir, { recursive: true });\n}\n// Create sample fixture files\nconst userFixture = {\n    id: \"{{userId}}\",\n    name: \"{{$faker.person.fullName}}\",\n    email: \"{{$faker.internet.email}}\",\n    age: \"{{$random.number(18,65)}}\",\n    address: {\n        street: \"{{$faker.address.streetAddress}}\",\n        city: \"{{$faker.address.city}}\",\n        country: \"{{country}}\",\n        coordinates: {\n            lat: \"{{$faker.address.latitude}}\",\n            lng: \"{{$faker.address.longitude}}\"\n        }\n    },\n    preferences: {\n        theme: \"{{userTheme}}\",\n        notifications: true,\n        language: \"{{$env.DEFAULT_LANGUAGE}}\",\n        metadata: {\n            createdAt: \"{{$date.now}}\",\n            version: \"{{$util.guid}}\",\n            source: \"restifiedts-test\"\n        }\n    },\n    tags: [\"{{tag1}}\", \"{{tag2}}\", \"premium\"]\n};\nconst orderFixture = {\n    orderId: \"{{$random.uuid}}\",\n    customerId: \"{{userId}}\",\n    items: [\n        {\n            productId: \"{{productId1}}\",\n            name: \"{{$faker.commerce.product}}\",\n            price: \"{{$random.number(10,1000)}}\",\n            quantity: \"{{quantity1}}\"\n        },\n        {\n            productId: \"{{productId2}}\",\n            name: \"{{$faker.commerce.product}}\",\n            price: \"{{$random.number(10,1000)}}\",\n            quantity: \"{{quantity2}}\"\n        }\n    ],\n    shipping: {\n        address: \"{{shippingAddress}}\",\n        method: \"{{shippingMethod}}\",\n        trackingId: \"{{$util.base64encode(track-{{$random.uuid}})}}\"\n    },\n    payment: {\n        method: \"credit_card\",\n        cardLast4: \"{{$random.number(1000,9999)}}\",\n        amount: \"{{totalAmount}}\",\n        currency: \"{{$env.DEFAULT_CURRENCY}}\",\n        transactionId: \"{{$util.guid}}\"\n    },\n    timestamps: {\n        created: \"{{$date.now}}\",\n        updated: \"{{$date.now}}\",\n        estimatedDelivery: \"{{deliveryDate}}\"\n    }\n};\n// Write fixtures to files\nfs.writeFileSync(path.join(fixturesDir, 'user.json'), JSON.stringify(userFixture, null, 2));\nfs.writeFileSync(path.join(fixturesDir, 'order.json'), JSON.stringify(orderFixture, null, 2));\n// Set up global variables\nindex_1.restified.setGlobalVariables({\n    userId: 'user-12345',\n    country: 'United States',\n    userTheme: 'dark',\n    tag1: 'vip',\n    tag2: 'beta-tester'\n});\n// Set up environment variables for testing\nprocess.env.DEFAULT_LANGUAGE = 'en-US';\nprocess.env.DEFAULT_CURRENCY = 'USD';",
              "err": {},
              "uuid": "a7645a9d-87ca-4708-a87a-4370587ddceb",
              "parentUUID": "66bf1772-56d4-434b-bcd6-31b264fef1d5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"JSON Fixture Testing\"",
              "fullTitle": "JSON Fixture Testing \"after all\" hook in \"JSON Fixture Testing\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();\n// Cleanup fixtures\nconst fixturesDir = path.join(__dirname, 'fixtures');\nif (fs.existsSync(fixturesDir)) {\n    fs.rmSync(fixturesDir, { recursive: true, force: true });\n}",
              "err": {},
              "uuid": "b9dfd5c7-1dab-4792-bc36-13f92d9c3dbe",
              "parentUUID": "66bf1772-56d4-434b-bcd6-31b264fef1d5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7ebf615a-1853-4551-a4e5-cc8d55c31bd2",
              "title": "Basic JSON Variable Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve simple variables in JSON objects",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve simple variables in JSON objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    userId: '{{userId}}',\n    name: '{{userName}}',\n    active: true,\n    count: 42\n};\nindex_1.restified.setLocalVariable('userName', 'John Doe');\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.userId).to.equal('user-12345');\n(0, chai_1.expect)(resolved.name).to.equal('John Doe');\n(0, chai_1.expect)(resolved.active).to.be.true;\n(0, chai_1.expect)(resolved.count).to.equal(42);",
                  "err": {},
                  "uuid": "a535eeeb-e6bb-47d5-96eb-7b57e9ae4caa",
                  "parentUUID": "7ebf615a-1853-4551-a4e5-cc8d55c31bd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve nested variables in complex objects",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve nested variables in complex objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    user: {\n        profile: {\n            id: '{{userId}}',\n            settings: {\n                theme: '{{userTheme}}',\n                lang: '{{$env.DEFAULT_LANGUAGE}}'\n            }\n        }\n    },\n    metadata: {\n        timestamp: '{{$date.timestamp}}',\n        uuid: '{{$random.uuid}}'\n    }\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.user.profile.id).to.equal('user-12345');\n(0, chai_1.expect)(resolved.user.profile.settings.theme).to.equal('dark');\n(0, chai_1.expect)(resolved.user.profile.settings.lang).to.equal('en-US');\n(0, chai_1.expect)(resolved.metadata.timestamp).to.be.a('string');\n(0, chai_1.expect)(resolved.metadata.uuid).to.match(/^[0-9a-f-]+$/);",
                  "err": {},
                  "uuid": "b863505a-5cd5-4edb-9f8f-d4d3893c797c",
                  "parentUUID": "7ebf615a-1853-4551-a4e5-cc8d55c31bd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve variables in arrays",
                  "fullTitle": "JSON Fixture Testing Basic JSON Variable Resolution should resolve variables in arrays",
                  "timedOut": false,
                  "duration": 1662,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    users: ['{{userId}}', '{{$random.uuid}}'],\n    tags: ['{{tag1}}', '{{tag2}}', 'static-tag'],\n    coordinates: ['{{$faker.address.latitude}}', '{{$faker.address.longitude}}']\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.users[0]).to.equal('user-12345');\n(0, chai_1.expect)(resolved.users[1]).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(resolved.tags).to.deep.equal(['vip', 'beta-tester', 'static-tag']);\n(0, chai_1.expect)(resolved.coordinates).to.have.length(2);",
                  "err": {},
                  "uuid": "66115b74-7a22-46a3-9255-2b7c6e8c79ca",
                  "parentUUID": "7ebf615a-1853-4551-a4e5-cc8d55c31bd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a535eeeb-e6bb-47d5-96eb-7b57e9ae4caa",
                "b863505a-5cd5-4edb-9f8f-d4d3893c797c",
                "66115b74-7a22-46a3-9255-2b7c6e8c79ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1662,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "51f4b314-4e5d-4b6d-858e-fe80d10e87c1",
              "title": "Built-in Function Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve faker functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve faker functions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    name: '{{$faker.person.fullName}}',\n    email: '{{$faker.internet.email}}',\n    product: '{{$faker.commerce.product}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.name).to.be.a('string');\n(0, chai_1.expect)(resolved.email).to.include('@');\n(0, chai_1.expect)(resolved.product).to.be.a('string');",
                  "err": {},
                  "uuid": "3c197dd8-14bd-49d0-a549-0b0bbcf2912a",
                  "parentUUID": "51f4b314-4e5d-4b6d-858e-fe80d10e87c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve random utility functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve random utility functions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    uuid: '{{$random.uuid}}',\n    number: '{{$random.number}}',\n    rangeNumber: '{{$random.number(1,10)}}',\n    string: '{{$random.string}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(resolved.uuid).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(parseInt(resolved.number)).to.be.a('number');\n(0, chai_1.expect)(parseInt(resolved.rangeNumber)).to.be.within(1, 10);\n(0, chai_1.expect)(resolved.string).to.be.a('string');",
                  "err": {},
                  "uuid": "1bf248c7-8821-4f2d-b4a9-baeed44f84a5",
                  "parentUUID": "51f4b314-4e5d-4b6d-858e-fe80d10e87c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve date and utility functions",
                  "fullTitle": "JSON Fixture Testing Built-in Function Resolution should resolve date and utility functions",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const template = {\n    now: '{{$date.now}}',\n    timestamp: '{{$date.timestamp}}',\n    today: '{{$date.today}}',\n    guid: '{{$util.guid}}',\n    encoded: '{{$util.base64encode(test-data)}}'\n};\nconst resolved = index_1.restified.resolveVariables(template);\n(0, chai_1.expect)(new Date(resolved.now)).to.be.a('date');\n(0, chai_1.expect)(parseInt(resolved.timestamp)).to.be.a('number');\n(0, chai_1.expect)(resolved.today).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\n(0, chai_1.expect)(resolved.guid).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(resolved.encoded).to.be.a('string');",
                  "err": {},
                  "uuid": "f7ff2b62-fa67-433d-9b56-c7157ea9fc11",
                  "parentUUID": "51f4b314-4e5d-4b6d-858e-fe80d10e87c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c197dd8-14bd-49d0-a549-0b0bbcf2912a",
                "1bf248c7-8821-4f2d-b4a9-baeed44f84a5",
                "f7ff2b62-fa67-433d-9b56-c7157ea9fc11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "dac74bdb-515e-41b6-a1b0-821368ff24e6",
              "title": "JSON Fixture Loading",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load and resolve user fixture",
                  "fullTitle": "JSON Fixture Testing JSON Fixture Loading should load and resolve user fixture",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fixturePath = path.join(__dirname, 'fixtures', 'user.json');\nconst userData = index_1.restified.loadJsonFixture(fixturePath);\n(0, chai_1.expect)(userData.id).to.equal('user-12345');\n(0, chai_1.expect)(userData.name).to.be.a('string');\n(0, chai_1.expect)(userData.email).to.include('@');\n(0, chai_1.expect)(parseInt(userData.age)).to.be.within(18, 65);\n(0, chai_1.expect)(userData.address.country).to.equal('United States');\n(0, chai_1.expect)(userData.preferences.theme).to.equal('dark');\n(0, chai_1.expect)(userData.preferences.language).to.equal('en-US');\n(0, chai_1.expect)(userData.tags).to.deep.equal(['vip', 'beta-tester', 'premium']);",
                  "err": {},
                  "uuid": "46199a2e-aef9-4c8f-b4b6-b1f6b8283561",
                  "parentUUID": "dac74bdb-515e-41b6-a1b0-821368ff24e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load and resolve order fixture with cross-references",
                  "fullTitle": "JSON Fixture Testing JSON Fixture Loading should load and resolve order fixture with cross-references",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Set local variables for order\nindex_1.restified.setLocalVariables({\n    productId1: 'prod-001',\n    productId2: 'prod-002',\n    quantity1: '2',\n    quantity2: '1',\n    shippingAddress: '123 Main St, City, State',\n    shippingMethod: 'express',\n    totalAmount: '149.99',\n    deliveryDate: '2024-01-15'\n});\nconst fixturePath = path.join(__dirname, 'fixtures', 'order.json');\nconst orderData = index_1.restified.loadJsonFixture(fixturePath);\n(0, chai_1.expect)(orderData.customerId).to.equal('user-12345'); // From global variable\n(0, chai_1.expect)(orderData.orderId).to.match(/^[0-9a-f-]+$/);\n(0, chai_1.expect)(orderData.items).to.have.length(2);\n(0, chai_1.expect)(orderData.items[0].productId).to.equal('prod-001');\n(0, chai_1.expect)(orderData.items[0].quantity).to.equal('2');\n(0, chai_1.expect)(orderData.shipping.address).to.equal('123 Main St, City, State');\n(0, chai_1.expect)(orderData.payment.currency).to.equal('USD');\n(0, chai_1.expect)(orderData.payment.amount).to.equal('149.99');",
                  "err": {},
                  "uuid": "494ab2c5-00ee-496e-a4c0-3bbc8e5f4547",
                  "parentUUID": "dac74bdb-515e-41b6-a1b0-821368ff24e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46199a2e-aef9-4c8f-b4b6-b1f6b8283561",
                "494ab2c5-00ee-496e-a4c0-3bbc8e5f4547"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "0262314f-3d61-4789-911d-80699f38b4df",
              "title": "JSON String Resolution",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve variables in JSON strings",
                  "fullTitle": "JSON Fixture Testing JSON String Resolution should resolve variables in JSON strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonString = `{\n        \"userId\": \"{{userId}}\",\n        \"profile\": {\n          \"name\": \"{{$faker.person.fullName}}\",\n          \"settings\": {\n\"theme\": \"{{userTheme}}\",\n\"notifications\": true\n          }\n        },\n        \"timestamp\": \"{{$date.now}}\"\n      }`;\nconst resolved = index_1.restified.resolveJsonString(jsonString);\n(0, chai_1.expect)(resolved.userId).to.equal('user-12345');\n(0, chai_1.expect)(resolved.profile.name).to.be.a('string');\n(0, chai_1.expect)(resolved.profile.settings.theme).to.equal('dark');\n(0, chai_1.expect)(resolved.profile.settings.notifications).to.be.true;\n(0, chai_1.expect)(new Date(resolved.timestamp)).to.be.a('date');",
                  "err": {},
                  "uuid": "84bfdf34-f430-45b8-bb3e-4ff82b99a07e",
                  "parentUUID": "0262314f-3d61-4789-911d-80699f38b4df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84bfdf34-f430-45b8-bb3e-4ff82b99a07e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1c44f49b-deec-4c37-be56-4e94821f9054",
              "title": "API Testing with Dynamic Fixtures",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\json-fixture-testing.ts",
              "file": "\\examples\\advanced\\json-fixture-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should use resolved fixtures in API requests",
                  "fullTitle": "JSON Fixture Testing API Testing with Dynamic Fixtures should use resolved fixtures in API requests",
                  "timedOut": false,
                  "duration": 1070,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create dynamic user data\nconst userTemplate = {\n    name: '{{$faker.person.fullName}}',\n    email: '{{$faker.internet.email}}',\n    age: '{{$random.number(18,65)}}',\n    preferences: {\n        theme: '{{userTheme}}',\n        language: '{{$env.DEFAULT_LANGUAGE}}'\n    }\n};\nconst userData = index_1.restified.resolveVariables(userTemplate);\n// Use in API request\nconst response = await index_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .post('/users', userData)\n    .execute();\nawait response\n    .statusCode(201)\n    .execute();\n// Extract and validate\n(0, chai_1.expect)(userData.name).to.be.a('string');\n(0, chai_1.expect)(userData.email).to.include('@');\n(0, chai_1.expect)(userData.preferences.theme).to.equal('dark');\n(0, chai_1.expect)(userData.preferences.language).to.equal('en-US');",
                  "err": {},
                  "uuid": "a5285606-9a1f-4d61-8e9e-ee1dcbea6b43",
                  "parentUUID": "1c44f49b-deec-4c37-be56-4e94821f9054",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle complex nested fixture scenarios",
                  "fullTitle": "JSON Fixture Testing API Testing with Dynamic Fixtures should handle complex nested fixture scenarios",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Multi-level variable resolution\nindex_1.restified.setLocalVariable('baseUrl', 'https://api.example.com');\nindex_1.restified.setLocalVariable('version', 'v2');\nconst apiConfig = {\n    endpoints: {\n        users: '{{baseUrl}}/{{version}}/users',\n        orders: '{{baseUrl}}/{{version}}/orders/{{userId}}'\n    },\n    headers: {\n        'Authorization': 'Bearer {{authToken}}',\n        'User-Agent': 'RestifiedTS/{{$util.guid}}',\n        'X-Request-ID': '{{$random.uuid}}'\n    },\n    timeout: '{{requestTimeout}}'\n};\nindex_1.restified.setLocalVariables({\n    authToken: 'jwt-token-12345',\n    requestTimeout: '30000'\n});\nconst resolved = index_1.restified.resolveVariables(apiConfig);\n(0, chai_1.expect)(resolved.endpoints.users).to.equal('https://api.example.com/v2/users');\n(0, chai_1.expect)(resolved.endpoints.orders).to.equal('https://api.example.com/v2/orders/user-12345');\n(0, chai_1.expect)(resolved.headers.Authorization).to.equal('Bearer jwt-token-12345');\n(0, chai_1.expect)(resolved.headers['User-Agent']).to.include('RestifiedTS/');\n(0, chai_1.expect)(resolved.timeout).to.equal('30000');",
                  "err": {},
                  "uuid": "91177ab2-278c-4047-acca-9f425b9931c2",
                  "parentUUID": "1c44f49b-deec-4c37-be56-4e94821f9054",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5285606-9a1f-4d61-8e9e-ee1dcbea6b43",
                "91177ab2-278c-4047-acca-9f425b9931c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1071,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "36332796-5e4f-4882-aa35-05d24fbf3a2b",
          "title": "Multi-Client Integration Tests",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\multi-client.ts",
          "file": "\\examples\\advanced\\multi-client.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should use pre-configured API client with global authentication",
              "fullTitle": "Multi-Client Integration Tests should use pre-configured API client with global authentication",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'API Client Test');\n// Use the pre-configured API client (no setup needed!)\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .header('Authorization', `Bearer {{globalAuthToken}}`)\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .jsonPath('$.email', src_1.restified.getVariable('globalUserEmail'))\n    .extract('$.company.name', 'userCompany')\n    .execute();\nconsole.log('üè¢ User company:', src_1.restified.getVariable('userCompany'));",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:26:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:20:26)",
                "diff": null
              },
              "uuid": "c8c01543-9036-4bfa-833b-fa1bf380ca34",
              "parentUUID": "36332796-5e4f-4882-aa35-05d24fbf3a2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use testing utilities client with global config",
              "fullTitle": "Multi-Client Integration Tests should use testing utilities client with global config",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Test Utils Client');\n// Use the pre-configured test utilities client\n// Common headers are already included in the client configuration\nconst validationResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .header('X-Global-Auth-Token', '{{globalAuthToken}}')\n    .when()\n    .get('/headers')\n    .execute();\nawait validationResponse\n    .statusCode(200)\n    .jsonPath('$.headers.X-Test-Suite', src_1.restified.getVariable('testSuite'))\n    .jsonPath('$.headers.X-Environment', src_1.restified.getVariable('testEnvironment'))\n    .custom((response) => {\n    return response.data.headers['X-Global-Auth-Token'] === src_1.restified.getVariable('globalAuthToken');\n}, 'Should have correct global auth token in headers')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:49:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:43:32)",
                "diff": null
              },
              "uuid": "4e8ce9d6-2306-4fba-89e0-9044390c2539",
              "parentUUID": "36332796-5e4f-4882-aa35-05d24fbf3a2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate cross-service workflow using global data",
              "fullTitle": "Multi-Client Integration Tests should demonstrate cross-service workflow using global data",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!test_utils_1.GlobalTestUtils.shouldRunIntegrationTests()) {\n    console.log('‚è≠Ô∏è  Skipping integration test');\n    return;\n}\ntest_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Cross-Service Workflow');\n// Step 1: Use API service to get additional user data\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/2')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.name', 'workflowUserName')\n    .extract('$.website', 'workflowWebsite')\n    .execute();\n// Step 2: Use extracted data with test utilities service\n// Common headers are already included in the client configuration\nconst workflowResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .when()\n    .post('/post', {\n    message: `User {{workflowUserName}} from {{workflowWebsite}}`,\n    globalUser: '{{globalUserEmail}}',\n    environment: '{{testEnvironment}}',\n    timestamp: new Date().toISOString()\n})\n    .execute();\nawait workflowResponse\n    .statusCode(200)\n    .jsonPath('$.json.globalUser', src_1.restified.getVariable('globalUserEmail'))\n    .jsonPath('$.json.environment', src_1.restified.getVariable('testEnvironment'))\n    .execute();\nconsole.log('‚úÖ Cross-service workflow completed successfully');",
              "err": {},
              "uuid": "1c4dac73-1c65-407a-a6ad-73865a749e75",
              "parentUUID": "36332796-5e4f-4882-aa35-05d24fbf3a2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle service errors with global error patterns",
              "fullTitle": "Multi-Client Integration Tests should handle service errors with global error patterns",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Error Handling');\n// Test API service 404 error\n// Common headers are already included in the client configuration\nconst apiErrorResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .when()\n    .get('/users/99999')\n    .execute();\nawait apiErrorResponse\n    .statusCode(404)\n    .execute();\n// Test utilities service 500 error\n// Common headers are already included in the client configuration\nconst utilsErrorResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .when()\n    .get('/status/500')\n    .execute();\nawait utilsErrorResponse\n    .statusCode(500)\n    .execute();\nconsole.log('‚úÖ Error handling validated across all services');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:117:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:112:30)",
                "diff": null
              },
              "uuid": "400dce01-3bc5-4e08-9b12-e6c971560268",
              "parentUUID": "36332796-5e4f-4882-aa35-05d24fbf3a2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment-aware testing",
              "fullTitle": "Multi-Client Integration Tests should demonstrate environment-aware testing",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Multi-Client', 'Environment Testing');\nconst environment = src_1.restified.getVariable('testEnvironment');\nconst apiVersion = src_1.restified.getVariable('apiVersion');\n// Test shows how same test adapts to different environments\nconst environmentResponse = await src_1.restified\n    .given()\n    .useClient('api')\n    .header('X-Environment', environment)\n    .header('X-API-Version', apiVersion)\n    .header('X-Global-User', '{{globalUserEmail}}')\n    .when()\n    .get('/posts/1')\n    .execute();\nawait environmentResponse\n    .statusCode(200)\n    .jsonPath('$.id', 1)\n    .custom((response) => {\n    const hasTitle = response.data.hasOwnProperty('title');\n    const hasBody = response.data.hasOwnProperty('body');\n    return hasTitle && hasBody;\n}, 'Response should have expected structure for all environments')\n    .execute();\nconsole.log(`‚úÖ Environment-specific test completed for: ${environment}`);",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\advanced\\multi-client.ts:154:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\advanced\\multi-client.ts:146:33)",
                "diff": null
              },
              "uuid": "2869c433-9ef2-496d-b869-4db35c42f9c6",
              "parentUUID": "36332796-5e4f-4882-aa35-05d24fbf3a2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c4dac73-1c65-407a-a6ad-73865a749e75"
          ],
          "failures": [
            "c8c01543-9036-4bfa-833b-fa1bf380ca34",
            "4e8ce9d6-2306-4fba-89e0-9044390c2539",
            "400dce01-3bc5-4e08-9b12-e6c971560268",
            "2869c433-9ef2-496d-b869-4db35c42f9c6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "180d5ec4-2f5a-4749-b3a5-83aeb7969484",
          "title": "Response Store Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\response-store.ts",
          "file": "\\examples\\advanced\\response-store.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should store and retrieve responses using global client",
              "fullTitle": "Response Store Example should store and retrieve responses using global client",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Response Store', 'Store and Retrieve');\n// Use pre-configured API client from global setup\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api') // Global client\n    .when()\n    .get('/users/{{globalUserId}}') // Global user ID\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .execute();\n// Store the response with a custom key\nsrc_1.restified.storeResponse('user1-data');\n// Later, retrieve the stored response\nconst storedResponse = src_1.restified.getStoredResponse('user1-data');\n// Verify the stored response exists and has expected data\nif (storedResponse) {\n    console.log('Retrieved stored response for user:', storedResponse.data.name);\n    // You can perform additional assertions on stored responses\n    await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/users/1')\n        .execute()\n        .then(response => response\n        .statusCode(200)\n        .custom((response) => {\n        return response.data.id === storedResponse.data.id;\n    }, 'Current response should match stored response ID')\n        .execute());\n}",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\advanced\\response-store.ts:23:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\advanced\\response-store.ts:18:26)",
                "diff": null
              },
              "uuid": "25aa91a3-d076-4aaa-b946-a862d1d3a205",
              "parentUUID": "180d5ec4-2f5a-4749-b3a5-83aeb7969484",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle multiple stored responses",
              "fullTitle": "Response Store Example should handle multiple stored responses",
              "timedOut": false,
              "duration": 2215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Store responses for multiple users\nconst users = [1, 2, 3];\nfor (const userId of users) {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get(`/users/${userId}`)\n        .execute();\n    await response.statusCode(200).execute();\n    // Store each response with a unique key\n    src_1.restified.storeResponse(`user-${userId}`);\n}\n// Retrieve and validate all stored responses\nfor (const userId of users) {\n    const storedResponse = src_1.restified.getStoredResponse(`user-${userId}`);\n    if (storedResponse) {\n        console.log(`User ${userId} stored data:`, {\n            id: storedResponse.data.id,\n            name: storedResponse.data.name,\n            email: storedResponse.data.email\n        });\n        // Validate stored response data\n        if (storedResponse.data.id !== userId) {\n            throw new Error(`Stored response ID mismatch for user ${userId}`);\n        }\n    }\n    else {\n        throw new Error(`No stored response found for user ${userId}`);\n    }\n}",
              "err": {},
              "uuid": "4379322e-90d3-46fe-b1e5-f2735d359c2c",
              "parentUUID": "180d5ec4-2f5a-4749-b3a5-83aeb7969484",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should compare current response with stored response",
              "fullTitle": "Response Store Example should compare current response with stored response",
              "timedOut": false,
              "duration": 2293,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First, get and store user data\nconst initialResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait initialResponse.statusCode(200).execute();\nsrc_1.restified.storeResponse('initial-user-data');\n// Later, get the same data again\nconst currentResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait currentResponse.statusCode(200).execute();\n// Compare with stored response\nconst storedResponse = src_1.restified.getStoredResponse('initial-user-data');\nif (storedResponse) {\n    await currentResponse\n        .custom((response) => {\n        return JSON.stringify(response.data) === JSON.stringify(storedResponse.data);\n    }, 'Current response should match stored response')\n        .execute();\n    console.log('‚úÖ Response comparison successful - data is consistent');\n}",
              "err": {},
              "uuid": "10f92446-6791-498b-908b-a015c6aa04e0",
              "parentUUID": "180d5ec4-2f5a-4749-b3a5-83aeb7969484",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate response store with POST operations",
              "fullTitle": "Response Store Example should demonstrate response store with POST operations",
              "timedOut": false,
              "duration": 1127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create a new post\nconst createResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .contentType('application/json')\n    .when()\n    .post('/posts', {\n    title: 'Test Post for Response Store',\n    body: 'This post is used to demonstrate response store functionality',\n    userId: 1\n})\n    .execute();\nawait createResponse\n    .statusCode(201)\n    .extract('$.id', 'createdPostId')\n    .execute();\n// Store the creation response\nsrc_1.restified.storeResponse('post-creation');\n// Use stored response data in subsequent tests\nconst storedCreation = src_1.restified.getStoredResponse('post-creation');\nif (storedCreation) {\n    console.log('Created post stored with ID:', storedCreation.data.id);\n    console.log('Stored post title:', storedCreation.data.title);\n    // Verify the stored response contains expected data\n    if (!storedCreation.data.title.includes('Test Post')) {\n        throw new Error('Stored response does not contain expected title');\n    }\n    // Use stored response data for validation\n    const postId = storedCreation.data.id;\n    console.log(`Using stored post ID ${postId} for further operations`);\n}",
              "err": {},
              "uuid": "3f3ba81b-f434-4ca9-b1a0-63b4b49e0b0a",
              "parentUUID": "180d5ec4-2f5a-4749-b3a5-83aeb7969484",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle response store cleanup and management",
              "fullTitle": "Response Store Example should handle response store cleanup and management",
              "timedOut": false,
              "duration": 1936,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Store multiple responses\nconst responses = [];\nfor (let i = 1; i <= 3; i++) {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get(`/posts/${i}`)\n        .execute();\n    await response.statusCode(200).execute();\n    src_1.restified.storeResponse(`post-${i}`);\n    responses.push(`post-${i}`);\n}\n// Verify all responses are stored\nfor (const key of responses) {\n    const stored = src_1.restified.getStoredResponse(key);\n    if (!stored) {\n        throw new Error(`Response ${key} was not properly stored`);\n    }\n}\nconsole.log('‚úÖ All responses properly stored and retrieved');\n// Response store will be automatically cleaned up in the after hook\n// when restified.cleanup() is called",
              "err": {},
              "uuid": "caad11dc-1cd9-4450-9fbc-e331c56a4b17",
              "parentUUID": "180d5ec4-2f5a-4749-b3a5-83aeb7969484",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4379322e-90d3-46fe-b1e5-f2735d359c2c",
            "10f92446-6791-498b-908b-a015c6aa04e0",
            "3f3ba81b-f434-4ca9-b1a0-63b4b49e0b0a",
            "caad11dc-1cd9-4450-9fbc-e331c56a4b17"
          ],
          "failures": [
            "25aa91a3-d076-4aaa-b946-a862d1d3a205"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7574,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7a7c916e-d279-4b21-9ca8-c98b254fa5f0",
          "title": "Schema Validation Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\schema-validation.ts",
          "file": "\\examples\\advanced\\schema-validation.ts",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Schema Validation Example\"",
              "fullTitle": "Schema Validation Example \"after all\" hook in \"Schema Validation Example\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "9afca659-dd41-4159-90a1-4c15663e1cb8",
              "parentUUID": "7a7c916e-d279-4b21-9ca8-c98b254fa5f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should validate user object against JSON schema using global client",
              "fullTitle": "Schema Validation Example should validate user object against JSON schema using global client",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Schema Validation', 'User Object Validation');\nconst response = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured global client\n    .when()\n    .get('/users/{{globalUserId}}') // Use global user ID\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonSchema(userSchema)\n    .jsonPath('$.name')\n    .jsonPath('$.email')\n    .execute();",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\advanced\\schema-validation.ts:58:10)\n    at processImmediate (node:internal/timers:485:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\advanced\\schema-validation.ts:53:22)",
                "diff": null
              },
              "uuid": "cbffa47a-22cd-4f95-9c2a-c79647159f32",
              "parentUUID": "7a7c916e-d279-4b21-9ca8-c98b254fa5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate array of posts against JSON schema",
              "fullTitle": "Schema Validation Example should validate array of posts against JSON schema",
              "timedOut": false,
              "duration": 1200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Define JSON schema for array of posts\nconst postsArraySchema = {\n    type: 'array',\n    items: {\n        type: 'object',\n        required: ['id', 'title', 'body', 'userId'],\n        properties: {\n            id: { type: 'number' },\n            title: { type: 'string' },\n            body: { type: 'string' },\n            userId: { type: 'number' }\n        }\n    },\n    minItems: 1,\n    maxItems: 100\n};\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/posts')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonSchema(postsArraySchema)\n    .jsonPath('$[0].id')\n    .jsonPath('$[0].title')\n    .custom((response) => {\n    return Array.isArray(response.data) && response.data.length > 0;\n}, 'Response should be a non-empty array')\n    .execute();",
              "err": {},
              "uuid": "dfcf5d92-e577-49b0-8e9a-655768979dda",
              "parentUUID": "7a7c916e-d279-4b21-9ca8-c98b254fa5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle schema validation failure",
              "fullTitle": "Schema Validation Example should handle schema validation failure",
              "timedOut": false,
              "duration": 1068,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const strictUserSchema = {\n    type: 'object',\n    required: ['id', 'name', 'username', 'email', 'nonExistentField'],\n    properties: {\n        id: { type: 'number' },\n        name: { type: 'string' },\n        username: { type: 'string' },\n        email: { type: 'string', format: 'email' },\n        nonExistentField: { type: 'string' }\n    }\n};\ntry {\n    const response = await src_1.restified\n        .given()\n        .baseURL('https://jsonplaceholder.typicode.com')\n        .when()\n        .get('/users/1')\n        .execute();\n    await response\n        .statusCode(200)\n        .jsonSchema(strictUserSchema)\n        .execute();\n    throw new Error('Should have failed schema validation');\n}\ncatch (error) {\n    // Expected to fail due to missing required field\n    console.log('Schema validation correctly failed as expected');\n}",
              "err": {},
              "uuid": "86ce644b-6116-499f-96c4-57cf711575fb",
              "parentUUID": "7a7c916e-d279-4b21-9ca8-c98b254fa5f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dfcf5d92-e577-49b0-8e9a-655768979dda",
            "86ce644b-6116-499f-96c4-57cf711575fb"
          ],
          "failures": [
            "cbffa47a-22cd-4f95-9c2a-c79647159f32"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2272,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8b139559-3e87-46a5-a7de-d290ad60d331",
          "title": "Variable Store Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\variable-store.ts",
          "file": "\\examples\\advanced\\variable-store.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Variable Store Example\"",
              "fullTitle": "Variable Store Example \"before each\" hook in \"Variable Store Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear any existing local variables for clean tests\nsrc_1.restified.clearLocalVariables();",
              "err": {},
              "uuid": "8824ee02-24a9-4608-833e-babd3bf5c070",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Variable Store Example\"",
              "fullTitle": "Variable Store Example \"after all\" hook in \"Variable Store Example\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await src_1.restified.cleanup();",
              "err": {},
              "uuid": "7f853d84-f8f7-4454-9ef3-c33a8acfbeab",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should demonstrate global variable management",
              "fullTitle": "Variable Store Example should demonstrate global variable management",
              "timedOut": false,
              "duration": 599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set global variables\nsrc_1.restified.setGlobalVariable('expectedUserId', 1);\nsrc_1.restified.setGlobalVariable('testEnvironment', 'staging');\nsrc_1.restified.setGlobalVariable('requestSource', 'automated-test');\n// Set multiple global variables at once\nsrc_1.restified.setGlobalVariables({\n    'company': 'Restified Corp',\n    'version': '1.0.0',\n    'testSuite': 'variable-management'\n});\n// Make request and use global variables in headers/validation\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Test-Environment', '{{testEnvironment}}')\n    .header('X-Company', '{{company}}')\n    .header('X-Request-Source', '{{requestSource}}')\n    .when()\n    .get('/users/{{expectedUserId}}')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', 1)\n    .execute();\n// Retrieve and verify global variables\nconsole.log('Global Variables Set:');\nconsole.log('- Expected User ID:', src_1.restified.getGlobalVariable('expectedUserId'));\nconsole.log('- Test Environment:', src_1.restified.getGlobalVariable('testEnvironment'));\nconsole.log('- Request Source:', src_1.restified.getGlobalVariable('requestSource'));\nconsole.log('- Company:', src_1.restified.getGlobalVariable('company'));\nconsole.log('- Version:', src_1.restified.getGlobalVariable('version'));\nconsole.log('- Test Suite:', src_1.restified.getGlobalVariable('testSuite'));\n// Get all global variables\nconst allGlobalVars = src_1.restified.getGlobalVariables();\nconsole.log('Total global variables:', Object.keys(allGlobalVars).length);",
              "err": {},
              "uuid": "520b6421-3042-4795-b482-593dca460842",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate local variable management",
              "fullTitle": "Variable Store Example should demonstrate local variable management",
              "timedOut": false,
              "duration": 1709,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set local variables (test-scoped)\nsrc_1.restified.setLocalVariable('testName', 'Variable Store Test');\nsrc_1.restified.setLocalVariable('requestId', Math.random().toString(36).substring(7));\nsrc_1.restified.setLocalVariable('expectedStatus', 200);\n// Set multiple local variables at once\nsrc_1.restified.setLocalVariables({\n    'currentTest': 'local-variables',\n    'timestamp': new Date().toISOString(),\n    'retryCount': 3\n});\n// Use local variables in requests\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Request-Id', '{{requestId}}')\n    .header('X-Test-Name', '{{testName}}')\n    .when()\n    .get('/posts/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .execute();\n// Retrieve local variables\nconsole.log('Local Variables:');\nconsole.log('- Test Name:', src_1.restified.getLocalVariable('testName'));\nconsole.log('- Request ID:', src_1.restified.getLocalVariable('requestId'));\nconsole.log('- Expected Status:', src_1.restified.getLocalVariable('expectedStatus'));\nconsole.log('- Current Test:', src_1.restified.getLocalVariable('currentTest'));\n// Get all local variables\nconst allLocalVars = src_1.restified.getLocalVariables();\nconsole.log('Total local variables:', Object.keys(allLocalVars).length);",
              "err": {},
              "uuid": "51a56869-203e-4a44-9556-bfa16e3a2cf7",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate extracted variable management",
              "fullTitle": "Variable Store Example should demonstrate extracted variable management",
              "timedOut": false,
              "duration": 1801,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Make a request and extract multiple values\nconst userResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.id', 'userId')\n    .extract('$.name', 'userName')\n    .extract('$.email', 'userEmail')\n    .extract('$.address.city', 'userCity')\n    .extract('$.company.name', 'companyName')\n    .execute();\n// Use extracted variables in subsequent requests\nconst postsResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-User-Id', '{{userId}}')\n    .header('X-User-Name', '{{userName}}')\n    .when()\n    .get('/posts?userId={{userId}}')\n    .execute();\nawait postsResponse\n    .statusCode(200)\n    .custom((response) => {\n    const posts = response.data;\n    return Array.isArray(posts) && posts.length > 0;\n}, 'Should have posts for the user')\n    .custom((response) => {\n    const posts = response.data;\n    return posts.every(post => post.userId.toString() === src_1.restified.getVariable('userId').toString());\n}, 'All posts should belong to the extracted user ID')\n    .execute();\n// Display extracted variables\nconsole.log('Extracted Variables:');\nconsole.log('- User ID:', src_1.restified.getVariable('userId'));\nconsole.log('- User Name:', src_1.restified.getVariable('userName'));\nconsole.log('- User Email:', src_1.restified.getVariable('userEmail'));\nconsole.log('- User City:', src_1.restified.getVariable('userCity'));\nconsole.log('- Company Name:', src_1.restified.getVariable('companyName'));",
              "err": {},
              "uuid": "23affa13-db00-4470-9ee0-d7e5afa5c71c",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment variable usage",
              "fullTitle": "Variable Store Example should demonstrate environment variable usage",
              "timedOut": false,
              "duration": 1143,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Set environment variables (simulating external configuration)\nprocess.env.TEST_USER_ID = '2';\nprocess.env.TEST_ENVIRONMENT = 'production';\nprocess.env.API_VERSION = 'v1';\n// Use environment variables in headers and path parameters\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Environment', '{{$env.TEST_ENVIRONMENT}}')\n    .header('X-API-Version', '{{$env.API_VERSION}}')\n    .when()\n    .get('/users/{{$env.TEST_USER_ID}}')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.id', 2)\n    .jsonPath('$.name')\n    .execute();\n// Environment variables are accessed through the special $env prefix\nconsole.log('Environment Variables Used:');\nconsole.log('- User ID:', process.env.TEST_USER_ID);\nconsole.log('- Environment:', process.env.TEST_ENVIRONMENT);\nconsole.log('- API Version:', process.env.API_VERSION);",
              "err": {
                "message": "Error: Assertions failed:\nExpected status code 200, got 404\nJSONPath '$.id' expected '2', got 'undefined'\nJSONPath '$.name' should match at least one element",
                "estack": "Error: Assertions failed:\nExpected status code 200, got 404\nJSONPath '$.id' expected '2', got 'undefined'\nJSONPath '$.name' should match at least one element\n    at ThenStep.execute (src\\core\\dsl\\then.core.ts:286:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (examples\\advanced\\variable-store.ts:165:5)",
                "diff": null
              },
              "uuid": "616fc481-f8e5-4dcb-b2fc-715ac8f319c6",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate variable priority and resolution",
              "fullTitle": "Variable Store Example should demonstrate variable priority and resolution",
              "timedOut": false,
              "duration": 1597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set variables with same name at different levels to demonstrate priority\nconst testVar = 'priorityTest';\n// 1. Global variable (lowest priority)\nsrc_1.restified.setGlobalVariable(testVar, 'global-value');\n// 2. Local variable (higher priority)\nsrc_1.restified.setLocalVariable(testVar, 'local-value');\n// 3. Environment variable (can be accessed separately)\nprocess.env.PRIORITY_TEST = 'env-value';\n// Test variable resolution priority\nconsole.log('Variable Priority Resolution:');\nconsole.log('- Global value:', src_1.restified.getGlobalVariable(testVar));\nconsole.log('- Local value:', src_1.restified.getLocalVariable(testVar));\nconsole.log('- General getVariable() returns:', src_1.restified.getVariable(testVar));\n// Make a request to extract a value (highest priority)\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .extract('$.name', testVar) // This will override local variable\n    .execute();\nconsole.log('After extraction:');\nconsole.log('- Extracted value:', src_1.restified.getVariable(testVar));\n// Demonstrate that local variable still exists but extracted takes priority\nconsole.log('- Local variable still exists:', src_1.restified.getLocalVariable(testVar));\n// Test using different variable names in templates\nconst testResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Local-Var', '{{priorityTest}}') // Will resolve to extracted value\n    .header('X-Env-Var', '{{$env.PRIORITY_TEST}}') // Will resolve to env value\n    .when()\n    .get('/posts/1')\n    .execute();\nawait testResponse.statusCode(200).execute();",
              "err": {},
              "uuid": "a54c69eb-c098-43fa-b899-6bf79c767e7a",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate comprehensive variable operations",
              "fullTitle": "Variable Store Example should demonstrate comprehensive variable operations",
              "timedOut": false,
              "duration": 1565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up a complex scenario with multiple variable types\nsrc_1.restified.setGlobalVariable('testSuite', 'comprehensive-variables');\nsrc_1.restified.setLocalVariables({\n    'testId': 'comp-test-001',\n    'targetUserId': 1,\n    'requestType': 'user-data-fetch'\n});\nprocess.env.MAX_RETRIES = '3';\nprocess.env.REQUEST_TIMEOUT = '5000';\n// Make request using all variable types\nconst userResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-Test-Id', '{{testId}}')\n    .header('X-Request-Type', '{{requestType}}')\n    .header('X-Test-Suite', '{{testSuite}}')\n    .header('X-Max-Retries', '{{$env.MAX_RETRIES}}')\n    .when()\n    .get('/users/{{targetUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .extract('$.name', 'extractedUserName')\n    .extract('$.company.name', 'extractedCompanyName')\n    .execute();\n// Now use extracted data in another request  \nconst postsResponse = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .header('X-User-Name', '{{extractedUserName}}')\n    .header('X-Company', '{{extractedCompanyName}}')\n    .header('X-Suite', '{{testSuite}}')\n    .when()\n    .get('/posts?userId={{targetUserId}}')\n    .execute();\nawait postsResponse\n    .statusCode(200)\n    .custom((response) => {\n    return Array.isArray(response.data) && response.data.length > 0;\n}, 'Should retrieve posts for the user')\n    .execute();\n// Display complete variable summary\nconsole.log('\\n=== Complete Variable Summary ===');\nconsole.log('Global Variables:', src_1.restified.getGlobalVariables());\nconsole.log('Local Variables:', src_1.restified.getLocalVariables());\nconsole.log('Extracted Variables: {');\nconsole.log('  extractedUserName:', src_1.restified.getVariable('extractedUserName'));\nconsole.log('  extractedCompanyName:', src_1.restified.getVariable('extractedCompanyName'));\nconsole.log('}');\nconsole.log('Environment Variables Used: {');\nconsole.log('  MAX_RETRIES:', process.env.MAX_RETRIES);\nconsole.log('  REQUEST_TIMEOUT:', process.env.REQUEST_TIMEOUT);\nconsole.log('}');",
              "err": {},
              "uuid": "33c33c37-f73f-42ad-9990-859406dee5d5",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate variable clearing and cleanup",
              "fullTitle": "Variable Store Example should demonstrate variable clearing and cleanup",
              "timedOut": false,
              "duration": 1042,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up variables\nsrc_1.restified.setGlobalVariable('temp1', 'value1');\nsrc_1.restified.setLocalVariable('temp2', 'value2');\n// Extract some data\nconst response = await src_1.restified\n    .given()\n    .baseURL('https://jsonplaceholder.typicode.com')\n    .when()\n    .get('/users/1')\n    .execute();\nawait response\n    .statusCode(200)\n    .extract('$.id', 'temp3')\n    .execute();\n// Verify variables exist\nconsole.log('Before cleanup:');\nconsole.log('- Global temp1:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Local temp2:', src_1.restified.getLocalVariable('temp2'));\nconsole.log('- Extracted temp3:', src_1.restified.getVariable('temp3'));\n// Clear specific variable types\nsrc_1.restified.clearLocalVariables();\nconsole.log('\\nAfter clearing local variables:');\nconsole.log('- Global temp1:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Local temp2:', src_1.restified.getLocalVariable('temp2')); // Should be undefined\nconsole.log('- Extracted temp3:', src_1.restified.getVariable('temp3'));\n// Note: There's no clearVariables method, only clearLocalVariables\n// Global variables and extracted variables persist until cleanup\nconsole.log('\\nNote: Global and extracted variables persist until cleanup');\nconsole.log('- Global temp1 still exists:', src_1.restified.getGlobalVariable('temp1'));\nconsole.log('- Extracted temp3 still exists:', src_1.restified.getVariable('temp3'));",
              "err": {},
              "uuid": "830b6c33-d944-4709-8d6f-ce607c7d588b",
              "parentUUID": "8b139559-3e87-46a5-a7de-d290ad60d331",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "520b6421-3042-4795-b482-593dca460842",
            "51a56869-203e-4a44-9556-bfa16e3a2cf7",
            "23affa13-db00-4470-9ee0-d7e5afa5c71c",
            "a54c69eb-c098-43fa-b899-6bf79c767e7a",
            "33c33c37-f73f-42ad-9990-859406dee5d5",
            "830b6c33-d944-4709-8d6f-ce607c7d588b"
          ],
          "failures": [
            "616fc481-f8e5-4dcb-b2fc-715ac8f319c6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9456,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "6a7483ee-cc2e-4e32-87d3-604181a61d7c",
          "title": "WebSocket Real-time Testing",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
          "file": "\\examples\\advanced\\websocket-testing.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WebSocket Real-time Testing\"",
              "fullTitle": "WebSocket Real-time Testing \"before all\" hook in \"WebSocket Real-time Testing\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create WebSocket client for echo service\nindex_1.restified.createWebSocketClient('echo', {\n    url: 'wss://echo.websocket.org',\n    timeout: 10000,\n    reconnectAttempts: 3,\n    reconnectDelay: 1000,\n    pingInterval: 30000\n});\n// Create WebSocket client for crypto data (if available)\nindex_1.restified.createWebSocketClient('crypto', {\n    url: 'wss://stream.binance.com:9443/ws/btcusdt@ticker',\n    timeout: 10000,\n    reconnectAttempts: 2\n});",
              "err": {},
              "uuid": "6f247c0d-5580-4b0f-af54-a9ee77ceb019",
              "parentUUID": "6a7483ee-cc2e-4e32-87d3-604181a61d7c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"WebSocket Real-time Testing\"",
              "fullTitle": "WebSocket Real-time Testing \"after all\" hook in \"WebSocket Real-time Testing\"",
              "timedOut": false,
              "duration": 357,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await index_1.restified.cleanup();",
              "err": {},
              "uuid": "ba297aed-39c1-40cc-9643-21855e8afe4c",
              "parentUUID": "6a7483ee-cc2e-4e32-87d3-604181a61d7c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "5ad0b200-f59e-4b50-977e-2df495e5e51e",
              "title": "WebSocket Connection Management",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should connect to WebSocket server",
                  "fullTitle": "WebSocket Real-time Testing WebSocket Connection Management should connect to WebSocket server",
                  "timedOut": false,
                  "duration": 593,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await index_1.restified.connectWebSocket('echo');\nconst client = index_1.restified.getWebSocketClient('echo');\n(0, chai_1.expect)(client.isConnected()).to.be.true;",
                  "err": {},
                  "uuid": "5bb204df-c67c-4081-b758-eb730137d963",
                  "parentUUID": "5ad0b200-f59e-4b50-977e-2df495e5e51e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle connection timeout",
                  "fullTitle": "WebSocket Real-time Testing WebSocket Connection Management should handle connection timeout",
                  "timedOut": false,
                  "duration": 9,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Create client with very short timeout\nindex_1.restified.createWebSocketClient('timeout-test', {\n    url: 'wss://invalid-websocket-server.example.com',\n    timeout: 1000\n});\ntry {\n    await index_1.restified.connectWebSocket('timeout-test');\n    chai_1.expect.fail('Should have thrown timeout error');\n}\ncatch (error) {\n    (0, chai_1.expect)(error.message).to.include('timeout');\n}",
                  "err": {
                    "message": "Error: getaddrinfo ENOTFOUND invalid-websocket-server.example.com",
                    "estack": "Error: getaddrinfo ENOTFOUND invalid-websocket-server.example.com\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
                    "diff": null
                  },
                  "uuid": "c3d0142c-6170-4661-9f39-fdee8b7b52d5",
                  "parentUUID": "5ad0b200-f59e-4b50-977e-2df495e5e51e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bb204df-c67c-4081-b758-eb730137d963"
              ],
              "failures": [
                "c3d0142c-6170-4661-9f39-fdee8b7b52d5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 602,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "200223ae-122b-4e31-8d04-35371614706c",
              "title": "Message Communication",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send and receive text messages",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should send and receive text messages",
                  "timedOut": false,
                  "duration": 387,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\n// Clear any existing messages\nclient.clearMessages();\nconst testMessage = 'Hello WebSocket from RestifiedTS!';\nawait client.send(testMessage);\n// Wait for echo response\nconst receivedMessage = await client.waitForMessage((msg) => msg.data === testMessage, 5000);\n(0, chai_1.expect)(receivedMessage.data).to.equal(testMessage);\n(0, chai_1.expect)(receivedMessage.timestamp).to.be.a('number');\n(0, chai_1.expect)(receivedMessage.id).to.be.a('string');",
                  "err": {},
                  "uuid": "2cee8afc-95c3-4f86-9a15-d34a056189b9",
                  "parentUUID": "200223ae-122b-4e31-8d04-35371614706c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send and receive JSON messages",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should send and receive JSON messages",
                  "timedOut": false,
                  "duration": 193,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\nconst jsonMessage = {\n    type: 'test',\n    data: {\n        userId: '{{$random.uuid}}',\n        timestamp: '{{$date.now}}',\n        message: 'JSON test from RestifiedTS'\n    }\n};\nawait client.sendJSON(jsonMessage);\n// Wait for JSON echo response\nconst receivedMessage = await client.waitForMessage((msg) => msg.data && msg.data.type === 'test', 5000);\n(0, chai_1.expect)(receivedMessage.data.type).to.equal('test');\n(0, chai_1.expect)(receivedMessage.data.data.message).to.equal('JSON test from RestifiedTS');\n(0, chai_1.expect)(receivedMessage.data.data.userId).to.match(/^[0-9a-f-]+$/);",
                  "err": {},
                  "uuid": "e394062d-44cb-4e65-8865-2913e07b8f8f",
                  "parentUUID": "200223ae-122b-4e31-8d04-35371614706c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle message with variables",
                  "fullTitle": "WebSocket Real-time Testing Message Communication should handle message with variables",
                  "timedOut": false,
                  "duration": 5002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nindex_1.restified.setGlobalVariable('userName', 'RestifiedTester');\nindex_1.restified.setGlobalVariable('sessionId', 'session-12345');\nclient.clearMessages();\nconst messageWithVars = {\n    user: '{{userName}}',\n    session: '{{sessionId}}',\n    action: 'ping',\n    timestamp: Date.now()\n};\nawait client.sendJSON(messageWithVars);\nconst receivedMessage = await client.waitForMessage((msg) => msg.data && msg.data.user === 'RestifiedTester', 5000);\n(0, chai_1.expect)(receivedMessage.data.user).to.equal('RestifiedTester');\n(0, chai_1.expect)(receivedMessage.data.session).to.equal('session-12345');\n(0, chai_1.expect)(receivedMessage.data.action).to.equal('ping');",
                  "err": {
                    "message": "Error: Timeout waiting for message after 5000ms",
                    "estack": "Error: Timeout waiting for message after 5000ms\n    at Timeout._onTimeout (src\\core\\clients\\WebSocketClient.ts:199:16)\n    at listOnTimeout (node:internal/timers:588:17)\n    at processTimers (node:internal/timers:523:7)",
                    "diff": null
                  },
                  "uuid": "3fbb3a33-83d1-4ecf-8801-5bd7afe9e41d",
                  "parentUUID": "200223ae-122b-4e31-8d04-35371614706c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2cee8afc-95c3-4f86-9a15-d34a056189b9",
                "e394062d-44cb-4e65-8865-2913e07b8f8f"
              ],
              "failures": [
                "3fbb3a33-83d1-4ecf-8801-5bd7afe9e41d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5582,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "28ec9604-d104-40d0-b26b-a59abd0ee09b",
              "title": "Message Filtering and Querying",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should filter messages by criteria",
                  "fullTitle": "WebSocket Real-time Testing Message Filtering and Querying should filter messages by criteria",
                  "timedOut": false,
                  "duration": 1009,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\n// Send multiple messages\nawait client.sendJSON({ type: 'order', id: 1, status: 'pending' });\nawait client.sendJSON({ type: 'order', id: 2, status: 'completed' });\nawait client.sendJSON({ type: 'notification', message: 'System update' });\n// Wait a bit for all messages to be received\nawait new Promise(resolve => setTimeout(resolve, 1000));\nconst orderMessages = client.getMessagesWhere((msg) => msg.data && msg.data.type === 'order');\n(0, chai_1.expect)(orderMessages).to.have.length(2);\nconst completedOrders = client.getMessagesWhere((msg) => msg.data && msg.data.type === 'order' && msg.data.status === 'completed');\n(0, chai_1.expect)(completedOrders).to.have.length(1);\n(0, chai_1.expect)(completedOrders[0].data.id).to.equal(2);",
                  "err": {},
                  "uuid": "95321745-b3c8-45fa-b7a3-a2d6d0923a9b",
                  "parentUUID": "28ec9604-d104-40d0-b26b-a59abd0ee09b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should wait for specific message patterns",
                  "fullTitle": "WebSocket Real-time Testing Message Filtering and Querying should wait for specific message patterns",
                  "timedOut": false,
                  "duration": 1210,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nclient.clearMessages();\n// Send message that will trigger wait condition\nsetTimeout(async () => {\n    await client.sendJSON({\n        type: 'response',\n        requestId: 'req-123',\n        result: 'success'\n    });\n}, 1000);\n// Wait for specific response\nconst response = await client.waitForMessage((msg) => msg.data &&\n    msg.data.type === 'response' &&\n    msg.data.requestId === 'req-123', 5000);\n(0, chai_1.expect)(response.data.result).to.equal('success');",
                  "err": {},
                  "uuid": "a73f8afe-c4a1-4f29-8558-ba46401f0d0f",
                  "parentUUID": "28ec9604-d104-40d0-b26b-a59abd0ee09b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95321745-b3c8-45fa-b7a3-a2d6d0923a9b",
                "a73f8afe-c4a1-4f29-8558-ba46401f0d0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2219,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "650d7caf-2b77-4371-8481-61873ec4ded8",
              "title": "Connection Health and Ping",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure ping latency",
                  "fullTitle": "WebSocket Real-time Testing Connection Health and Ping should measure ping latency",
                  "timedOut": false,
                  "duration": 193,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nif (client.isConnected()) {\n    const latency = await client.ping();\n    (0, chai_1.expect)(latency).to.be.a('number');\n    (0, chai_1.expect)(latency).to.be.greaterThan(0);\n    (0, chai_1.expect)(latency).to.be.lessThan(10000); // Less than 10 seconds\n    console.log(`WebSocket ping latency: ${latency}ms`);\n}",
                  "err": {},
                  "uuid": "402ffbff-fe81-448d-9530-c37ff967a817",
                  "parentUUID": "650d7caf-2b77-4371-8481-61873ec4ded8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "402ffbff-fe81-448d-9530-c37ff967a817"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 193,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "e5a1d335-6e5b-4217-a152-036a3bb581e5",
              "title": "Real-time Data Stream Testing",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should receive crypto price updates",
                  "fullTitle": "WebSocket Real-time Testing Real-time Data Stream Testing should receive crypto price updates",
                  "timedOut": false,
                  "duration": 1685,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await index_1.restified.connectWebSocket('crypto');\n    const client = index_1.restified.getWebSocketClient('crypto');\n    client.clearMessages();\n    // Wait for price update message\n    const priceUpdate = await client.waitForMessage((msg) => msg.data && typeof msg.data.c !== 'undefined', // 'c' is close price\n    10000);\n    (0, chai_1.expect)(priceUpdate.data).to.have.property('s'); // symbol\n    (0, chai_1.expect)(priceUpdate.data).to.have.property('c'); // close price\n    (0, chai_1.expect)(priceUpdate.data.s).to.equal('BTCUSDT');\n    (0, chai_1.expect)(parseFloat(priceUpdate.data.c)).to.be.greaterThan(0);\n    console.log(`Received BTC price: $${priceUpdate.data.c}`);\n}\ncatch (error) {\n    console.log('Crypto stream test skipped - service unavailable');\n    this.skip();\n}",
                  "err": {},
                  "uuid": "822da132-d9cd-45d7-8467-ecd1de1dbd23",
                  "parentUUID": "e5a1d335-6e5b-4217-a152-036a3bb581e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle multiple concurrent connections",
                  "fullTitle": "WebSocket Real-time Testing Real-time Data Stream Testing should handle multiple concurrent connections",
                  "timedOut": false,
                  "duration": 2088,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create multiple echo connections\nindex_1.restified.createWebSocketClient('echo2', {\n    url: 'wss://echo.websocket.org',\n    timeout: 10000\n});\nawait index_1.restified.connectWebSocket('echo2');\nconst client1 = index_1.restified.getWebSocketClient('echo');\nconst client2 = index_1.restified.getWebSocketClient('echo2');\n(0, chai_1.expect)(client1.isConnected()).to.be.true;\n(0, chai_1.expect)(client2.isConnected()).to.be.true;\n// Send different messages on each connection\nclient1.clearMessages();\nclient2.clearMessages();\nawait client1.send('Message from connection 1');\nawait client2.send('Message from connection 2');\n// Verify each connection received its own message\nconst msg1 = await client1.waitForMessage((msg) => msg.data === 'Message from connection 1', 3000);\nconst msg2 = await client2.waitForMessage((msg) => msg.data === 'Message from connection 2', 3000);\n(0, chai_1.expect)(msg1.data).to.equal('Message from connection 1');\n(0, chai_1.expect)(msg2.data).to.equal('Message from connection 2');",
                  "err": {},
                  "uuid": "de5f1b1c-1f7c-4554-89bb-88db74c9b3c2",
                  "parentUUID": "e5a1d335-6e5b-4217-a152-036a3bb581e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "822da132-d9cd-45d7-8467-ecd1de1dbd23",
                "de5f1b1c-1f7c-4554-89bb-88db74c9b3c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3773,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "a5e30602-97e8-46eb-aae4-2341b889c7af",
              "title": "Error Handling and Reconnection",
              "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\advanced\\websocket-testing.ts",
              "file": "\\examples\\advanced\\websocket-testing.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle disconnection gracefully",
                  "fullTitle": "WebSocket Real-time Testing Error Handling and Reconnection should handle disconnection gracefully",
                  "timedOut": false,
                  "duration": 211,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = index_1.restified.getWebSocketClient('echo');\nif (client.isConnected()) {\n    await client.disconnect();\n    (0, chai_1.expect)(client.isConnected()).to.be.false;\n    // Test result should show disconnection\n    const testResult = client.getTestResult();\n    (0, chai_1.expect)(testResult.connected).to.be.false;\n    (0, chai_1.expect)(testResult.disconnectionTime).to.be.a('number');\n    (0, chai_1.expect)(testResult.messages).to.be.an('array');\n}",
                  "err": {},
                  "uuid": "046afd82-09fc-4372-b142-ed58d947d71c",
                  "parentUUID": "a5e30602-97e8-46eb-aae4-2341b889c7af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "046afd82-09fc-4372-b142-ed58d947d71c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "43d588da-ef54-4eec-8f14-16b8cef74208",
          "title": "Bearer Token Authentication Example",
          "fullFile": "C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\examples\\authentication\\bearer-auth.ts",
          "file": "\\examples\\authentication\\bearer-auth.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"before all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "837f433d-341c-48de-858e-5b482059e1a8",
              "parentUUID": "43d588da-ef54-4eec-8f14-16b8cef74208",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"before each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "be0cd024-18e0-4084-92a1-92e8d4b13cd8",
              "parentUUID": "43d588da-ef54-4eec-8f14-16b8cef74208",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"after all\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "74dbae72-b95c-4428-93e4-0b1331bc6835",
              "parentUUID": "43d588da-ef54-4eec-8f14-16b8cef74208",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "fullTitle": "Bearer Token Authentication Example \"after each\" hook: Bearer Token in \"Bearer Token Authentication Example\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Simple GET', 'Global Setup');\n(0, chai_1.expect)(true).to.be.true; // Ensure global setup is complete",
              "err": {},
              "uuid": "33ce6237-d9a0-495e-8f5a-8359da7f72be",
              "parentUUID": "43d588da-ef54-4eec-8f14-16b8cef74208",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should use global authentication token with testUtils client",
              "fullTitle": "Bearer Token Authentication Example should use global authentication token with testUtils client",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Global Token Usage');\n// Use the global auth token that was obtained during global setup\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils') // Pre-configured client\n    .bearerToken('{{globalAuthToken}}') // Global auth token\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', src_1.restified.getVariable('globalAuthToken'))\n    .execute();\nconsole.log('‚úÖ Authentication successful with global token');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:44:10)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\authentication\\bearer-auth.ts:38:22)",
                "diff": null
              },
              "uuid": "1909cce4-294b-46bd-ad69-6ff7bcd5a7e4",
              "parentUUID": "43d588da-ef54-4eec-8f14-16b8cef74208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate environment-based authentication",
              "fullTitle": "Bearer Token Authentication Example should demonstrate environment-based authentication",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Environment Auth');\n// Use environment variable that was set up during global setup\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .bearerToken('{{$env.EXAMPLE_API_KEY}}') // From global setup\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', process.env.EXAMPLE_API_KEY)\n    .execute();\nconsole.log('‚úÖ Environment-based authentication successful');",
              "err": {
                "message": "TypeError: Invalid URL",
                "estack": "TypeError: Invalid URL\n    at new URL (node:internal/url:818:25)\n    at dispatchHttpRequest (node_modules\\axios\\lib\\adapters\\http.js:232:20)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\node_modules\\axios\\lib\\adapters\\http.js:152:5\n    at new Promise (<anonymous>)\n    at wrapAsync (node_modules\\axios\\lib\\adapters\\http.js:132:10)\n    at http (node_modules\\axios\\lib\\adapters\\http.js:170:10)\n    at Axios.dispatchRequest (node_modules\\axios\\lib\\core\\dispatchRequest.js:51:10)\n    at Axios._request (node_modules\\axios\\lib\\core\\Axios.js:187:33)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:40:25)\n    at Function.wrap [as request] (node_modules\\axios\\lib\\helpers\\bind.js:5:15)\n    at WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:183:28\n    at RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:32)\n    at C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:40\n    at CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:209:29)\n    at CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:33)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:66:10)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at async WhenStep.performHttpRequest (src\\core\\dsl\\when.core.ts:230:20)\n    at async RetryManager.executeWithRetry (src\\core\\network\\RetryManager.ts:168:26)\n    at async C:\\RajKumar\\Otalio\\Otalio\\Apps\\RestifiedApp\\Restified\\src\\core\\dsl\\when.core.ts:181:16\n    at async CircuitBreakerManager.executeRequest (src\\core\\network\\CircuitBreakerManager.ts:212:9)\n    at async CircuitBreakerManager.executeInClosedState (src\\core\\network\\CircuitBreakerManager.ts:106:22)\n    at async CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:85:16)\n    at async WhenStep.execute (src\\core\\dsl\\when.core.ts:177:12)\n    at async Context.<anonymous> (examples\\authentication\\bearer-auth.ts:60:22)",
                "diff": null
              },
              "uuid": "aee444a9-6677-420d-9d95-2393ad9da214",
              "parentUUID": "43d588da-ef54-4eec-8f14-16b8cef74208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show authenticated API workflow",
              "fullTitle": "Bearer Token Authentication Example should show authenticated API workflow",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'API Workflow');\n// Step 1: Use authenticated API client for business operation\n// Common headers are already included in the client configuration\nconst userResponse = await src_1.restified\n    .given()\n    .useClient('api') // Pre-configured with global auth\n    .header('Authorization', `Bearer {{globalAuthToken}}`)\n    .when()\n    .get('/users/{{globalUserId}}')\n    .execute();\nawait userResponse\n    .statusCode(200)\n    .jsonPath('$.id', src_1.restified.getVariable('globalUserId'))\n    .extract('$.phone', 'userPhone')\n    .execute();\n// Step 2: Validate auth token with test utilities\nconst validateResponse = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .header('X-User-Phone', '{{userPhone}}')\n    .header('X-Global-User', '{{globalUserEmail}}')\n    .bearerToken('{{globalAuthToken}}')\n    .when()\n    .get('/bearer')\n    .execute();\nawait validateResponse\n    .statusCode(200)\n    .jsonPath('$.authenticated', true)\n    .custom((response) => {\n    return response.data.token === src_1.restified.getVariable('globalAuthToken');\n}, 'Token should match global auth token')\n    .execute();\nconsole.log('‚úÖ Full authenticated workflow completed');",
              "err": {
                "message": "Error: Circuit breaker 'GET:/' is OPEN. Failing fast to protect downstream service.",
                "estack": "Error: Circuit breaker 'GET:/' is OPEN. Failing fast to protect downstream service.\n    at CircuitBreakerManager.executeInOpenState (src\\core\\network\\CircuitBreakerManager.ts:139:19)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:88:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:88:10)",
                "diff": null
              },
              "uuid": "985ee0d7-5622-4991-a911-ada8e2882d41",
              "parentUUID": "43d588da-ef54-4eec-8f14-16b8cef74208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle authentication errors with global patterns",
              "fullTitle": "Bearer Token Authentication Example should handle authentication errors with global patterns",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "test_utils_1.GlobalTestUtils.logTestProgress('Bearer Auth', 'Error Handling');\n// Test authentication failure using invalid token\n// Common headers are already included in the client configuration\nconst response = await src_1.restified\n    .given()\n    .useClient('testUtils')\n    .bearerToken('invalid-global-token')\n    .when()\n    .get('/bearer')\n    .execute();\nawait response\n    .statusCode(200) // HTTPBin accepts any token for demo\n    .jsonPath('$.authenticated', true)\n    .jsonPath('$.token', 'invalid-global-token')\n    .execute();\nconsole.log('‚úÖ Authentication error handling verified');",
              "err": {
                "message": "Error: Circuit breaker 'GET:/' is OPEN. Failing fast to protect downstream service.",
                "estack": "Error: Circuit breaker 'GET:/' is OPEN. Failing fast to protect downstream service.\n    at CircuitBreakerManager.executeInOpenState (src\\core\\network\\CircuitBreakerManager.ts:139:19)\n    at CircuitBreakerManager.executeWithCircuitBreaker (src\\core\\network\\CircuitBreakerManager.ts:88:27)\n    at WhenStep.execute (src\\core\\dsl\\when.core.ts:177:45)\n    at Context.<anonymous> (examples\\authentication\\bearer-auth.ts:129:10)",
                "diff": null
              },
              "uuid": "a0705415-3ef3-461f-9672-1797f60c01fa",
              "parentUUID": "43d588da-ef54-4eec-8f14-16b8cef74208",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1909cce4-294b-46bd-ad69-6ff7bcd5a7e4",
            "aee444a9-6677-420d-9d95-2393ad9da214",
            "985ee0d7-5622-4991-a911-ada8e2882d41",
            "a0705415-3ef3-461f-9672-1797f60c01fa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}