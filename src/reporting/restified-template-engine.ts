/**
 * RestifiedTS Template Engine
 * 
 * Generates comprehensive HTML reports with enhanced JSON formatting
 */
export class RestifiedTemplateEngine {
  private config: any = {};

  setConfig(config: any) {
    this.config = config || {};
  }

  // Custom JSON stringifier that preserves Unicode emojis
  private stringifyWithEmojis(obj: any): string {
    return JSON.stringify(obj, null, 0).replace(/\\u[\dA-F]{4}/gi, (match) => {
      return String.fromCharCode(parseInt(match.replace('\\u', ''), 16));
    });
  }

  generateReport(reportData: any): string {
    const { stats, suites, globalHooks, metadata, config } = reportData;
    
    // Default configuration with customizable options
    const reportConfig = {
      title: config?.title || metadata?.title || 'RestifiedTS API Test Report',
      logo: config?.logo || '🧪',
      subtitle: config?.subtitle || '',
      showLogo: config?.showLogo !== false,
      theme: {
        primaryColor: config?.theme?.primaryColor || '#667eea',
        secondaryColor: config?.theme?.secondaryColor || '#764ba2',
        accentColor: config?.theme?.accentColor || '#007acc'
      },
      footer: {
        show: config?.footer?.show !== false,
        text: config?.footer?.text || 'Generated by RestifiedTS Test Framework',
        links: config?.footer?.links || [],
        copyright: config?.footer?.copyright || `© ${new Date().getFullYear()} RestifiedTS`,
        timestamp: config?.footer?.timestamp !== false,
        version: config?.footer?.version || 'v2.0.7',
        customHtml: config?.footer?.customHtml || ''
      },
      branding: {
        showPoweredBy: config?.branding?.showPoweredBy !== false,
        company: config?.branding?.company || '',
        website: config?.branding?.website || ''
      },
      outputDir: config?.outputDir || 'restified-reports',
      outputFile: config?.outputFile || 'report.html'
    };
    
    return `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RestifiedTS Test Report</title>
    <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', sans-serif;
            background: #f5f5f5;
            color: #333;
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }
        
        .container { 
            max-width: 100%;
            width: 100%;
            margin: 0;
            padding: 15px;
        }
        
        /* Large screens - minimal padding */
        @media (min-width: 1400px) {
            .container {
                padding: 20px;
            }
        }
        
        /* Extra large screens - slightly more padding but still full width */
        @media (min-width: 1920px) {
            .container {
                padding: 25px;
            }
        }
        
        .header {
            background: linear-gradient(135deg, ${reportConfig.theme.primaryColor} 0%, ${reportConfig.theme.secondaryColor} 100%);
            color: white;
            padding: 25px 20px;
            text-align: center;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .header h1 { font-size: 2.5rem; margin-bottom: 20px; }
        
        .stats {
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .stat-card {
            background: linear-gradient(135deg, rgba(255,255,255,0.2), rgba(255,255,255,0.1));
            border: 1px solid rgba(255,255,255,0.3);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            min-width: 140px;
            backdrop-filter: blur(15px);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.6s;
        }
        
        .stat-card:hover {
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 12px 35px rgba(0,0,0,0.25);
        }
        
        .stat-card:hover::before {
            left: 100%;
        }
        
        .stat-number {
            font-size: 2.2rem;
            font-weight: 700;
            display: block;
            margin-bottom: 5px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .stat-label {
            font-size: 0.85rem;
            opacity: 0.95;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 500;
        }
        
        .stat-percentage {
            font-size: 0.75rem;
            opacity: 0.8;
            margin-top: 3px;
            font-weight: 400;
        }
        
        .stat-card.suites {
            background: linear-gradient(135deg, #6c757d, #495057);
        }
        
        .stat-card.tests {
            background: linear-gradient(135deg, #17a2b8, #138496);
        }
        
        .stat-card.passed {
            background: linear-gradient(135deg, #28a745, #20c997);
        }
        
        .stat-card.failed {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }
        
        .stat-card.pending {
            background: linear-gradient(135deg, #ffc107, #e0a800);
        }
        
        .stat-card.suites .stat-number,
        .stat-card.tests .stat-number,
        .stat-card.passed .stat-number,
        .stat-card.failed .stat-number,
        .stat-card.pending .stat-number {
            color: white;
        }
        
        .suite {
            background: white;
            margin: 15px 0;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .suite-header {
            background: #2c3e50;
            color: white;
            padding: 15px 20px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
            font-size: 1.1rem;
            transition: background 0.2s;
        }
        
        .suite-header:hover { background: #34495e; }
        .suite-header.active { background: #3498db; }
        
        .suite-tests {
            display: none;
            padding: 20px;
            background: #f8f9fa;
        }
        
        .suite-tests.show { display: block; }
        
        .test {
            background: white;
            margin: 10px 0;
            border-radius: 6px;
            overflow: hidden;
            border-left: 4px solid #27ae60;
        }
        
        .test.failed { border-left-color: #e74c3c; }
        .test.pending { border-left-color: #f39c12; }
        
        .test-header {
            padding: 12px 15px;
            cursor: pointer;
            display: flex;
            justify-content: between;
            align-items: center;
            background: #fff;
            transition: background 0.2s;
        }
        
        .test-header:hover { background: #f8f9fa; }
        
        .test-status {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
            font-weight: bold;
            font-size: 12px;
        }
        
        .test-status.passed { background: #27ae60; color: white; }
        .test-status.failed { background: #e74c3c; color: white; }
        .test-status.pending { background: #f39c12; color: white; }
        
        .test-title { flex: 1; font-weight: 500; }
        .test-duration { color: #666; font-size: 0.9rem; }
        
        .test-details {
            display: none;
            padding: 20px;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
        }
        
        .test-details.show { display: block; }
        
        .detail-section {
            margin: 15px 0;
            padding: 15px;
            background: white;
            border-radius: 6px;
            border-left: 3px solid #3498db;
        }
        
        .detail-section.request { border-left-color: #3498db; }
        .detail-section.response { border-left-color: #27ae60; }
        .detail-section.assertions { border-left-color: #f39c12; }
        
        .detail-section h4 {
            margin-bottom: 10px;
            color: #2c3e50;
            font-size: 1.1rem;
        }
        
        .detail-row { margin: 8px 0; }
        .detail-row strong { color: #2c3e50; min-width: 120px; display: inline-block; }
        
        .method-badge {
            background: #3498db;
            color: white;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .status-badge {
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 0.8rem;
            font-weight: bold;
            color: white;
        }
        
        .status-success { background: #27ae60; }
        .status-error { background: #e74c3c; }
        .status-warning { background: #f39c12; }
        
        /* Enhanced JSON Code Block Styling */
        .code-block {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 20px;
            border-radius: 8px;
            font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;
            font-size: 0.85rem;
            line-height: 1.6;
            overflow: auto;
            max-height: 400px;
            margin: 12px 0;
            border: 1px solid #404040;
            position: relative;
            white-space: pre;
            word-wrap: break-word;
            tab-size: 2;
        }
        
        /* Custom Scrollbar for JSON blocks */
        .code-block::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        .code-block::-webkit-scrollbar-track {
            background: #2d2d2d;
            border-radius: 4px;
        }
        
        .code-block::-webkit-scrollbar-thumb {
            background: #555;
            border-radius: 4px;
        }
        
        .code-block::-webkit-scrollbar-thumb:hover {
            background: #777;
        }
        
        .code-block::before {
            content: attr(data-lang);
            position: absolute;
            top: -1px;
            right: -1px;
            background: #007acc;
            color: white;
            padding: 4px 12px;
            font-size: 0.7rem;
            border-radius: 0 8px 0 4px;
            text-transform: uppercase;
            font-weight: 600;
        }
        
        /* Large JSON handling */
        .code-block.large {
            max-height: 300px;
            border-left: 4px solid #007acc;
        }
        
        .code-block.collapsed {
            max-height: 150px;
            cursor: pointer;
        }
        
        .code-block.collapsed::after {
            content: '📖 Click to expand...';
            position: absolute;
            bottom: 10px;
            right: 15px;
            background: #007acc;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.7rem;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        /* JSON Syntax Highlighting */
        .json-key { 
            color: #9cdcfe; 
            font-weight: 500;
        }
        .json-string { 
            color: #ce9178; 
        }
        .json-number { 
            color: #b5cea8; 
            font-weight: 500;
        }
        .json-boolean { 
            color: #569cd6; 
            font-weight: 600;
        }
        .json-null { 
            color: #808080; 
            font-style: italic;
        }
        .json-punctuation {
            color: #d4d4d4;
            font-weight: 500;
        }
        
        .http-method {
            font-weight: bold;
            color: #ffffff;
        }
        
        .http-url {
            color: #4fc1ff;
            word-break: break-all;
        }
        
        /* Enhanced Assertion Styling */
        .assertion {
            margin: 15px 0;
            padding: 16px;
            border-radius: 8px;
            border-left: 4px solid #28a745;
            background: linear-gradient(135deg, #d1f2d1, #e8f8e8);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }
        
        .assertion.failed {
            border-left-color: #dc3545;
            background: linear-gradient(135deg, #f8d1d1, #fde8e8);
        }
        
        .assertion-icon {
            position: absolute;
            top: 16px;
            right: 16px;
            font-size: 1.2rem;
        }
        
        .assertion-message { 
            font-weight: 600; 
            margin-bottom: 10px; 
            font-size: 1rem;
            color: #2c3e50;
        }
        
        .assertion-details { 
            font-size: 0.85rem; 
            color: #5a5a5a;
            font-family: 'Monaco', 'Consolas', monospace;
            background: rgba(255,255,255,0.7);
            padding: 8px 12px;
            border-radius: 4px;
            margin-top: 8px;
        }
        
        .assertion-expected {
            color: #28a745;
            font-weight: 600;
        }
        
        .assertion-actual {
            color: #dc3545;
            font-weight: 600;
        }
        
        .stacktrace {
            margin: 15px 0;
            padding: 16px;
            border-radius: 8px;
            border-left: 4px solid #dc3545;
            background: linear-gradient(135deg, #f8d1d1, #fde8e8);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .stacktrace h5 {
            color: #dc3545;
            font-weight: 600;
            margin-bottom: 10px;
            font-size: 1rem;
        }
        
        .stacktrace-content {
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.8rem;
            line-height: 1.4;
            color: #5a5a5a;
            background: rgba(255,255,255,0.7);
            padding: 12px;
            border-radius: 4px;
            overflow-x: auto;
            white-space: pre-wrap;
        }
        
        .expand-icon {
            transition: transform 0.2s;
            font-size: 1.2rem;
        }
        
        .expand-icon.expanded { transform: rotate(90deg); }
        
        /* Collapsible JSON sections */
        .json-section {
            margin: 10px 0;
        }
        
        .json-toggle {
            background: #007acc;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            margin-bottom: 8px;
            transition: background 0.2s;
        }
        
        .json-toggle:hover {
            background: #005a9e;
        }
        
        .json-toggle.collapsed::after {
            content: ' ▶';
        }
        
        .json-toggle.expanded::after {
            content: ' ▼';
        }
        
        /* Compact Single-Row Filter Controls */
        .filter-controls {
            background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
            margin: 10px 0;
            padding: 12px 15px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            border: 1px solid #e9ecef;
        }
        
        .filter-row {
            display: flex;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .search-input-container {
            position: relative;
            flex: 0 0 280px;
        }
        
        #search-input {
            width: 100%;
            padding: 12px 40px 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            font-size: 0.9rem;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            outline: none;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            position: relative;
            font-weight: 500;
        }
        
        #search-input:focus {
            border-color: ${reportConfig.theme.accentColor};
            background: linear-gradient(135deg, #ffffff 0%, #f0f8ff 100%);
            box-shadow: 0 0 0 3px rgba(0, 122, 204, 0.15), 0 4px 16px rgba(0, 122, 204, 0.1);
            transform: translateY(-1px);
        }
        
        #search-input:hover:not(:focus) {
            border-color: ${reportConfig.theme.accentColor};
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 122, 204, 0.15);
        }
        
        .clear-btn {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            font-size: 11px;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 2px 8px rgba(220, 53, 69, 0.3);
            font-weight: bold;
        }
        
        .clear-btn:hover {
            background: linear-gradient(135deg, #c82333 0%, #a71e2a 100%);
            transform: translateY(-50%) scale(1.15);
            box-shadow: 0 4px 16px rgba(220, 53, 69, 0.4);
        }
        
        #search-input:not(:placeholder-shown) + .clear-btn {
            opacity: 1;
        }
        
        .status-filters {
            display: flex;
            align-items: center;
            gap: 15px;
            flex: 1;
        }
        
        .filter-label {
            font-size: 0.9rem;
            color: #495057;
            font-weight: 700;
            white-space: nowrap;
            padding: 8px 16px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 20px;
            border: 2px solid #e9ecef;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        
        .filter-label::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.6s ease;
            pointer-events: none;
        }
        
        .filter-label:hover::before {
            left: 100%;
        }
        
        .filter-label:hover {
            transform: translateY(-2px);
            background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
            border-color: #007acc;
            color: #007acc;
            box-shadow: 0 4px 12px rgba(0, 122, 204, 0.15);
        }
        
        .filter-checkbox {
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 8px 16px;
            border-radius: 12px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 0.9rem;
            user-select: none;
            white-space: nowrap;
            border: 2px solid #e9ecef;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        }
        
        /* Beautiful hover effect for disabled buttons */
        .filter-checkbox:not(:has(input:checked)):hover {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-color: #007acc;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 122, 204, 0.15);
        }
        
        /* Shimmer effect overlay */
        .filter-checkbox::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.6s ease;
            pointer-events: none;
        }
        
        .filter-checkbox:hover::before {
            left: 100%;
        }
        
        /* Beautiful enabled state with gradient */
        .filter-checkbox:has(input:checked) {
            background: linear-gradient(135deg, #007acc 0%, #0056b3 50%, #004494 100%);
            border-color: #0056b3;
            color: white !important;
            box-shadow: 0 4px 20px rgba(0, 122, 204, 0.4), 
                        inset 0 1px 0 rgba(255, 255, 255, 0.2);
            transform: translateY(-1px);
        }
        
        .filter-checkbox:has(input:checked)::before {
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        }
        
        .filter-checkbox:has(input:checked):hover {
            background: linear-gradient(135deg, #0056b3 0%, #004494 50%, #003d7a 100%);
            box-shadow: 0 6px 24px rgba(0, 122, 204, 0.5), 
                        inset 0 1px 0 rgba(255, 255, 255, 0.3);
            transform: translateY(-3px);
        }
        
        .filter-checkbox:has(input:checked) * {
            color: white !important;
        }
        
        .filter-checkbox:has(input:checked) .filter-text {
            color: white !important;
            font-weight: 600;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }
        
        .filter-checkbox input[type="checkbox"] {
            display: none;
        }
        
        .checkmark {
            width: 20px;
            height: 20px;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 8px;
            font-weight: bold;
            font-size: 11px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid #dee2e6;
            flex-shrink: 0;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            position: relative;
        }
        
        /* Icon styling for disabled state */
        .checkmark.passed,
        .checkmark.failed,
        .checkmark.pending {
            color: #6c757d;
        }
        
        /* Beautiful enabled checkmark with glow effect */
        .filter-checkbox:has(input:checked) .checkmark {
            color: white;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0.1) 100%);
            border-color: rgba(255, 255, 255, 0.4);
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.3), 
                        inset 0 1px 2px rgba(255, 255, 255, 0.4);
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.8);
            transform: scale(1.1);
        }
        
        /* Pulse animation for active checkmarks */
        .filter-checkbox:has(input:checked) .checkmark {
            animation: pulseGlow 2s infinite;
        }
        
        @keyframes pulseGlow {
            0%, 100% { 
                box-shadow: 0 0 10px rgba(255, 255, 255, 0.3), 
                            inset 0 1px 2px rgba(255, 255, 255, 0.4);
            }
            50% { 
                box-shadow: 0 0 15px rgba(255, 255, 255, 0.5), 
                            inset 0 1px 2px rgba(255, 255, 255, 0.6);
            }
        }
        
        /* Text color changes based on state */
        .filter-checkbox .filter-text {
            transition: color 0.3s ease;
            color: #495057;
        }
        
        /* Disabled state - gray text */
        .filter-checkbox input:not(:checked) + .checkmark + .filter-text {
            color: #adb5bd;
        }
        
        /* Enabled state - white text on blue background */
        .filter-checkbox:has(input:checked) .filter-text {
            color: white !important;
            font-weight: 600;
        }
        
        .filter-text {
            font-weight: 500;
        }
        
        .filter-actions {
            display: flex;
            gap: 6px;
        }
        
        .filter-btn {
            padding: 10px 20px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            color: #495057;
            cursor: pointer;
            font-size: 0.85rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            outline: none;
            white-space: nowrap;
            font-weight: 600;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        
        .filter-btn.compact {
            padding: 8px 16px;
            font-size: 0.8rem;
        }
        
        /* Shimmer effect for buttons */
        .filter-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.6s ease;
            pointer-events: none;
        }
        
        .filter-btn:hover::before {
            left: 100%;
        }
        
        .filter-btn:hover {
            background: linear-gradient(135deg, #007acc 0%, #0056b3 100%);
            border-color: #0056b3;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0, 122, 204, 0.3);
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }
        
        .filter-btn:active {
            transform: translateY(0px);
            box-shadow: 0 2px 8px rgba(0, 122, 204, 0.2);
        }
        
        .filter-btn.primary {
            background: linear-gradient(135deg, #007acc 0%, #0056b3 50%, #004494 100%);
            color: white;
            border-color: #0056b3;
            font-weight: 700;
            box-shadow: 0 4px 16px rgba(0, 122, 204, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.2);
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }
        
        .filter-btn.primary::before {
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        }
        
        .filter-btn.primary:hover {
            background: linear-gradient(135deg, #0056b3 0%, #004494 50%, #003d7a 100%);
            border-color: #004494;
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 86, 179, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.3);
        }
        
        .results-summary {
            padding: 10px 16px;
            background: linear-gradient(135deg, rgba(0, 122, 204, 0.1) 0%, rgba(0, 86, 179, 0.1) 100%);
            border-radius: 20px;
            font-size: 0.85rem;
            color: #495057;
            border: 2px solid rgba(0, 122, 204, 0.2);
            white-space: nowrap;
            box-shadow: 0 2px 8px rgba(0, 122, 204, 0.08);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            font-weight: 600;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        
        .results-summary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.6s ease;
            pointer-events: none;
        }
        
        .results-summary:hover::before {
            left: 100%;
        }
        
        .results-summary:hover {
            background: linear-gradient(135deg, rgba(0, 122, 204, 0.15) 0%, rgba(0, 86, 179, 0.15) 100%);
            border-color: rgba(0, 122, 204, 0.3);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 122, 204, 0.12);
        }
        
        .results-summary.compact {
            font-weight: 700;
        }
        
        #active-filters {
            font-weight: 600;
            color: #007acc;
            font-size: 0.75rem;
            margin-left: 8px;
            background: rgba(0, 122, 204, 0.1);
            padding: 2px 6px;
            border-radius: 8px;
            text-shadow: none;
        }
        
        /* Enhanced responsive design for all screen sizes */
        
        /* Large desktop screens */
        @media (min-width: 1600px) {
            .stats {
                gap: 30px;
            }
            
            .stat-card {
                min-width: 160px;
                padding: 25px;
            }
            
            .filter-row {
                gap: 25px;
            }
            
            .search-input-container {
                flex: 0 0 350px;
            }
        }
        
        /* Standard desktop */
        @media (max-width: 1400px) {
            .container {
                padding: 18px;
            }
        }
        
        /* Medium screens */
        @media (max-width: 1200px) {
            .container {
                padding: 15px;
            }
            
            .stats {
                gap: 15px;
            }
            
            .stat-card {
                min-width: 120px;
                padding: 18px;
            }
            
            .stat-number {
                font-size: 1.8rem;
            }
            
            .filter-row {
                gap: 15px;
            }
            
            .search-input-container {
                flex: 0 0 250px;
            }
            
            .status-filters {
                gap: 10px;
            }
            
            .filter-checkbox {
                padding: 6px 12px;
                font-size: 0.8rem;
            }
            
            .checkmark {
                width: 16px;
                height: 16px;
                margin-right: 5px;
            }
            
            .filter-btn {
                padding: 8px 14px;
                font-size: 0.8rem;
            }
        }
        
        /* Tablet screens */
        @media (max-width: 1024px) {
            .container {
                padding: 12px;
            }
            
            .header {
                padding: 25px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .stats {
                gap: 12px;
            }
            
            .stat-card {
                min-width: 100px;
                padding: 15px;
            }
            
            .stat-number {
                font-size: 1.6rem;
            }
        }
        
        /* Small tablets and large phones */
        @media (max-width: 768px) {
            .container {
                padding: 8px;
            }
            
            .header {
                padding: 20px;
            }
            
            .header h1 {
                font-size: 1.8rem;
            }
            
            .stats {
                justify-content: space-around;
                gap: 8px;
            }
            
            .stat-card {
                min-width: 80px;
                padding: 12px;
            }
            
            .stat-number {
                font-size: 1.4rem;
            }
            
            .stat-label {
                font-size: 0.75rem;
            }
            
            .filter-row {
                flex-direction: column;
                align-items: stretch;
                gap: 15px;
            }
            
            .search-input-container {
                flex: 1;
                order: 1;
            }
            
            .status-filters {
                justify-content: center;
                flex-wrap: wrap;
                order: 2;
            }
            
            .filter-actions {
                justify-content: center;
                order: 3;
            }
            
            .results-summary {
                text-align: center;
                order: 4;
            }
            
            .filter-label {
                padding: 6px 12px;
                font-size: 0.8rem;
                align-self: center;
                order: 0;
            }
        }
        
        /* Mobile phones */
        @media (max-width: 480px) {
            .container {
                padding: 5px;
            }
            
            .header {
                padding: 15px;
                margin-bottom: 20px;
            }
            
            .header h1 {
                font-size: 1.5rem;
            }
            
            .stats {
                flex-wrap: wrap;
                gap: 6px;
            }
            
            .stat-card {
                min-width: 70px;
                padding: 10px;
                flex: 1;
                max-width: calc(50% - 3px);
            }
            
            .stat-number {
                font-size: 1.2rem;
            }
            
            .stat-label {
                font-size: 0.7rem;
            }
            
            .stat-percentage {
                font-size: 0.65rem;
            }
            
            .filter-controls {
                margin-bottom: 15px;
            }
            
            .filter-row {
                gap: 12px;
            }
            
            .search-input-container {
                width: 100%;
            }
            
            #search-input {
                font-size: 16px; /* Prevents zoom on iOS */
            }
            
            .status-filters {
                gap: 8px;
            }
            
            .filter-checkbox {
                padding: 5px 10px;
                font-size: 0.75rem;
                flex: 1;
                justify-content: center;
                min-width: 0;
            }
            
            .filter-text {
                display: none; /* Hide text on very small screens */
            }
            
            .filter-btn {
                padding: 6px 12px;
                font-size: 0.75rem;
                flex: 1;
            }
            
            .results-summary {
                font-size: 0.75rem;
                padding: 8px 12px;
            }
            
            .suite {
                margin: 15px 0;
            }
            
            .suite-header {
                padding: 12px 15px;
                font-size: 0.9rem;
            }
            
            .test {
                padding: 12px 15px;
            }
        }
        
        /* Very small phones */
        @media (max-width: 320px) {
            .stat-card {
                min-width: 60px;
                padding: 8px;
            }
            
            .stat-number {
                font-size: 1rem;
            }
            
            .checkmark {
                width: 14px;
                height: 14px;
                margin-right: 3px;
            }
        }
        
        /* Hide filtered elements */
        .suite.filtered-out {
            display: none !important;
        }
        
        .test.filtered-out {
            display: none !important;
        }
        
        /* Empty state when no results */
        .no-results {
            text-align: center;
            padding: 40px 20px;
            color: #6c757d;
            font-size: 1.1rem;
        }
        
        .no-results-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }
        
        /* Compact Beautiful Footer */
        .footer {
            margin-top: 30px;
            padding: 20px 25px;
            background: linear-gradient(135deg, ${reportConfig.theme.primaryColor} 0%, ${reportConfig.theme.secondaryColor} 50%, #1e293b 100%);
            color: white;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1), 0 2px 10px rgba(0,0,0,0.06);
            position: relative;
            overflow: hidden;
        }
        
        /* Subtle overlay effect */
        .footer::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.04) 50%, transparent 70%);
            pointer-events: none;
        }
        
        .footer-content {
            display: flex;
            flex-direction: column;
            gap: 12px;
            align-items: center;
            position: relative;
            z-index: 1;
        }
        
        .footer-main {
            font-size: 1.1rem;
            font-weight: 600;
            letter-spacing: 0.3px;
            text-shadow: 0 1px 4px rgba(0,0,0,0.3);
            margin: 0;
        }
        
        .footer-links {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
            justify-content: center;
            margin: 0;
        }
        
        .footer-link {
            color: white;
            text-decoration: none;
            padding: 6px 12px;
            border-radius: 16px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-weight: 500;
            font-size: 0.8rem;
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(5px);
            position: relative;
            overflow: hidden;
        }
        
        .footer-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.6s ease;
        }
        
        .footer-link:hover::before {
            left: 100%;
        }
        
        .footer-link:hover {
            background: rgba(255, 255, 255, 0.15);
            border-color: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(0,0,0,0.15);
            text-decoration: none;
            color: white;
        }
        
        .footer-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            justify-content: center;
            align-items: center;
            width: 100%;
            margin: 0;
        }
        
        .footer-meta > * {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4px;
            font-size: 0.75rem;
            font-weight: 500;
            padding: 4px 8px;
            background: rgba(255, 255, 255, 0.06);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(3px);
            min-height: 28px;
            text-shadow: 0 1px 2px rgba(0,0,0,0.2);
            white-space: nowrap;
        }
        
        .footer-timestamp {
            font-family: 'SF Mono', 'Monaco', 'Cascadia Code', 'Roboto Mono', monospace;
            font-size: 0.7rem;
            background: rgba(255, 255, 255, 0.08);
        }
        
        .footer-version {
            background: linear-gradient(135deg, rgba(34, 197, 94, 0.15) 0%, rgba(16, 185, 129, 0.15) 100%);
            border-color: rgba(34, 197, 94, 0.2);
            font-size: 0.75rem;
            font-weight: 600;
            color: #86efac;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        }
        
        .footer-custom {
            margin-top: 8px;
            padding: 12px 16px;
            background: rgba(255, 255, 255, 0.04);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(5px);
            font-size: 0.85rem;
            line-height: 1.4;
        }
        
        .powered-by {
            font-size: 0.7rem;
            opacity: 0.8;
            margin-top: 8px;
            padding: 6px 12px;
            background: rgba(0,0,0,0.08);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.08);
            display: inline-block;
        }
        
        .powered-by a {
            color: #93c5fd;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .powered-by a:hover {
            color: #dbeafe;
            text-decoration: underline;
            text-underline-offset: 2px;
        }
        
        /* Floating Action Buttons - Right Side */
        .floating-buttons {
            position: fixed;
            right: 20px;
            top: 120px;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .floating-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: none;
            background: linear-gradient(135deg, ${reportConfig.theme.primaryColor} 0%, ${reportConfig.theme.secondaryColor} 100%);
            color: white;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }
        
        .floating-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.6s ease;
        }
        
        .floating-btn:hover::before {
            left: 100%;
        }
        
        .floating-btn:hover {
            transform: translateY(-2px) scale(1.1);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.25);
        }
        
        .floating-btn:active {
            transform: translateY(0) scale(0.95);
        }
        
        .floating-btn.config {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .floating-btn.variables {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }
        
        .floating-btn.environment {
            background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        }
        
        .floating-btn-tooltip {
            position: absolute;
            right: 60px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            pointer-events: none;
            z-index: 1001;
        }
        
        .floating-btn-tooltip::after {
            content: '';
            position: absolute;
            left: 100%;
            top: 50%;
            transform: translateY(-50%);
            border: 5px solid transparent;
            border-left-color: rgba(0, 0, 0, 0.8);
        }
        
        .floating-btn:hover .floating-btn-tooltip {
            opacity: 1;
            visibility: visible;
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(5px);
            animation: fadeIn 0.3s ease;
        }
        
        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .modal-content {
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            margin: auto;
            padding: 0;
            border: none;
            border-radius: 16px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s ease;
            position: relative;
        }
        
        @keyframes slideIn {
            from { 
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to { 
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
        
        .modal-header {
            background: linear-gradient(135deg, ${reportConfig.theme.primaryColor} 0%, ${reportConfig.theme.secondaryColor} 100%);
            color: white;
            padding: 20px 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            overflow: hidden;
        }
        
        .modal-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.08) 50%, transparent 70%);
            pointer-events: none;
        }
        
        .modal-title {
            font-size: 1.4rem;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
            z-index: 1;
        }
        
        .modal-close {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            width: 35px;
            height: 35px;
            color: white;
            font-size: 18px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            position: relative;
            z-index: 1;
        }
        
        .modal-close:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.4);
            transform: scale(1.1);
        }
        
        .modal-body {
            padding: 25px;
            max-height: calc(90vh - 140px);
            overflow-y: auto;
        }
        
        .modal-body::-webkit-scrollbar {
            width: 8px;
        }
        
        .modal-body::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }
        
        .modal-body::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }
        
        .modal-body::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        
        .json-display {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 20px;
            border-radius: 8px;
            font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;
            font-size: 0.85rem;
            line-height: 1.6;
            overflow: auto;
            border: 1px solid #404040;
            white-space: pre;
            word-wrap: break-word;
            tab-size: 2;
        }
        
        .data-section {
            margin-bottom: 25px;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }
        
        .data-section-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 15px 20px;
            border-bottom: 1px solid #dee2e6;
            font-weight: 600;
            color: #495057;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .data-section-content {
            padding: 20px;
        }
        
        .empty-data {
            text-align: center;
            color: #6c757d;
            font-style: italic;
            padding: 30px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        /* Loading States */
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .loading-content {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 40px;
            color: #666;
            font-style: italic;
        }
        
        .data-loading {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading-shimmer 1.5s infinite;
            border-radius: 6px;
            height: 20px;
            margin: 10px 0;
        }
        
        @keyframes loading-shimmer {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }
        
        /* Mobile responsive adjustments */
        @media (max-width: 768px) {
            .floating-buttons {
                right: 10px;
                top: 80px;
                gap: 8px;
            }
            
            .floating-btn {
                width: 40px;
                height: 40px;
                font-size: 16px;
            }
            
            .floating-btn-tooltip {
                right: 50px;
                font-size: 11px;
                padding: 6px 8px;
            }
            
            .modal-content {
                width: 95%;
                margin: 10px;
                max-height: 95vh;
            }
            
            .modal-header {
                padding: 15px 20px;
            }
            
            .modal-title {
                font-size: 1.2rem;
            }
            
            .modal-body {
                padding: 20px;
                max-height: calc(95vh - 120px);
            }
        }
        
        .version-inline {
            background: linear-gradient(135deg, rgba(34, 197, 94, 0.15) 0%, rgba(16, 185, 129, 0.15) 100%);
            color: #86efac;
            padding: 2px 6px;
            border-radius: 8px;
            font-size: 0.65rem;
            font-weight: 600;
            border: 1px solid rgba(34, 197, 94, 0.2);
            margin-right: 6px;
            display: inline-block;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        }
        
        @media (max-width: 768px) {
            .footer {
                margin-top: 25px;
                padding: 18px 20px;
            }
            
            .footer-main {
                font-size: 1rem;
            }
            
            .footer-content {
                gap: 10px;
            }
            
            .footer-links {
                gap: 4px;
            }
            
            .footer-link {
                padding: 5px 10px;
                font-size: 0.75rem;
            }
            
            .footer-meta {
                gap: 6px;
            }
            
            .footer-meta > * {
                font-size: 0.7rem;
                padding: 3px 6px;
                min-height: 24px;
                gap: 3px;
            }
            
            .footer-custom {
                padding: 10px 12px;
                font-size: 0.8rem;
                margin-top: 6px;
            }
        }
        
        @media (max-width: 480px) {
            .footer {
                padding: 15px;
                margin-top: 20px;
            }
            
            .footer-main {
                font-size: 0.95rem;
                letter-spacing: 0.2px;
            }
            
            .footer-content {
                gap: 8px;
            }
            
            .footer-links {
                gap: 3px;
            }
            
            .footer-link {
                padding: 4px 8px;
                font-size: 0.7rem;
            }
            
            .footer-meta {
                gap: 4px;
            }
            
            .footer-meta > * {
                font-size: 0.65rem;
                padding: 2px 5px;
                min-height: 20px;
                gap: 2px;
            }
            
            .footer-custom {
                padding: 8px 10px;
                font-size: 0.75rem;
                margin-top: 4px;
            }
            
            .powered-by {
                font-size: 0.6rem;
                padding: 4px 8px;
                margin-top: 6px;
            }
            
            .version-inline {
                font-size: 0.55rem;
                padding: 1px 4px;
                margin-right: 4px;
            }
        }
        
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>${reportConfig.showLogo ? reportConfig.logo + ' ' : ''}${reportConfig.title}</h1>
            ${reportConfig.subtitle ? `<div style="font-size: 1.2rem; opacity: 0.9; margin-bottom: 10px;">${reportConfig.subtitle}</div>` : ''}
            <div class="stats">
                <div class="stat-card suites">
                    <span class="stat-number">${stats?.suites || 0}</span>
                    <span class="stat-label">Suites</span>
                    <div class="stat-percentage">${stats?.suites > 0 ? '100%' : '0%'} Coverage</div>
                </div>
                <div class="stat-card tests">
                    <span class="stat-number">${stats?.tests || 0}</span>
                    <span class="stat-label">Tests</span>
                    <div class="stat-percentage">${stats?.tests > 0 ? 'Total Executed' : 'None Run'}</div>
                </div>
                <div class="stat-card passed">
                    <span class="stat-number">${stats?.passes || 0}</span>
                    <span class="stat-label">Passed</span>
                    <div class="stat-percentage">${stats?.tests > 0 ? Math.round(((stats?.passes || 0) / stats.tests) * 100) : 0}% Success</div>
                </div>
                <div class="stat-card failed">
                    <span class="stat-number">${stats?.failures || 0}</span>
                    <span class="stat-label">Failed</span>
                    <div class="stat-percentage">${stats?.tests > 0 ? Math.round(((stats?.failures || 0) / stats.tests) * 100) : 0}% Failed</div>
                </div>
                <div class="stat-card pending">
                    <span class="stat-number">${stats?.pending || 0}</span>
                    <span class="stat-label">Pending</span>
                    <div class="stat-percentage">${stats?.tests > 0 ? Math.round(((stats?.pending || 0) / stats.tests) * 100) : 0}% Skipped</div>
                </div>
            </div>
        </div>
        
        <!-- Compact Filter and Search Controls -->
        <div class="filter-controls">
            <div class="filter-row">
                <!-- Search Input -->
                <div class="search-input-container">
                    <input type="text" id="search-input" placeholder="🔍 Search tests or suites..." />
                    <button id="clear-search" class="clear-btn" title="Clear search">✕</button>
                </div>
                
                <!-- Status Filters -->
                <div class="status-filters">
                    <span class="filter-label">📊 Filter:</span>
                    <label class="filter-checkbox passed">
                        <input type="checkbox" id="filter-passed" checked>
                        <span class="checkmark passed">✓</span>
                        <span class="filter-text">Passed (<span id="passed-count">${stats?.passes || 0}</span>)</span>
                    </label>
                    <label class="filter-checkbox failed">
                        <input type="checkbox" id="filter-failed" checked>
                        <span class="checkmark failed">✗</span>
                        <span class="filter-text">Failed (<span id="failed-count">${stats?.failures || 0}</span>)</span>
                    </label>
                    <label class="filter-checkbox pending">
                        <input type="checkbox" id="filter-pending" checked>
                        <span class="checkmark pending">⏳</span>
                        <span class="filter-text">Pending (<span id="pending-count">${stats?.pending || 0}</span>)</span>
                    </label>
                </div>
                
                <!-- Quick Actions -->
                <div class="filter-actions">
                    <button id="select-all-filters" class="filter-btn compact">All</button>
                    <button id="clear-all-filters" class="filter-btn compact">None</button>
                    <button id="reset-filters" class="filter-btn compact primary">Reset</button>
                </div>
                
                <!-- Results Summary -->
                <div id="results-summary" class="results-summary compact">
                    <span id="visible-tests">0</span>/<span id="total-tests">${stats?.tests || 0}</span> tests
                    <span id="active-filters"></span>
                </div>
            </div>
        </div>
        
        <!-- Floating Action Buttons -->
        <div class="floating-buttons">
            <button class="floating-btn config" onclick="openModal('configModal')" title="View Configuration">
                <span class="floating-btn-tooltip">Restified Config</span>
                ⚙️
            </button>
            <button class="floating-btn variables" onclick="openModal('variablesModal')" title="View Runtime Variables">
                <span class="floating-btn-tooltip">Runtime Variables</span>
                🔧
            </button>
            <button class="floating-btn environment" onclick="openModal('environmentModal')" title="View Environment Variables">
                <span class="floating-btn-tooltip">Environment Variables</span>
                🌍
            </button>
        </div>

        <!-- Configuration Modal -->
        <div id="configModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">⚙️ Restified Configuration</h2>
                    <button class="modal-close" onclick="closeModal('configModal')">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="config-content">
                        <div class="json-display" id="config-json">Loading configuration...</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Runtime Variables Modal -->
        <div id="variablesModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">🔧 Runtime Variables</h2>
                    <button class="modal-close" onclick="closeModal('variablesModal')">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="variables-content">
                        <div class="data-section">
                            <div class="data-section-header">
                                🌍 Global Variables
                            </div>
                            <div class="data-section-content">
                                <div class="json-display" id="global-variables">Loading global variables...</div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="data-section-header">
                                📍 Local Variables
                            </div>
                            <div class="data-section-content">
                                <div class="json-display" id="local-variables">Loading local variables...</div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="data-section-header">
                                📤 Extracted Variables
                            </div>
                            <div class="data-section-content">
                                <div class="json-display" id="extracted-variables">Loading extracted variables...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Environment Variables Modal -->
        <div id="environmentModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">🌍 Environment Variables</h2>
                    <button class="modal-close" onclick="closeModal('environmentModal')">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="environment-content">
                        <div class="json-display" id="environment-json">Loading environment variables...</div>
                    </div>
                </div>
            </div>
        </div>

        <div id="suites-container">
            <!-- Suites will be added here -->
        </div>
        
        ${reportConfig.footer.show ? `
        <!-- Footer -->
        <div class="footer">
            <div class="footer-content">
                <div class="footer-main">${reportConfig.footer.text}</div>
                
                ${reportConfig.footer.links.length > 0 ? `
                <div class="footer-links">
                    ${reportConfig.footer.links.map(link => 
                        `<a href="${link.url}" class="footer-link" ${link.external ? 'target="_blank" rel="noopener noreferrer"' : ''}>${link.text}</a>`
                    ).join('')}
                </div>
                ` : ''}
                
                <div class="footer-meta">
                    ${reportConfig.footer.copyright ? `<div>📄 ${reportConfig.footer.copyright}</div>` : ''}
                    ${reportConfig.footer.timestamp ? `<div class="footer-timestamp">🕒 ${new Date().toLocaleString()}</div>` : ''}
                    ${reportConfig.branding.company ? `<div>🏢 ${reportConfig.branding.company}</div>` : ''}
                </div>
                
                ${reportConfig.footer.customHtml ? `<div class="footer-custom">${reportConfig.footer.customHtml}</div>` : ''}
                
                ${reportConfig.branding.showPoweredBy ? `
                <div class="powered-by">
                    ${reportConfig.footer.version ? `<span class="version-inline">⚡ ${reportConfig.footer.version}</span>` : ''} Powered by <a href="${reportConfig.branding.website || 'https://github.com/your-org/restifiedts'}" target="_blank" rel="noopener noreferrer">RestifiedTS Framework</a>
                </div>
                ` : ''}
            </div>
        </div>
        ` : ''}
    </div>

    <script>
        const REPORT_DATA = ${this.stringifyWithEmojis({ stats, suites })};
        
        // Pre-process and cache data for fast loading
        const CONFIG_DATA = ${this.stringifyWithEmojis(config || {})};
        const CONFIG_JSON_PREPARED = ${JSON.stringify(JSON.stringify(reportData.restifiedConfig || {}, null, 2))};
        
        const RUNTIME_VARIABLES = ${this.stringifyWithEmojis(reportData.runtimeVariables || { global: {}, local: {}, extracted: {} })};
        const RUNTIME_JSON_PREPARED = {
            global: ${JSON.stringify(JSON.stringify((reportData.runtimeVariables || {}).global || {}, null, 2))},
            local: ${JSON.stringify(JSON.stringify((reportData.runtimeVariables || {}).local || {}, null, 2))},
            extracted: ${JSON.stringify(JSON.stringify((reportData.runtimeVariables || {}).extracted || {}, null, 2))}
        };
        
        const ENVIRONMENT_VARIABLES = ${this.stringifyWithEmojis(reportData.environmentVariables || {})};
        const ENV_JSON_PREPARED = ${JSON.stringify(JSON.stringify(reportData.environmentVariables || {}, null, 2))};

        function initializeReport() {
            const container = document.getElementById('suites-container');
            
            REPORT_DATA.suites.forEach(suite => {
                const suiteElement = createSuiteElement(suite);
                container.appendChild(suiteElement);
            });
        }

        function createSuiteElement(suite) {
            const suiteDiv = document.createElement('div');
            suiteDiv.className = 'suite';
            
            const header = document.createElement('div');
            header.className = 'suite-header';
            header.innerHTML = \`
                <span>📁 \${suite.title}</span>
                <span>
                    \${suite.tests.length} tests • 
                    ✅ \${suite.stats.passes} • 
                    ❌ \${suite.stats.failures} • 
                    ⏳ \${suite.stats.pending || 0}
                    <span class="expand-icon">▶</span>
                </span>
            \`;
            
            const testsContainer = document.createElement('div');
            testsContainer.className = 'suite-tests';
            
            suite.tests.forEach(test => {
                const testElement = createTestElement(test);
                testsContainer.appendChild(testElement);
            });
            
            header.addEventListener('click', () => {
                const isShow = testsContainer.classList.contains('show');
                testsContainer.classList.toggle('show');
                header.classList.toggle('active');
                
                const icon = header.querySelector('.expand-icon');
                icon.classList.toggle('expanded');
                icon.textContent = isShow ? '▶' : '▼';
            });
            
            suiteDiv.appendChild(header);
            suiteDiv.appendChild(testsContainer);
            return suiteDiv;
        }

        function createTestElement(test) {
            const testDiv = document.createElement('div');
            testDiv.className = \`test \${test.status}\`;
            
            const header = document.createElement('div');
            header.className = 'test-header';
            header.innerHTML = \`
                <div class="test-status \${test.status}">\${getStatusIcon(test.status)}</div>
                <div class="test-title">\${decodeHTMLEntities(test.title)}</div>
                <div class="test-duration">\${test.duration}ms</div>
            \`;
            
            const details = document.createElement('div');
            details.className = 'test-details';
            
            header.addEventListener('click', () => {
                const isShow = details.classList.contains('show');
                details.classList.toggle('show');
                
                if (!isShow && !details.hasChildNodes()) {
                    loadTestDetails(test, details);
                }
            });
            
            testDiv.appendChild(header);
            testDiv.appendChild(details);
            return testDiv;
        }

        function loadTestDetails(test, container) {
            let html = '';
            
            // 🎯 DECOMPRESS DATA: Check if test has compressed data and restore full details
            const fullTest = decompressTestData(test);
            
            // Request section
            if (fullTest.request) {
                html += \`
                    <div class="detail-section request">
                        <h4>🌐 HTTP Request</h4>
                        <div class="detail-row">
                            <strong>Method:</strong> 
                            <span class="method-badge">\${fullTest.request.method}</span>
                        </div>
                        <div class="detail-row">
                            <strong>URL:</strong> <span class="http-url">\${fullTest.request.url}</span>
                        </div>
                        \${fullTest.request.timestamp ? \`
                            <div class="detail-row">
                                <strong>Timestamp:</strong> \${new Date(fullTest.request.timestamp).toLocaleString()}
                            </div>
                        \` : ''}
                        <div class="detail-row">
                            <strong>Headers:</strong>
                        </div>
                        \${formatJsonBlock(fullTest.request.headers, 'Headers')}
                        \${fullTest.request.body ? \`
                            <div class="detail-row"><strong>Body:</strong></div>
                            \${formatJsonBlock(fullTest.request.body, 'Request Body')}
                        \` : '<div class="detail-row"><em style="color: #888;">No request body</em></div>'}
                    </div>
                \`;
            }
            
            // Response section
            if (fullTest.response) {
                const statusClass = fullTest.response.status < 300 ? 'status-success' : 
                                   fullTest.response.status < 500 ? 'status-warning' : 'status-error';
                
                html += \`
                    <div class="detail-section response">
                        <h4>📡 HTTP Response</h4>
                        <div class="detail-row">
                            <strong>Status:</strong> 
                            <span class="status-badge \${statusClass}">\${fullTest.response.status} \${fullTest.response.statusText || ''}</span>
                        </div>
                        <div class="detail-row">
                            <strong>Response Time:</strong> <strong style="color: #007acc;">\${fullTest.response.responseTime}ms</strong>
                        </div>
                        \${fullTest.response.size ? \`
                            <div class="detail-row">
                                <strong>Content Size:</strong> \${formatBytes(fullTest.response.size)}
                            </div>
                        \` : ''}
                        \${fullTest.response.timestamp ? \`
                            <div class="detail-row">
                                <strong>Timestamp:</strong> \${new Date(fullTest.response.timestamp).toLocaleString()}
                            </div>
                        \` : ''}
                        <div class="detail-row">
                            <strong>Headers:</strong>
                        </div>
                        \${formatJsonBlock(fullTest.response.headers, 'Response Headers')}
                        <div class="detail-row">
                            <strong>Body:</strong>
                        </div>
                        \${formatJsonBlock(fullTest.response.body, 'Response Body')}
                    </div>
                \`;
            }
            
            // Assertions section
            if (fullTest.assertions && fullTest.assertions.length > 0) {
                html += \`
                    <div class="detail-section assertions">
                        <h4>✅ Assertions (\${fullTest.assertions.length})</h4>
                        \${fullTest.assertions.map(assertion => \`
                            <div class="assertion \${assertion.passed ? 'passed' : 'failed'}">
                                <div class="assertion-icon">\${assertion.passed ? '✅' : '❌'}</div>
                                <div class="assertion-message">
                                    \${assertion.message}
                                </div>
                                <div class="assertion-details">
                                    <span class="assertion-expected">Expected:</span> \${formatValue(assertion.expected)}
                                    <br>
                                    <span class="assertion-actual">Actual:</span> \${formatValue(assertion.actual)}
                                </div>
                            </div>
                        \`).join('')}
                    </div>
                \`;
            }
            
            // Stack trace section (if test failed)
            if (test.error && test.error.stack) {
                html += \`
                    <div class="stacktrace">
                        <h5>🔥 Stack Trace</h5>
                        <div class="stacktrace-content">\${test.error.stack}</div>
                    </div>
                \`;
            }
            
            container.innerHTML = html;
        }
        
        // 🎯 DECOMPRESSION FUNCTION: Restores full test data from compressed format
        function decompressTestData(test) {
            try {
                // If test has _fullData, decode it and merge with existing test data
                if (test._fullData) {
                    const fullData = JSON.parse(atob(test._fullData));
                    
                    // Merge decompressed data with original test properties
                    return {
                        ...test,
                        request: fullData.request,
                        response: fullData.response,
                        assertions: fullData.assertions || test.assertions
                    };
                }
                
                // If no compressed data, return original test
                return test;
            } catch (error) {
                console.warn('Failed to decompress test data:', error);
                return test;
            }
        }
        
        function formatJsonBlock(obj, title = 'JSON') {
            if (!obj) return '<em style="color: #888;">No data</em>';
            
            const jsonStr = formatJson(obj);
            const highlightedJson = syntaxHighlightJson(jsonStr);
            const isLarge = jsonStr.length > 1000;
            const blockClass = isLarge ? 'code-block large' : 'code-block';
            const id = 'json_' + Math.random().toString(36).substr(2, 9);
            
            if (isLarge) {
                return \`
                    <div class="json-section">
                        <button class="json-toggle collapsed" onclick="toggleJsonBlock('\${id}')">
                            📋 \${title} (\${formatBytes(jsonStr.length)})
                        </button>
                        <div id="\${id}" class="\${blockClass} collapsed" data-lang="json" onclick="expandJsonBlock('\${id}')">\${highlightedJson}</div>
                    </div>
                \`;
            } else {
                return \`<div class="\${blockClass}" data-lang="json">\${highlightedJson}</div>\`;
            }
        }
        
        function toggleJsonBlock(id) {
            const block = document.getElementById(id);
            const button = document.querySelector(\`[onclick="toggleJsonBlock('\${id}')"]\`);
            
            if (block.style.display === 'none') {
                block.style.display = 'block';
                button.classList.remove('collapsed');
                button.classList.add('expanded');
            } else {
                block.style.display = 'none';
                button.classList.remove('expanded');
                button.classList.add('collapsed');
            }
        }
        
        function expandJsonBlock(id) {
            const block = document.getElementById(id);
            if (block.classList.contains('collapsed')) {
                block.classList.remove('collapsed');
                block.style.maxHeight = 'none';
            }
        }
        
        function formatJson(obj) {
            if (!obj) return '<em style="color: #888;">No data</em>';
            try {
                // If it's already a string, try to parse it first
                if (typeof obj === 'string') {
                    try {
                        const parsed = JSON.parse(obj);
                        return JSON.stringify(parsed, null, 2);
                    } catch (e) {
                        // If it's not valid JSON string, return as is
                        return obj;
                    }
                }
                // If it's an object, stringify with proper formatting
                return JSON.stringify(obj, null, 2);
            } catch (e) {
                return String(obj);
            }
        }
        
        function syntaxHighlightJson(json) {
            if (!json) return json;
            
            // Escape HTML characters first
            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            
            // Apply syntax highlighting with simple regex patterns
            json = json
                // Highlight object keys (quoted strings followed by colon)
                .replace(/"([^"]+)"(\s*):/g, '<span class="json-key">"$1"</span>$2<span class="json-punctuation">:</span>')
                // Highlight string values (quoted strings not followed by colon)
                .replace(/:\s*"([^"]*)"/g, ': <span class="json-string">"$1"</span>')
                // Highlight numbers
                .replace(/:\s*(-?\d+\.?\d*)/g, ': <span class="json-number">$1</span>')
                // Highlight booleans
                .replace(/:\s*(true|false)/g, ': <span class="json-boolean">$1</span>')
                // Highlight null
                .replace(/:\s*(null)/g, ': <span class="json-null">$1</span>')
                // Highlight structural characters
                .replace(/([{}\\[\\]])/g, '<span class="json-punctuation">$1</span>')
                // Highlight commas
                .replace(/(,)$/gm, '<span class="json-punctuation">$1</span>');
            
            return json;
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        function formatValue(value) {
            if (value === null) return '<span class="json-null">null</span>';
            if (typeof value === 'string') return \`<span class="json-string">"\${value}"</span>\`;
            if (typeof value === 'number') return \`<span class="json-number">\${value}</span>\`;
            if (typeof value === 'boolean') return \`<span class="json-boolean">\${value}</span>\`;
            try {
                return \`<code>\${JSON.stringify(value, null, 2)}</code>\`;
            } catch (e) {
                return String(value);
            }
        }
        
        function formatBytes(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function getStatusIcon(status) {
            switch (status) {
                case 'passed': return '✓';
                case 'failed': return '✗';
                case 'pending': return '⏳';
                default: return '?';
            }
        }

        function decodeHTMLEntities(text) {
            const element = document.createElement('div');
            element.innerHTML = text;
            return element.textContent || element.innerText || text;
        }

        // Filter and Search Functionality
        let currentFilters = {
            passed: true,
            failed: true,
            pending: true
        };
        let currentSearch = '';

        function initializeFilters() {
            // Search input event listeners
            const searchInput = document.getElementById('search-input');
            const clearSearch = document.getElementById('clear-search');
            
            searchInput.addEventListener('input', (e) => {
                currentSearch = e.target.value.toLowerCase();
                applyFilters();
            });
            
            clearSearch.addEventListener('click', () => {
                searchInput.value = '';
                currentSearch = '';
                applyFilters();
            });

            // Filter checkbox event listeners
            document.getElementById('filter-passed').addEventListener('change', (e) => {
                currentFilters.passed = e.target.checked;
                applyFilters();
            });
            
            document.getElementById('filter-failed').addEventListener('change', (e) => {
                currentFilters.failed = e.target.checked;
                applyFilters();
            });
            
            document.getElementById('filter-pending').addEventListener('change', (e) => {
                currentFilters.pending = e.target.checked;
                applyFilters();
            });

            // Filter action buttons
            document.getElementById('select-all-filters').addEventListener('click', () => {
                currentFilters = { passed: true, failed: true, pending: true };
                updateFilterCheckboxes();
                applyFilters();
            });
            
            document.getElementById('clear-all-filters').addEventListener('click', () => {
                currentFilters = { passed: false, failed: false, pending: false };
                updateFilterCheckboxes();
                applyFilters();
            });
            
            document.getElementById('reset-filters').addEventListener('click', () => {
                currentFilters = { passed: true, failed: true, pending: true };
                currentSearch = '';
                document.getElementById('search-input').value = '';
                updateFilterCheckboxes();
                applyFilters();
            });

            // Initial filter application
            applyFilters();
        }

        function updateFilterCheckboxes() {
            document.getElementById('filter-passed').checked = currentFilters.passed;
            document.getElementById('filter-failed').checked = currentFilters.failed;
            document.getElementById('filter-pending').checked = currentFilters.pending;
        }

        function applyFilters() {
            const suites = document.querySelectorAll('.suite');
            let visibleTests = 0;
            let visibleSuites = 0;
            
            // Remove any existing no-results message
            const existingNoResults = document.querySelector('.no-results');
            if (existingNoResults) {
                existingNoResults.remove();
            }

            suites.forEach(suite => {
                const suiteTitle = suite.querySelector('.suite-header span').textContent.toLowerCase();
                const tests = suite.querySelectorAll('.test');
                let suiteHasVisibleTests = false;

                tests.forEach(test => {
                    const testTitle = test.querySelector('.test-title').textContent.toLowerCase();
                    const testStatus = test.classList.contains('passed') ? 'passed' : 
                                     test.classList.contains('failed') ? 'failed' : 'pending';
                    
                    // Check if test matches search criteria
                    const matchesSearch = currentSearch === '' || 
                                        testTitle.includes(currentSearch) || 
                                        suiteTitle.includes(currentSearch);
                    
                    // Check if test matches filter criteria
                    const matchesFilter = currentFilters[testStatus];
                    
                    // Show/hide test based on criteria
                    if (matchesSearch && matchesFilter) {
                        test.classList.remove('filtered-out');
                        visibleTests++;
                        suiteHasVisibleTests = true;
                    } else {
                        test.classList.add('filtered-out');
                    }
                });

                // Show/hide suite based on whether it has visible tests
                if (suiteHasVisibleTests) {
                    suite.classList.remove('filtered-out');
                    visibleSuites++;
                } else {
                    suite.classList.add('filtered-out');
                }
            });

            // Show no results message if nothing is visible
            if (visibleTests === 0) {
                showNoResultsMessage();
            }

            // Update results summary
            updateResultsSummary(visibleTests);
        }

        function showNoResultsMessage() {
            const container = document.getElementById('suites-container');
            const noResults = document.createElement('div');
            noResults.className = 'no-results';
            noResults.innerHTML = \`
                <div class="no-results-icon">🔍</div>
                <div><strong>No tests found</strong></div>
                <div>Try adjusting your search terms or filter settings</div>
            \`;
            container.appendChild(noResults);
        }

        function updateResultsSummary(visibleTests) {
            const totalTests = REPORT_DATA.suites.reduce((total, suite) => total + suite.tests.length, 0);
            document.getElementById('visible-tests').textContent = visibleTests;
            document.getElementById('total-tests').textContent = totalTests;
            
            // Update active filters display
            const activeFilters = [];
            if (currentSearch) {
                activeFilters.push(\`Search: "\${currentSearch}"\`);
            }
            
            const uncheckedFilters = [];
            if (!currentFilters.passed) uncheckedFilters.push('Passed');
            if (!currentFilters.failed) uncheckedFilters.push('Failed');  
            if (!currentFilters.pending) uncheckedFilters.push('Pending');
            
            if (uncheckedFilters.length > 0 && uncheckedFilters.length < 3) {
                activeFilters.push(\`Hidden: \${uncheckedFilters.join(', ')}\`);
            }
            
            const activeFiltersElement = document.getElementById('active-filters');
            if (activeFilters.length > 0) {
                activeFiltersElement.textContent = \` | \${activeFilters.join(' | ')}\`;
            } else {
                activeFiltersElement.textContent = '';
            }
        }

        // Initialize the report
        function initializeReport() {
            const container = document.getElementById('suites-container');
            
            REPORT_DATA.suites.forEach(suite => {
                const suiteElement = createSuiteElement(suite);
                container.appendChild(suiteElement);
            });
            
            // Initialize filters after creating all elements
            initializeFilters();
        }

        // Modal Management Functions
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('show');
                document.body.style.overflow = 'hidden';
                
                // Show loading state immediately
                showLoadingState(modalId);
                
                // Load data asynchronously for better performance
                setTimeout(() => {
                    switch (modalId) {
                        case 'configModal':
                            loadConfigDataFast();
                            break;
                        case 'variablesModal':
                            loadVariablesDataFast();
                            break;
                        case 'environmentModal':
                            loadEnvironmentDataFast();
                            break;
                    }
                }, 50); // Small delay to show loading state
            }
        }
        
        function showLoadingState(modalId) {
            const loadingHTML = '<div class="loading-content"><div class="loading-spinner"></div>Loading data...</div>';
            
            switch (modalId) {
                case 'configModal':
                    document.getElementById('config-json').innerHTML = loadingHTML;
                    break;
                case 'variablesModal':
                    document.getElementById('global-variables').innerHTML = loadingHTML;
                    document.getElementById('local-variables').innerHTML = loadingHTML;
                    document.getElementById('extracted-variables').innerHTML = loadingHTML;
                    break;
                case 'environmentModal':
                    document.getElementById('environment-json').innerHTML = loadingHTML;
                    break;
            }
        }
        
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('show');
                document.body.style.overflow = 'auto';
            }
        }
        
        // Fast loading functions using prepared JSON data
        function loadConfigDataFast() {
            const configElement = document.getElementById('config-json');
            if (configElement) {
                try {
                    if (CONFIG_JSON_PREPARED && CONFIG_JSON_PREPARED.length > 20) {
                        configElement.innerHTML = syntaxHighlightJson(CONFIG_JSON_PREPARED);
                    } else {
                        configElement.innerHTML = '<div class="empty-data">No configuration data available</div>';
                    }
                } catch (error) {
                    configElement.innerHTML = '<div class="empty-data">Error loading configuration</div>';
                }
            }
        }
        
        function loadVariablesDataFast() {
            const globalElement = document.getElementById('global-variables');
            const localElement = document.getElementById('local-variables');
            const extractedElement = document.getElementById('extracted-variables');
            
            if (globalElement && RUNTIME_JSON_PREPARED) {
                try {
                    // Use prepared JSON for instant loading with syntax highlighting
                    globalElement.innerHTML = RUNTIME_JSON_PREPARED.global && RUNTIME_JSON_PREPARED.global.length > 20
                        ? syntaxHighlightJson(RUNTIME_JSON_PREPARED.global)
                        : '<div class="empty-data">No global variables set</div>';
                        
                    localElement.innerHTML = RUNTIME_JSON_PREPARED.local && RUNTIME_JSON_PREPARED.local.length > 20
                        ? syntaxHighlightJson(RUNTIME_JSON_PREPARED.local)
                        : '<div class="empty-data">No local variables set</div>';
                        
                    extractedElement.innerHTML = RUNTIME_JSON_PREPARED.extracted && RUNTIME_JSON_PREPARED.extracted.length > 20
                        ? syntaxHighlightJson(RUNTIME_JSON_PREPARED.extracted)
                        : '<div class="empty-data">No extracted variables available</div>';
                } catch (error) {
                    globalElement.innerHTML = '<div class="empty-data">Error loading runtime variables</div>';
                    localElement.innerHTML = '<div class="empty-data">Error loading local variables</div>';
                    extractedElement.innerHTML = '<div class="empty-data">Error loading extracted variables</div>';
                }
            }
        }
        
        function loadEnvironmentDataFast() {
            const envElement = document.getElementById('environment-json');
            if (envElement) {
                try {
                    if (ENV_JSON_PREPARED && ENV_JSON_PREPARED.length > 20) {
                        // Apply syntax highlighting and use chunking for large environment data
                        const highlightedEnv = syntaxHighlightJson(ENV_JSON_PREPARED);
                        loadLargeDataChunked(envElement, highlightedEnv, 'environment variables');
                    } else {
                        envElement.innerHTML = '<div class="empty-data">No environment variables captured</div>';
                    }
                } catch (error) {
                    envElement.innerHTML = '<div class="empty-data">Error loading environment variables</div>';
                }
            }
        }
        
        function loadLargeDataChunked(element, processedHtml, dataType) {
            // For large data sets, show immediately and then enhance
            element.innerHTML = processedHtml;
            
            // Add a performance indicator for large datasets
            const dataSize = processedHtml.length;
            if (dataSize > 50000) { // If larger than 50KB
                const sizeInfo = document.createElement('div');
                sizeInfo.className = 'data-size-info';
                sizeInfo.style.cssText = 'position: absolute; top: 10px; right: 10px; background: rgba(0,0,0,0.7); color: white; padding: 5px 10px; border-radius: 4px; font-size: 12px; z-index: 1;';
                sizeInfo.textContent = '📊 ' + Math.round(dataSize/1024) + 'KB of ' + dataType;
                element.parentNode.style.position = 'relative';
                element.parentNode.appendChild(sizeInfo);
            }
        }
        
        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target.classList.contains('modal')) {
                closeModal(event.target.id);
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const openModals = document.querySelectorAll('.modal.show');
                openModals.forEach(modal => {
                    closeModal(modal.id);
                });
            }
        });

        document.addEventListener('DOMContentLoaded', initializeReport);
    </script>
</body>
</html>`;
  }
}