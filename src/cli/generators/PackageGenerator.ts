/**
 * Package Generator
 * 
 * Generates package.json with correct dependencies and scripts based on test types
 */

import { BaseGenerator } from './BaseGenerator';
import { 
  GenerationResult, 
  ValidationResult,
  GeneratorConfig
} from '../types/ScaffoldTypes';

export class PackageGenerator extends BaseGenerator {
  /**
   * Generate package.json file
   */
  async generate(): Promise<GenerationResult> {
    const filesCreated: string[] = [];

    try {
      const packageContent = this.generatePackageJson();
      
      this.fileManager.queueOperation({
        type: 'create',
        destination: this.getOutputPath('package.json'),
        content: JSON.stringify(packageContent, null, 2),
        backup: true
      });
      
      filesCreated.push('package.json');

      // Generate installation instructions
      await this.generateInstallationInstructions();
      filesCreated.push('INSTALLATION.md');

      this.log(`Generated ${filesCreated.length} package files`);
      
      return this.createSuccessResult(filesCreated);
    } catch (error) {
      const message = `Failed to generate package files: ${(error as Error).message}`;
      this.log(message, 'error');
      return this.createFailureResult([message], filesCreated);
    }
  }

  /**
   * Validate package generation prerequisites
   */
  async validate(): Promise<ValidationResult> {
    const errors: string[] = [];
    const warnings: string[] = [];

    // Check if package.json already exists
    const packagePath = this.getOutputPath('package.json');
    if (require('fs').existsSync(packagePath) && !this.context.force) {
      warnings.push('package.json already exists and will be overwritten');
    }

    // Validate test types
    if (!this.context.testTypes || this.context.testTypes.length === 0) {
      warnings.push('No test types specified, using default dependencies');
    }

    return this.createValidationResult(errors.length === 0, errors, warnings);
  }

  /**
   * Get generator configuration
   */
  getConfig(): GeneratorConfig {
    return {
      name: 'package',
      description: 'Generate package.json with dependencies and scripts',
      templates: [], // No templates needed for this generator
      dependencies: [],
      devDependencies: []
    };
  }

  /**
   * Generate complete package.json content
   */
  private generatePackageJson(): any {
    const testTypes = this.context.testTypes || [];
    const baseDependencies = this.getBaseDependencies();
    const peerDeps = this.getPeerDependencies(testTypes);
    
    return {
      name: this.getPackageName(),
      version: "1.0.0",
      description: `${this.context.projectName} API test suite generated by RestifiedTS`,
      private: true,
      scripts: this.generateScripts(testTypes),
      devDependencies: baseDependencies,
      engines: {
        node: ">=16.0.0"
      },
      ...peerDeps
    };
  }

  /**
   * Get package name from project name
   */
  private getPackageName(): string {
    return this.context.projectName
      .toLowerCase()
      .replace(/[^a-z0-9-]/g, '-')
      .replace(/^-+|-+$/g, '')
      + '-api-tests';
  }

  /**
   * Get base dependencies needed for all test suites
   */
  private getBaseDependencies(): Record<string, string> {
    return {
      "@types/chai": "^4.3.8",
      "@types/mocha": "^10.0.10",
      "@types/node": "^20.8.0",
      "chai": "^4.3.10",
      "dotenv": "^17.2.1",
      "mocha": "^10.2.0",
      "mochawesome": "^7.1.3",
      "nyc": "^15.1.0",
      "restifiedts": "^2.1.1", // Match current version
      "rimraf": "^5.0.0",
      "ts-node": "^10.9.0",
      "tsconfig-paths": "^4.2.0",
      "typescript": "^5.2.0"
    };
  }

  /**
   * Get peer dependencies based on test types
   */
  private getPeerDependencies(testTypes: string[]): any {
    const result: any = {};

    // Add database dependencies if database tests are requested
    if (testTypes.includes('database')) {
      result.peerDependencies = {
        "pg": "^8.8.0",
        "mongodb": "^6.0.0", 
        "mysql2": "^3.6.0",
        "sqlite3": "^5.1.0",
        "redis": "^4.6.0",
        "mssql": "^10.0.0"
      };

      result.peerDependenciesMeta = {
        "pg": { "optional": true },
        "mongodb": { "optional": true },
        "mysql2": { "optional": true },
        "sqlite3": { "optional": true },
        "redis": { "optional": true },
        "mssql": { "optional": true }
      };
    }

    return result;
  }

  /**
   * Generate npm scripts based on test types
   */
  private generateScripts(testTypes: string[]): Record<string, string> {
    const baseScripts = {
      "test": "mocha -r ts-node/register -r tsconfig-paths/register 'setup/global-setup.ts' 'tests/**/*.ts' --reporter ./mocha-reporter-wrapper.js",
      "test:spec": "mocha -r ts-node/register -r tsconfig-paths/register 'setup/global-setup.ts' 'tests/**/*.ts' --reporter spec",
      "test:console": "mocha -r ts-node/register -r tsconfig-paths/register 'setup/global-setup.ts' 'tests/**/*.ts'",
      "test:mochawesome": "npm run test:console -- --reporter mochawesome --reporter-options reportDir=reports,reportFilename=mochawesome-report,html=true,json=true,overwrite=true,charts=true,code=true",
      "test:watch": "npm run test:console -- --watch",
      "test:coverage": "nyc npm run test:console",
      "reports:clean": "node -e \"const dotenv=require('dotenv'); dotenv.config(); const dir=process.env.REPORT_OUTPUT_DIR||'reports'; const {exec}=require('child_process'); exec('rimraf '+dir+' mochawesome-report test-reports allure-results output test-output');\"",
      "reports:open": "node -e \"const dotenv=require('dotenv'); dotenv.config(); const dir=process.env.REPORT_OUTPUT_DIR||'reports'; const file=process.env.REPORT_FILENAME||'restified-html-report.html'; const {exec}=require('child_process'); exec('open '+dir+'/'+file+' || start '+dir+'/'+file, (err) => {if(err) console.log('Could not open report automatically. Check: '+dir+'/'+file);});\"",
      "reports:mochawesome": "open reports/mochawesome-report.html || start reports/mochawesome-report.html"
    };

    // Add type-specific test scripts
    testTypes.forEach(type => {
      baseScripts[`test:${type}`] = `npm run test:console -- --grep "${type}"`;
    });

    // Add database-specific scripts if database tests are included
    if (testTypes.includes('database')) {
      baseScripts["db:install"] = "echo 'üì¶ Run the following commands to install database packages you need:' && echo 'PostgreSQL: npm install pg @types/pg' && echo 'MySQL: npm install mysql2' && echo 'MongoDB: npm install mongodb' && echo 'SQLite: npm install sqlite3' && echo 'Redis: npm install redis' && echo 'SQL Server: npm install mssql'";
      baseScripts["db:install:all"] = "npm install pg @types/pg mysql2 mongodb sqlite3 redis mssql";
      baseScripts["db:install:postgresql"] = "npm install pg @types/pg";
      baseScripts["db:install:mysql"] = "npm install mysql2";
      baseScripts["db:install:mongodb"] = "npm install mongodb";
      baseScripts["db:install:sqlite"] = "npm install sqlite3";
      baseScripts["db:install:redis"] = "npm install redis";
      baseScripts["db:install:mssql"] = "npm install mssql";
    }

    // Add performance testing scripts if performance tests are included
    if (testTypes.includes('performance')) {
      baseScripts["test:performance:k6"] = "k6 run performance-tests.js";
      baseScripts["test:performance:artillery"] = "artillery run performance-tests.yml";
    }

    // Add security testing scripts if security tests are included  
    if (testTypes.includes('security')) {
      baseScripts["test:security:zap"] = "echo 'Make sure OWASP ZAP is running on http://localhost:8080' && npm run test:console -- --grep security";
    }

    return baseScripts;
  }

  /**
   * Generate installation instructions
   */
  private async generateInstallationInstructions(): Promise<void> {
    const testTypes = this.context.testTypes || [];
    const instructions = [`# üöÄ ${this.context.projectName} Installation Guide`];
    
    instructions.push('', '## üì¶ Base Installation');
    instructions.push('```bash');
    instructions.push('npm install');
    instructions.push('```');

    if (testTypes.includes('database')) {
      instructions.push('', '## üóÑÔ∏è Database Dependencies (Install Only What You Need)');
      instructions.push('', 'RestifiedTS supports multiple databases. Install only the packages for databases you plan to use:');
      instructions.push('', '```bash');
      instructions.push('# PostgreSQL');
      instructions.push('npm install pg @types/pg');
      instructions.push('');
      instructions.push('# MySQL/MariaDB');
      instructions.push('npm install mysql2');
      instructions.push('');
      instructions.push('# MongoDB');
      instructions.push('npm install mongodb');
      instructions.push('');
      instructions.push('# SQLite (lightweight, good for local testing)');
      instructions.push('npm install sqlite3');
      instructions.push('');
      instructions.push('# Redis');
      instructions.push('npm install redis');
      instructions.push('');
      instructions.push('# SQL Server');
      instructions.push('npm install mssql');
      instructions.push('```');
      instructions.push('');
      instructions.push('**Quick Install Scripts:**');
      instructions.push('```bash');
      instructions.push('# Install all database packages');
      instructions.push('npm run db:install:all');
      instructions.push('');
      instructions.push('# Or install specific databases');
      instructions.push('npm run db:install:postgresql');
      instructions.push('npm run db:install:mysql');
      instructions.push('npm run db:install:mongodb');
      instructions.push('# ... etc');
      instructions.push('```');
      instructions.push('');
      instructions.push('üí° **Tip**: You can run tests without installing database packages. RestifiedTS will show warnings but continue with available features.');
    }

    if (testTypes.includes('graphql')) {
      instructions.push('', '## üîó GraphQL Dependencies');
      instructions.push('GraphQL testing dependencies are included automatically.');
    }

    if (testTypes.includes('websocket')) {
      instructions.push('', '## ‚ö° WebSocket Dependencies');
      instructions.push('WebSocket testing dependencies are included automatically.');
    }

    if (testTypes.includes('performance')) {
      instructions.push('', '## üöÄ Performance Testing Dependencies');
      instructions.push('Performance testing tools may need global installation:');
      instructions.push('', '```bash');
      instructions.push('# K6 (preferred)');
      instructions.push('npm install -g k6');
      instructions.push('');
      instructions.push('# Artillery (alternative)');
      instructions.push('npm install -g artillery');
      instructions.push('```');
    }

    if (testTypes.includes('security')) {
      instructions.push('', '## üõ°Ô∏è Security Testing Dependencies');
      instructions.push('Security testing requires OWASP ZAP to be running:');
      instructions.push('', '```bash');
      instructions.push('# Download and run OWASP ZAP');
      instructions.push('# https://owasp.org/www-project-zap/');
      instructions.push('```');
    }

    instructions.push('', '## üèÉ Running Tests');
    instructions.push('```bash');
    instructions.push('# Run all tests');
    instructions.push('npm test');
    instructions.push('');
    instructions.push('# Run specific test types');
    testTypes.forEach(type => {
      instructions.push(`npm run test:${type}`);
    });
    instructions.push('');
    instructions.push('# Open HTML report');
    instructions.push('npm run reports:open');
    instructions.push('```');

    this.fileManager.queueOperation({
      type: 'create',
      destination: this.getOutputPath('INSTALLATION.md'),
      content: instructions.join('\n'),
      backup: true
    });
  }
}