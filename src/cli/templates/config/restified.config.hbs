/**
 * üöÄ {{projectName}} API TEST CONFIGURATION
 * 
 * This configuration file supports both simple and enterprise-grade API testing:
 * 
 * üéØ FOR QUICK START:
 * - Update baseURL below with your actual API endpoint
 * - Set environment variables in .env file for security
 * - Run tests with: npm test
 * 
 * üè¢ FOR ENTERPRISE USAGE:
 * - Uncomment advanced sections as needed
 * - Configure authentication credentials securely
 * - Enable health checks and monitoring
 * 
 * üìã QUICK SETUP CHECKLIST:
 * 1. Update 'clients.api.baseURL' with your API URL
 * 2. Configure authentication credentials in .env
 * 3. Enable health checks for your endpoints
 * 4. Run npm test to verify setup
 */

import { RestifiedConfig } from 'restifiedts';

const config: RestifiedConfig = {
  // üåç Environment Configuration
  environment: process.env.TEST_ENV || 'development',
  
  // üèóÔ∏è Multi-Client Enterprise Architecture
  clients: {
    // Primary API Gateway
    api: {
      baseURL: process.env.API_GATEWAY_URL || '{{baseUrl}}',
      timeout: parseInt(process.env.API_TIMEOUT || '10000'),
      headers: {
        'Accept': 'application/json',
        'User-Agent': '{{sanitizedName}}-test-suite/1.0.0'
      }
    },
    
    // Authentication Service
    auth: {
      baseURL: process.env.AUTH_SERVICE_URL || '{{baseUrl}}',
      timeout: parseInt(process.env.AUTH_TIMEOUT || '5000'),
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    },
    
    // Additional microservices
    {{#if hasTestType 'database'}}
    userService: {
      baseURL: process.env.USER_SERVICE_URL || '{{baseUrl}}',
      timeout: parseInt(process.env.API_TIMEOUT || '10000')
    },
    
    orderService: {
      baseURL: process.env.ORDER_SERVICE_URL || '{{baseUrl}}',
      timeout: parseInt(process.env.API_TIMEOUT || '10000')
    },
    {{/if}}
    
    // Test utilities
    testUtils: {
      baseURL: process.env.TEST_UTILS_URL || 'https://httpbin.org',
      timeout: 5000
    }
  },

  // üåê Enterprise Global Headers (applied to all requests)
  globalHeaders: {
    // Tracing and observability
    'X-Request-ID': '{{$util.random.uuid}}',
    'X-Correlation-ID': '{{$util.random.uuid}}',
    'X-Test-Suite': '{{packageName}}',
    'X-Test-Run-ID': '{{$util.date.timestamp}}',
    
    // Infrastructure metadata  
    'X-Environment': process.env.TEST_ENV || 'development',
    'X-Datacenter': process.env.DATACENTER || 'us-east-1',
    'X-Region': process.env.REGION || 'primary',
    'X-Cluster': process.env.CLUSTER || 'default',
    'X-Tenant-ID': process.env.TENANT_ID || 'default-tenant',
    
    // Compliance and security
    'X-Compliance-Mode': process.env.COMPLIANCE_MODE || 'standard',
    'X-Security-Level': process.env.SECURITY_LEVEL || 'enterprise',
    'X-Data-Classification': 'internal',
    
    // Infrastructure
    'X-Client-Version': '1.0.0',
    'X-Framework': 'RestifiedTS',
    'X-Platform': process.platform,
    'X-Node-Version': process.version
  },

  // üîê JWT Authentication Configuration
  authentication: {
    // JWT Login endpoint
    endpoint: process.env.LOGIN_ENDPOINT || '/auth/login',
    method: 'POST' as const,
    client: 'auth',
    
    // Login credentials (secure via environment variables)
    credentials: {
      email: process.env.API_USERNAME || 'admin@company.com',
      password: process.env.API_PASSWORD || 'admin123'
    },
    
    // Note: requestBody will be automatically created from credentials by the framework
    
    // JWT token extraction from login response
    extractors: {
      token: process.env.TOKEN_JSONPATH || '$.token',
      userEmail: process.env.USER_EMAIL_JSONPATH || '$.user.email',
      userId: process.env.USER_ID_JSONPATH || '$.user.id',
      expiresIn: process.env.EXPIRES_IN_JSONPATH || '$.expiresIn'
    },
    
    // Enterprise fallback for CI/CD environments
    fallback: {
      enabled: process.env.FALLBACK_AUTH_ENABLED !== 'false',
      token: process.env.FALLBACK_TOKEN || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.fallback-jwt-token',
      userEmail: process.env.FALLBACK_EMAIL || 'ci-cd@company.com',
      userId: parseInt(process.env.FALLBACK_USER_ID || '999')
    },
    
    // Enterprise client targeting
    autoApplyToClients: process.env.AUTH_APPLY_TO_CLIENTS?.split(',') || 'all',
    authHeaderName: process.env.AUTH_HEADER_NAME || 'Authorization'
  },

  // üìä Enterprise Global Variables (available in all tests)
  globalVariables: {
    // Environment settings
    testEnvironment: process.env.TEST_ENV || 'development',
    apiVersion: process.env.API_VERSION || 'v1',
    testSuite: process.env.TEST_SUITE_NAME || '{{packageName}}',
    
    // Test configuration
    defaultTimeout: parseInt(process.env.DEFAULT_TIMEOUT || '10000'),
    maxRetries: parseInt(process.env.MAX_RETRIES || '3'),
    enableLogging: process.env.ENABLE_LOGGING !== 'false',
    
    // Performance settings
    concurrentUsers: parseInt(process.env.CONCURRENT_USERS || '10'),
    rampUpDuration: parseInt(process.env.RAMP_UP_DURATION || '60'),
    testDuration: parseInt(process.env.TEST_DURATION || '300'),
    
    // Data management
    testDataPath: process.env.TEST_DATA_PATH || './test-data',
    fixturesPath: process.env.FIXTURES_PATH || './fixtures',
    reportsPath: process.env.REPORT_OUTPUT_DIR || './reports'
  },

  {{#if hasTestType 'graphql'}}
  // üåê GraphQL Configuration
  graphql: {
    clients: {
      main: {
        endpoint: process.env.GRAPHQL_ENDPOINT || '{{baseUrl}}/graphql',
        headers: {
          'Content-Type': 'application/json'
        }
      }
    }
  },
  {{/if}}

  {{#if hasTestType 'websocket'}}  
  // üîå WebSocket Configuration
  websocket: {
    clients: {
      main: {
        url: process.env.WEBSOCKET_URL || '{{baseUrl}}'.replace('http', 'ws') + '/ws',
        options: {
          handshakeTimeout: 10000,
          perMessageDeflate: false
        }
      }
    }
  },
  {{/if}}

  {{#if hasTestType 'database'}}
  // üóÑÔ∏è Database Configuration (Enterprise Multi-DB Support)
  databases: {
    // Primary database
    primary: {
      type: 'postgresql',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      database: process.env.DB_NAME || '{{sanitizedName}}_test',
      username: process.env.DB_USER || 'test_user',
      password: process.env.DB_PASSWORD || 'test_password',
      ssl: process.env.DB_SSL === 'true'
    },
    
    // Analytics database
    analytics: {
      type: 'mongodb',
      url: process.env.MONGO_URL || 'mongodb://localhost:27017/{{sanitizedName}}_analytics',
      options: {
        useUnifiedTopology: true
      }
    },
    
    // Cache database
    cache: {
      type: 'redis',
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
      password: process.env.REDIS_PASSWORD,
      db: parseInt(process.env.REDIS_DB || '0')
    }
  },
  {{/if}}

  {{#if hasTestType 'performance'}}
  // üöÄ Performance Testing Configuration
  performance: {
    // K6 Configuration
    k6: {
      scenarios: {
        smoke: {
          vus: 1,
          duration: '1m'
        },
        load: {
          vus: parseInt(process.env.LOAD_VUS || '10'),
          duration: process.env.LOAD_DURATION || '5m'
        },
        stress: {
          vus: parseInt(process.env.STRESS_VUS || '50'),
          duration: process.env.STRESS_DURATION || '10m'
        }
      },
      thresholds: {
        http_req_duration: ['p(95)<500'],
        http_req_failed: ['rate<0.1']
      }
    },
    
    // Artillery Configuration
    artillery: {
      phases: [
        {
          duration: parseInt(process.env.RAMP_UP_DURATION || '60'),
          arrivalRate: parseInt(process.env.ARRIVAL_RATE || '5')
        }
      ]
    }
  },
  {{/if}}

  {{#if hasTestType 'security'}}
  // üîí Security Testing Configuration
  security: {
    // OWASP ZAP Configuration
    zap: {
      proxy: process.env.ZAP_PROXY || 'http://localhost:8080',
      apiKey: process.env.ZAP_API_KEY,
      contextName: '{{projectName}} Security Context',
      scanPolicy: process.env.ZAP_SCAN_POLICY || 'Default Policy'
    },
    
    // Security test settings
    testPatterns: {
      sqlInjection: true,
      xss: true,
      authentication: true,
      authorization: true,
      sensitiveData: true
    }
  },
  {{/if}}

  // üìä Enterprise Reporting Configuration
  reporting: {
    // HTML Report Configuration (Enterprise)
    html: {
      enabled: true,
      outputDir: process.env.REPORT_OUTPUT_DIR || 'reports',
      filename: process.env.REPORT_FILENAME || 'restified-html-report.html',
      title: '{{projectName}} API Test Report',
      includeRequestResponse: process.env.INCLUDE_REQUEST_RESPONSE !== 'false',
      theme: process.env.REPORT_THEME || 'enterprise'
    },
    
    // Additional reporting formats
    formats: {
      json: process.env.JSON_REPORT === 'true',
      xml: process.env.XML_REPORT === 'true',
      junit: process.env.JUNIT_REPORT === 'true',
      allure: process.env.ALLURE_REPORT === 'true'
    },
    
    // Enterprise notifications
    notifications: {
      email: {
        enabled: process.env.EMAIL_NOTIFICATIONS === 'true',
        smtp: {
          host: process.env.SMTP_HOST,
          port: parseInt(process.env.SMTP_PORT || '587'),
          secure: process.env.SMTP_SECURE === 'true',
          auth: {
            user: process.env.SMTP_USER,
            pass: process.env.SMTP_PASSWORD
          }
        },
        recipients: process.env.EMAIL_RECIPIENTS?.split(',') || []
      },
      
      slack: {
        enabled: process.env.SLACK_NOTIFICATIONS === 'true',
        webhook: process.env.SLACK_WEBHOOK_URL,
        channel: process.env.SLACK_CHANNEL || '#api-tests'
      }
    }
  },

  // üîß Utility Configuration
  utilities: {
    enabled: true,
    categories: ['string', 'date', 'math', 'random', 'validation', 'data', 'crypto', 'security', 'file', 'encoding', 'network'],
    customPlugins: [],
    cacheResults: true,
    maxCacheSize: 1000
  }
};

export default config;